
c8t6_node1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08008d90  08008d90  00009d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009788  08009788  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009788  08009788  0000a788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009790  08009790  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009794  08009794  0000a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009798  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  200001f0  08009988  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002144  08009988  0000c144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001055d  00000000  00000000  0000b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a45  00000000  00000000  0001b776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001e1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc9  00000000  00000000  0001f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e92  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c8d  00000000  00000000  00039fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094340  00000000  00000000  0004fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000e3f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  000e4020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e9e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d74 	.word	0x08008d74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08008d74 	.word	0x08008d74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2uiz>:
 8000f98:	0042      	lsls	r2, r0, #1
 8000f9a:	d20e      	bcs.n	8000fba <__aeabi_f2uiz+0x22>
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fa0:	d30b      	bcc.n	8000fba <__aeabi_f2uiz+0x22>
 8000fa2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d409      	bmi.n	8000fc0 <__aeabi_f2uiz+0x28>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr
 8000fc0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fc4:	d101      	bne.n	8000fca <__aeabi_f2uiz+0x32>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	d102      	bne.n	8000fd0 <__aeabi_f2uiz+0x38>
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	4770      	bx	lr
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <lora_node_send>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t RxDt[3];
volatile uint8_t relay_status = 0, mode_hien_tai = 0;
char tx_lora_bf[21] = { };
void lora_node_send() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	if (RELAY == 0)
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <lora_node_send+0x6c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <lora_node_send+0x16>
		tx_lora_bf[16] = 1;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <lora_node_send+0x70>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	741a      	strb	r2, [r3, #16]
 8000fec:	e002      	b.n	8000ff4 <lora_node_send+0x1c>
	else
		tx_lora_bf[16] = 0;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <lora_node_send+0x70>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	741a      	strb	r2, [r3, #16]
	standby_mode();
 8000ff4:	f001 fa16 	bl	8002424 <standby_mode>
	writeRegister(0x0D, 0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200d      	movs	r0, #13
 8000ffc:	f001 f9e2 	bl	80023c4 <writeRegister>
	writeRegister(0x22, 0);
 8001000:	2100      	movs	r1, #0
 8001002:	2022      	movs	r0, #34	@ 0x22
 8001004:	f001 f9de 	bl	80023c4 <writeRegister>
	writeRegister(0, id_node - 1);
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f001 f9da 	bl	80023c4 <writeRegister>
	for (unsigned char i = 0; i < 18; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e009      	b.n	800102a <lora_node_send+0x52>
		writeRegister(0, tx_lora_bf[i]);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <lora_node_send+0x70>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	4619      	mov	r1, r3
 800101e:	2000      	movs	r0, #0
 8001020:	f001 f9d0 	bl	80023c4 <writeRegister>
	for (unsigned char i = 0; i < 18; i++) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3301      	adds	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b11      	cmp	r3, #17
 800102e:	d9f2      	bls.n	8001016 <lora_node_send+0x3e>
	}
	writeRegister(0x22, 18);
 8001030:	2112      	movs	r1, #18
 8001032:	2022      	movs	r0, #34	@ 0x22
 8001034:	f001 f9c6 	bl	80023c4 <writeRegister>
	tx_mode();
 8001038:	f001 fa04 	bl	8002444 <tx_mode>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	422181ac 	.word	0x422181ac
 8001048:	2000037c 	.word	0x2000037c

0800104c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800105c:	d07c      	beq.n	8001158 <HAL_GPIO_EXTI_Callback+0x10c>
 800105e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001062:	dc7e      	bgt.n	8001162 <HAL_GPIO_EXTI_Callback+0x116>
 8001064:	2b04      	cmp	r3, #4
 8001066:	d002      	beq.n	800106e <HAL_GPIO_EXTI_Callback+0x22>
 8001068:	2b10      	cmp	r3, #16
 800106a:	d071      	beq.n	8001150 <HAL_GPIO_EXTI_Callback+0x104>
		break;
	case GPIO_PIN_13:
		RELAY = 1;
		break;
	}
}
 800106c:	e079      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x116>
		if (mode_hien_tai == rx) {
 800106e:	4b3f      	ldr	r3, [pc, #252]	@ (800116c <HAL_GPIO_EXTI_Callback+0x120>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d15a      	bne.n	800112e <HAL_GPIO_EXTI_Callback+0xe2>
			writeRegister(0x12, readRegister(0x12) | 0x40); // xoa co
 8001078:	2012      	movs	r0, #18
 800107a:	f001 f975 	bl	8002368 <readRegister>
 800107e:	4603      	mov	r3, r0
 8001080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	2012      	movs	r0, #18
 800108a:	f001 f99b 	bl	80023c4 <writeRegister>
			writeRegister(0x0d, readRegister(0x10)); // dua con tro ve vi tri dau
 800108e:	2010      	movs	r0, #16
 8001090:	f001 f96a 	bl	8002368 <readRegister>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	200d      	movs	r0, #13
 800109a:	f001 f993 	bl	80023c4 <writeRegister>
			RxDt[0] = readRegister(0);
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 f962 	bl	8002368 <readRegister>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010aa:	701a      	strb	r2, [r3, #0]
			RxDt[1] = readRegister(0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f001 f95b 	bl	8002368 <readRegister>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010b8:	705a      	strb	r2, [r3, #1]
			RxDt[2] = readRegister(0);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f001 f954 	bl	8002368 <readRegister>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010c6:	709a      	strb	r2, [r3, #2]
			if(RxDt[0] == (id_node - 1))
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d147      	bne.n	8001160 <HAL_GPIO_EXTI_Callback+0x114>
				if (RxDt[1] == 0xFD)
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	2bfd      	cmp	r3, #253	@ 0xfd
 80010d6:	d10c      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0xa6>
					LED = 0;
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x128>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
					writeRegister(0x40, 0X40); // anh xa tx done
 80010de:	2140      	movs	r1, #64	@ 0x40
 80010e0:	2040      	movs	r0, #64	@ 0x40
 80010e2:	f001 f96f 	bl	80023c4 <writeRegister>
					lora_node_send();
 80010e6:	f7ff ff77 	bl	8000fd8 <lora_node_send>
					mode_hien_tai = tx;
 80010ea:	4b20      	ldr	r3, [pc, #128]	@ (800116c <HAL_GPIO_EXTI_Callback+0x120>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
		break;
 80010f0:	e036      	b.n	8001160 <HAL_GPIO_EXTI_Callback+0x114>
				else if(RxDt[1] == 0xFE)
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80010f8:	d132      	bne.n	8001160 <HAL_GPIO_EXTI_Callback+0x114>
					LED = 0;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x128>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
					relay_status = RxDt[2];
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x124>)
 8001102:	789a      	ldrb	r2, [r3, #2]
 8001104:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001106:	701a      	strb	r2, [r3, #0]
					if ((relay_status & 0x80) == 0x80) {
 8001108:	4b1b      	ldr	r3, [pc, #108]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x12c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001112:	2b80      	cmp	r3, #128	@ 0x80
 8001114:	d107      	bne.n	8001126 <HAL_GPIO_EXTI_Callback+0xda>
						RELAY = ~(relay_status & 0x01); /// vi relay kich muc 0
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	43da      	mvns	r2, r3
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <HAL_GPIO_EXTI_Callback+0x130>)
 8001124:	601a      	str	r2, [r3, #0]
					mode_hien_tai = tx;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <HAL_GPIO_EXTI_Callback+0x120>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
		break;
 800112c:	e018      	b.n	8001160 <HAL_GPIO_EXTI_Callback+0x114>
			LED = 1;
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x128>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
			writeRegister(0x12, 0x08);
 8001134:	2108      	movs	r1, #8
 8001136:	2012      	movs	r0, #18
 8001138:	f001 f944 	bl	80023c4 <writeRegister>
			writeRegister(0x40, 0X00); // anh xa rx done
 800113c:	2100      	movs	r1, #0
 800113e:	2040      	movs	r0, #64	@ 0x40
 8001140:	f001 f940 	bl	80023c4 <writeRegister>
			rx_mode();
 8001144:	f001 f986 	bl	8002454 <rx_mode>
			mode_hien_tai = rx;
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_GPIO_EXTI_Callback+0x120>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
		break;
 800114e:	e007      	b.n	8001160 <HAL_GPIO_EXTI_Callback+0x114>
		RELAY = 0;
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <HAL_GPIO_EXTI_Callback+0x130>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
		break;
 8001156:	e004      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x116>
		RELAY = 1;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <HAL_GPIO_EXTI_Callback+0x130>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
		break;
 800115e:	e000      	b.n	8001162 <HAL_GPIO_EXTI_Callback+0x116>
		break;
 8001160:	bf00      	nop
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000378 	.word	0x20000378
 8001170:	20000374 	.word	0x20000374
 8001174:	422181b0 	.word	0x422181b0
 8001178:	20000377 	.word	0x20000377
 800117c:	422181ac 	.word	0x422181ac

08001180 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001186:	f001 fabd 	bl	8002704 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800118a:	f000 fbe9 	bl	8001960 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800118e:	f000 fd77 	bl	8001c80 <MX_GPIO_Init>
	MX_DMA_Init();
 8001192:	f000 fd5f 	bl	8001c54 <MX_DMA_Init>
	MX_ADC1_Init();
 8001196:	f000 fc3f 	bl	8001a18 <MX_ADC1_Init>
	MX_I2C1_Init();
 800119a:	f000 fca7 	bl	8001aec <MX_I2C1_Init>
	MX_SPI1_Init();
 800119e:	f000 fcd3 	bl	8001b48 <MX_SPI1_Init>
	MX_TIM1_Init();
 80011a2:	f000 fd07 	bl	8001bb4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	RELAY = 1;
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <main+0x100>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
	HAL_I2C_Init(&hi2c1);
 80011ac:	4835      	ldr	r0, [pc, #212]	@ (8001284 <main+0x104>)
 80011ae:	f002 fb53 	bl	8003858 <HAL_I2C_Init>
	HAL_SPI_Init(&hspi1);
 80011b2:	4835      	ldr	r0, [pc, #212]	@ (8001288 <main+0x108>)
 80011b4:	f003 fd68 	bl	8004c88 <HAL_SPI_Init>
	setbuf(stdout, NULL);
 80011b8:	4b34      	ldr	r3, [pc, #208]	@ (800128c <main+0x10c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fae9 	bl	8006798 <setbuf>
	oled_init();
 80011c6:	f000 fe39 	bl	8001e3c <oled_init>
	oled_display_pattern();
 80011ca:	f000 fe80 	bl	8001ece <oled_display_pattern>
	sx1278_init(0x6c4000);
 80011ce:	4830      	ldr	r0, [pc, #192]	@ (8001290 <main+0x110>)
 80011d0:	f001 f964 	bl	800249c <sx1278_init>
	rx_mode();
 80011d4:	f001 f93e 	bl	8002454 <rx_mode>
	HAL_TIM_Base_Start(&htim1);
 80011d8:	482e      	ldr	r0, [pc, #184]	@ (8001294 <main+0x114>)
 80011da:	f004 fb39 	bl	8005850 <HAL_TIM_Base_Start>
	HAL_ADCEx_Calibration_Start(&hadc1);
 80011de:	482e      	ldr	r0, [pc, #184]	@ (8001298 <main+0x118>)
 80011e0:	f001 fee2 	bl	8002fa8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_values, 4);
 80011e4:	2204      	movs	r2, #4
 80011e6:	492d      	ldr	r1, [pc, #180]	@ (800129c <main+0x11c>)
 80011e8:	482b      	ldr	r0, [pc, #172]	@ (8001298 <main+0x118>)
 80011ea:	f001 fbe9 	bl	80029c0 <HAL_ADC_Start_DMA>
	oled_set_cursor(0, 0);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 fe97 	bl	8001f24 <oled_set_cursor>
	printf("NODE_%d", (uint8_t) id_node);
 80011f6:	2101      	movs	r1, #1
 80011f8:	4829      	ldr	r0, [pc, #164]	@ (80012a0 <main+0x120>)
 80011fa:	f005 fabb 	bl	8006774 <iprintf>
	LED = 1;
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <main+0x124>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		somau = 0;
 8001204:	4b28      	ldr	r3, [pc, #160]	@ (80012a8 <main+0x128>)
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
		while (somau < somau_max) {
 800120a:	e02f      	b.n	800126c <main+0xec>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 800120c:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <main+0x114>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
			mang_adc1[somau] = adc_values[0];
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <main+0x11c>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <main+0x128>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <main+0x12c>)
 8001220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mang_adc2[somau] = adc_values[1];
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <main+0x11c>)
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <main+0x128>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <main+0x130>)
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mang_adc3[somau] = adc_values[2];
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <main+0x11c>)
 8001236:	6899      	ldr	r1, [r3, #8]
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <main+0x128>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <main+0x134>)
 8001240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mang_adc4[somau] = adc_values[3];
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <main+0x11c>)
 8001246:	68d9      	ldr	r1, [r3, #12]
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <main+0x128>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <main+0x138>)
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			somau++;
 8001254:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <main+0x128>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <main+0x128>)
 800125e:	801a      	strh	r2, [r3, #0]
			while (__HAL_TIM_GET_COUNTER(&htim1) < 200) {
 8001260:	bf00      	nop
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <main+0x114>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	2bc7      	cmp	r3, #199	@ 0xc7
 800126a:	d9fa      	bls.n	8001262 <main+0xe2>
		while (somau < somau_max) {
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <main+0x128>)
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x13c>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3c9      	bcc.n	800120c <main+0x8c>
//			mang_adc1[i / 2] = (mang_adc1[i] + mang_adc1[i + 1]) / 2;
//			mau_dong_dien1[i / 2] = (((float) mang_adc1[i / 2] * (3.3 / 4096.0))
//					- 1.65) / 0.02;
//		}

		for (unsigned int i = 0; i < somau_max; i = i + 2) {
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	e12b      	b.n	80014d6 <main+0x356>
 800127e:	bf00      	nop
 8001280:	422181ac 	.word	0x422181ac
 8001284:	20000280 	.word	0x20000280
 8001288:	200002d4 	.word	0x200002d4
 800128c:	20000020 	.word	0x20000020
 8001290:	006c4000 	.word	0x006c4000
 8001294:	2000032c 	.word	0x2000032c
 8001298:	2000020c 	.word	0x2000020c
 800129c:	20001fd4 	.word	0x20001fd4
 80012a0:	08008d90 	.word	0x08008d90
 80012a4:	422181b0 	.word	0x422181b0
 80012a8:	20000392 	.word	0x20000392
 80012ac:	20000394 	.word	0x20000394
 80012b0:	20000844 	.word	0x20000844
 80012b4:	20000cf4 	.word	0x20000cf4
 80012b8:	200011a4 	.word	0x200011a4
 80012bc:	20000000 	.word	0x20000000
			mang_adc1[i / 2] = (mang_adc1[i] + mang_adc1[i + 1]) / 2;
 80012c0:	4a99      	ldr	r2, [pc, #612]	@ (8001528 <main+0x3a8>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4996      	ldr	r1, [pc, #600]	@ (8001528 <main+0x3a8>)
 80012ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d2:	4413      	add	r3, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	0852      	lsrs	r2, r2, #1
 80012d8:	0fd9      	lsrs	r1, r3, #31
 80012da:	440b      	add	r3, r1
 80012dc:	105b      	asrs	r3, r3, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	4b91      	ldr	r3, [pc, #580]	@ (8001528 <main+0x3a8>)
 80012e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mau_dong_dien1[i / 2] = (((float) mang_adc1[i / 2] * (3.3 / 4096.0))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	4a8f      	ldr	r2, [pc, #572]	@ (8001528 <main+0x3a8>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fd87 	bl	8000e04 <__aeabi_i2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f949 	bl	8000590 <__aeabi_f2d>
 80012fe:	a384      	add	r3, pc, #528	@ (adr r3, 8001510 <main+0x390>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f99c 	bl	8000640 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
					- 1.65) / 0.02;
 8001310:	a381      	add	r3, pc, #516	@ (adr r3, 8001518 <main+0x398>)
 8001312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001316:	f7fe ffdb 	bl	80002d0 <__aeabi_dsub>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	a37f      	add	r3, pc, #508	@ (adr r3, 8001520 <main+0x3a0>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fab4 	bl	8000894 <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
			mau_dong_dien1[i / 2] = (((float) mang_adc1[i / 2] * (3.3 / 4096.0))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	085c      	lsrs	r4, r3, #1
					- 1.65) / 0.02;
 8001338:	f7ff fc5a 	bl	8000bf0 <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
			mau_dong_dien1[i / 2] = (((float) mang_adc1[i / 2] * (3.3 / 4096.0))
 800133e:	4a7b      	ldr	r2, [pc, #492]	@ (800152c <main+0x3ac>)
 8001340:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

			mang_adc2[i / 2] = (mang_adc2[i] + mang_adc2[i + 1]) / 2;
 8001344:	4a7a      	ldr	r2, [pc, #488]	@ (8001530 <main+0x3b0>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	4977      	ldr	r1, [pc, #476]	@ (8001530 <main+0x3b0>)
 8001352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001356:	4413      	add	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	0852      	lsrs	r2, r2, #1
 800135c:	0fd9      	lsrs	r1, r3, #31
 800135e:	440b      	add	r3, r1
 8001360:	105b      	asrs	r3, r3, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4b72      	ldr	r3, [pc, #456]	@ (8001530 <main+0x3b0>)
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mau_dong_dien2[i / 2] = (((float) mang_adc2[i / 2] * (3.3 / 4096.0))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	4a70      	ldr	r2, [pc, #448]	@ (8001530 <main+0x3b0>)
 8001370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd45 	bl	8000e04 <__aeabi_i2f>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f907 	bl	8000590 <__aeabi_f2d>
 8001382:	a363      	add	r3, pc, #396	@ (adr r3, 8001510 <main+0x390>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f95a 	bl	8000640 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
					- 1.65) / 0.02;
 8001394:	a360      	add	r3, pc, #384	@ (adr r3, 8001518 <main+0x398>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7fe ff99 	bl	80002d0 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	a35e      	add	r3, pc, #376	@ (adr r3, 8001520 <main+0x3a0>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fa72 	bl	8000894 <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
			mau_dong_dien2[i / 2] = (((float) mang_adc2[i / 2] * (3.3 / 4096.0))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	085c      	lsrs	r4, r3, #1
					- 1.65) / 0.02;
 80013bc:	f7ff fc18 	bl	8000bf0 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
			mau_dong_dien2[i / 2] = (((float) mang_adc2[i / 2] * (3.3 / 4096.0))
 80013c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001534 <main+0x3b4>)
 80013c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

			mang_adc3[i / 2] = (mang_adc3[i] + mang_adc3[i + 1]) / 2;
 80013c8:	4a5b      	ldr	r2, [pc, #364]	@ (8001538 <main+0x3b8>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4958      	ldr	r1, [pc, #352]	@ (8001538 <main+0x3b8>)
 80013d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013da:	4413      	add	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	0852      	lsrs	r2, r2, #1
 80013e0:	0fd9      	lsrs	r1, r3, #31
 80013e2:	440b      	add	r3, r1
 80013e4:	105b      	asrs	r3, r3, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b53      	ldr	r3, [pc, #332]	@ (8001538 <main+0x3b8>)
 80013ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mau_dong_dien3[i / 2] = (((float) mang_adc3[i / 2] * (3.3 / 4096.0))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	4a51      	ldr	r2, [pc, #324]	@ (8001538 <main+0x3b8>)
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fd03 	bl	8000e04 <__aeabi_i2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8c5 	bl	8000590 <__aeabi_f2d>
 8001406:	a342      	add	r3, pc, #264	@ (adr r3, 8001510 <main+0x390>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f918 	bl	8000640 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
					- 1.65) / 0.02;
 8001418:	a33f      	add	r3, pc, #252	@ (adr r3, 8001518 <main+0x398>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7fe ff57 	bl	80002d0 <__aeabi_dsub>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001520 <main+0x3a0>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fa30 	bl	8000894 <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
			mau_dong_dien3[i / 2] = (((float) mang_adc3[i / 2] * (3.3 / 4096.0))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	085c      	lsrs	r4, r3, #1
					- 1.65) / 0.02;
 8001440:	f7ff fbd6 	bl	8000bf0 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
			mau_dong_dien3[i / 2] = (((float) mang_adc3[i / 2] * (3.3 / 4096.0))
 8001446:	4a3d      	ldr	r2, [pc, #244]	@ (800153c <main+0x3bc>)
 8001448:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

			mang_adc4[i / 2] = (mang_adc4[i] + mang_adc4[i + 1]) / 2;
 800144c:	4a3c      	ldr	r2, [pc, #240]	@ (8001540 <main+0x3c0>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	4939      	ldr	r1, [pc, #228]	@ (8001540 <main+0x3c0>)
 800145a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800145e:	4413      	add	r3, r2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	0852      	lsrs	r2, r2, #1
 8001464:	0fd9      	lsrs	r1, r3, #31
 8001466:	440b      	add	r3, r1
 8001468:	105b      	asrs	r3, r3, #1
 800146a:	4619      	mov	r1, r3
 800146c:	4b34      	ldr	r3, [pc, #208]	@ (8001540 <main+0x3c0>)
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mau_dong_dien4[i / 2] = (((float) mang_adc4[i / 2] * (3.3 / 4096.0))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <main+0x3c0>)
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fcc1 	bl	8000e04 <__aeabi_i2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f883 	bl	8000590 <__aeabi_f2d>
 800148a:	a321      	add	r3, pc, #132	@ (adr r3, 8001510 <main+0x390>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f8d6 	bl	8000640 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
					- 1.65) / 0.02;
 800149c:	a31e      	add	r3, pc, #120	@ (adr r3, 8001518 <main+0x398>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7fe ff15 	bl	80002d0 <__aeabi_dsub>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	a31c      	add	r3, pc, #112	@ (adr r3, 8001520 <main+0x3a0>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f9ee 	bl	8000894 <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
			mau_dong_dien4[i / 2] = (((float) mang_adc4[i / 2] * (3.3 / 4096.0))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	085c      	lsrs	r4, r3, #1
					- 1.65) / 0.02;
 80014c4:	f7ff fb94 	bl	8000bf0 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
			mau_dong_dien4[i / 2] = (((float) mang_adc4[i / 2] * (3.3 / 4096.0))
 80014ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <main+0x3c4>)
 80014cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (unsigned int i = 0; i < somau_max; i = i + 2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <main+0x3c8>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4293      	cmp	r3, r2
 80014e0:	f4ff aeee 	bcc.w	80012c0 <main+0x140>
		}

		tong_dong1 = 0;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <main+0x3cc>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		tong_dong2 = 0;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <main+0x3d0>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
		tong_dong3 = 0;
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <main+0x3d4>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
		tong_dong4 = 0;
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <main+0x3d8>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

		for (unsigned int i = 0; i < somau_max / 2; i++) {
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	e08b      	b.n	8001622 <main+0x4a2>
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	66666666 	.word	0x66666666
 8001514:	3f4a6666 	.word	0x3f4a6666
 8001518:	66666666 	.word	0x66666666
 800151c:	3ffa6666 	.word	0x3ffa6666
 8001520:	47ae147b 	.word	0x47ae147b
 8001524:	3f947ae1 	.word	0x3f947ae1
 8001528:	20000394 	.word	0x20000394
 800152c:	20001654 	.word	0x20001654
 8001530:	20000844 	.word	0x20000844
 8001534:	200018ac 	.word	0x200018ac
 8001538:	20000cf4 	.word	0x20000cf4
 800153c:	20001b04 	.word	0x20001b04
 8001540:	200011a4 	.word	0x200011a4
 8001544:	20001d5c 	.word	0x20001d5c
 8001548:	20000000 	.word	0x20000000
 800154c:	20001fb4 	.word	0x20001fb4
 8001550:	20001fb8 	.word	0x20001fb8
 8001554:	20001fbc 	.word	0x20001fbc
 8001558:	20001fc0 	.word	0x20001fc0
			tong_dong1 = tong_dong1 + mau_dong_dien1[i] * mau_dong_dien1[i];
 800155c:	4aac      	ldr	r2, [pc, #688]	@ (8001810 <main+0x690>)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001564:	49aa      	ldr	r1, [pc, #680]	@ (8001810 <main+0x690>)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7fe fdf6 	bl	8000160 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4ba6      	ldr	r3, [pc, #664]	@ (8001814 <main+0x694>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff fb8c 	bl	8000c9c <__addsf3>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4ba2      	ldr	r3, [pc, #648]	@ (8001814 <main+0x694>)
 800158a:	601a      	str	r2, [r3, #0]
			tong_dong2 = tong_dong2 + mau_dong_dien2[i] * mau_dong_dien2[i];
 800158c:	4aa2      	ldr	r2, [pc, #648]	@ (8001818 <main+0x698>)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001594:	49a0      	ldr	r1, [pc, #640]	@ (8001818 <main+0x698>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7fe fdde 	bl	8000160 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b9c      	ldr	r3, [pc, #624]	@ (800181c <main+0x69c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fb74 	bl	8000c9c <__addsf3>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b98      	ldr	r3, [pc, #608]	@ (800181c <main+0x69c>)
 80015ba:	601a      	str	r2, [r3, #0]
			tong_dong3 = tong_dong3 + mau_dong_dien3[i] * mau_dong_dien3[i];
 80015bc:	4a98      	ldr	r2, [pc, #608]	@ (8001820 <main+0x6a0>)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c4:	4996      	ldr	r1, [pc, #600]	@ (8001820 <main+0x6a0>)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7fe fdc6 	bl	8000160 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b92      	ldr	r3, [pc, #584]	@ (8001824 <main+0x6a4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f7ff fb5c 	bl	8000c9c <__addsf3>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001824 <main+0x6a4>)
 80015ea:	601a      	str	r2, [r3, #0]
			tong_dong4 = tong_dong4 + mau_dong_dien4[i] * mau_dong_dien4[i];
 80015ec:	4a8e      	ldr	r2, [pc, #568]	@ (8001828 <main+0x6a8>)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f4:	498c      	ldr	r1, [pc, #560]	@ (8001828 <main+0x6a8>)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7fe fdae 	bl	8000160 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b88      	ldr	r3, [pc, #544]	@ (800182c <main+0x6ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fb44 	bl	8000c9c <__addsf3>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b84      	ldr	r3, [pc, #528]	@ (800182c <main+0x6ac>)
 800161a:	601a      	str	r2, [r3, #0]
		for (unsigned int i = 0; i < somau_max / 2; i++) {
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b83      	ldr	r3, [pc, #524]	@ (8001830 <main+0x6b0>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4293      	cmp	r3, r2
 8001630:	d394      	bcc.n	800155c <main+0x3dc>
		}

		irms[0] = sqrt(tong_dong1 / 75.0) - 0.15;
 8001632:	4b78      	ldr	r3, [pc, #480]	@ (8001814 <main+0x694>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ffaa 	bl	8000590 <__aeabi_f2d>
 800163c:	a36e      	add	r3, pc, #440	@ (adr r3, 80017f8 <main+0x678>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7ff f927 	bl	8000894 <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f007 fa97 	bl	8008b80 <sqrt>
 8001652:	a36b      	add	r3, pc, #428	@ (adr r3, 8001800 <main+0x680>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe fe3a 	bl	80002d0 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fac4 	bl	8000bf0 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4a72      	ldr	r2, [pc, #456]	@ (8001834 <main+0x6b4>)
 800166c:	6013      	str	r3, [r2, #0]
		if (irms[0] < 0.2)
 800166e:	4b71      	ldr	r3, [pc, #452]	@ (8001834 <main+0x6b4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff8c 	bl	8000590 <__aeabi_f2d>
 8001678:	a363      	add	r3, pc, #396	@ (adr r3, 8001808 <main+0x688>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7ff fa51 	bl	8000b24 <__aeabi_dcmplt>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <main+0x510>
			irms[0] = 0;
 8001688:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <main+0x6b4>)
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
		if (irms[0] > 50)
 8001690:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <main+0x6b4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4968      	ldr	r1, [pc, #416]	@ (8001838 <main+0x6b8>)
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fc74 	bl	8000f84 <__aeabi_fcmpgt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <main+0x528>
			irms[0] = 50;
 80016a2:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <main+0x6b4>)
 80016a4:	4a64      	ldr	r2, [pc, #400]	@ (8001838 <main+0x6b8>)
 80016a6:	601a      	str	r2, [r3, #0]

		irms[1] = sqrt(tong_dong2 / 75.0) - 0.15;
 80016a8:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <main+0x69c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff6f 	bl	8000590 <__aeabi_f2d>
 80016b2:	a351      	add	r3, pc, #324	@ (adr r3, 80017f8 <main+0x678>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f8ec 	bl	8000894 <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f007 fa5c 	bl	8008b80 <sqrt>
 80016c8:	a34d      	add	r3, pc, #308	@ (adr r3, 8001800 <main+0x680>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fdff 	bl	80002d0 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff fa89 	bl	8000bf0 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a54      	ldr	r2, [pc, #336]	@ (8001834 <main+0x6b4>)
 80016e2:	6053      	str	r3, [r2, #4]
		if (irms[1] < 0.2)
 80016e4:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <main+0x6b4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff51 	bl	8000590 <__aeabi_f2d>
 80016ee:	a346      	add	r3, pc, #280	@ (adr r3, 8001808 <main+0x688>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff fa16 	bl	8000b24 <__aeabi_dcmplt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <main+0x586>
			irms[1] = 0;
 80016fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <main+0x6b4>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
		if (irms[1] > 50)
 8001706:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <main+0x6b4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	494b      	ldr	r1, [pc, #300]	@ (8001838 <main+0x6b8>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fc39 	bl	8000f84 <__aeabi_fcmpgt>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <main+0x59e>
			irms[1] = 50;
 8001718:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <main+0x6b4>)
 800171a:	4a47      	ldr	r2, [pc, #284]	@ (8001838 <main+0x6b8>)
 800171c:	605a      	str	r2, [r3, #4]

		irms[2] = sqrt(tong_dong3 / 75.0) - 0.15;
 800171e:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <main+0x6a4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff34 	bl	8000590 <__aeabi_f2d>
 8001728:	a333      	add	r3, pc, #204	@ (adr r3, 80017f8 <main+0x678>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7ff f8b1 	bl	8000894 <__aeabi_ddiv>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f007 fa21 	bl	8008b80 <sqrt>
 800173e:	a330      	add	r3, pc, #192	@ (adr r3, 8001800 <main+0x680>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fdc4 	bl	80002d0 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa4e 	bl	8000bf0 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4a37      	ldr	r2, [pc, #220]	@ (8001834 <main+0x6b4>)
 8001758:	6093      	str	r3, [r2, #8]
		if (irms[2] < 0.2)
 800175a:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <main+0x6b4>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff16 	bl	8000590 <__aeabi_f2d>
 8001764:	a328      	add	r3, pc, #160	@ (adr r3, 8001808 <main+0x688>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7ff f9db 	bl	8000b24 <__aeabi_dcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <main+0x5fc>
			irms[2] = 0;
 8001774:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <main+0x6b4>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
		if (irms[2] > 50)
 800177c:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <main+0x6b4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	492d      	ldr	r1, [pc, #180]	@ (8001838 <main+0x6b8>)
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fbfe 	bl	8000f84 <__aeabi_fcmpgt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <main+0x614>
			irms[2] = 50;
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <main+0x6b4>)
 8001790:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <main+0x6b8>)
 8001792:	609a      	str	r2, [r3, #8]

		irms[3] = sqrt(tong_dong4 / 75.0) - 0.15;
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <main+0x6ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fef9 	bl	8000590 <__aeabi_f2d>
 800179e:	a316      	add	r3, pc, #88	@ (adr r3, 80017f8 <main+0x678>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f876 	bl	8000894 <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f007 f9e6 	bl	8008b80 <sqrt>
 80017b4:	a312      	add	r3, pc, #72	@ (adr r3, 8001800 <main+0x680>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe fd89 	bl	80002d0 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa13 	bl	8000bf0 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a19      	ldr	r2, [pc, #100]	@ (8001834 <main+0x6b4>)
 80017ce:	60d3      	str	r3, [r2, #12]
		if (irms[3] < 0.2)
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <main+0x6b4>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedb 	bl	8000590 <__aeabi_f2d>
 80017da:	a30b      	add	r3, pc, #44	@ (adr r3, 8001808 <main+0x688>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7ff f9a0 	bl	8000b24 <__aeabi_dcmplt>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d028      	beq.n	800183c <main+0x6bc>
			irms[3] = 0;
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <main+0x6b4>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	e023      	b.n	800183c <main+0x6bc>
 80017f4:	f3af 8000 	nop.w
 80017f8:	00000000 	.word	0x00000000
 80017fc:	4052c000 	.word	0x4052c000
 8001800:	33333333 	.word	0x33333333
 8001804:	3fc33333 	.word	0x3fc33333
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3fc99999 	.word	0x3fc99999
 8001810:	20001654 	.word	0x20001654
 8001814:	20001fb4 	.word	0x20001fb4
 8001818:	200018ac 	.word	0x200018ac
 800181c:	20001fb8 	.word	0x20001fb8
 8001820:	20001b04 	.word	0x20001b04
 8001824:	20001fbc 	.word	0x20001fbc
 8001828:	20001d5c 	.word	0x20001d5c
 800182c:	20001fc0 	.word	0x20001fc0
 8001830:	20000000 	.word	0x20000000
 8001834:	20001fc4 	.word	0x20001fc4
 8001838:	42480000 	.word	0x42480000
		if (irms[3] > 50)
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <main+0x7bc>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	493f      	ldr	r1, [pc, #252]	@ (8001940 <main+0x7c0>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb9e 	bl	8000f84 <__aeabi_fcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <main+0x6d4>
			irms[3] = 50;
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <main+0x7bc>)
 8001850:	4a3b      	ldr	r2, [pc, #236]	@ (8001940 <main+0x7c0>)
 8001852:	60da      	str	r2, [r3, #12]

//////////////////////////////////////

		oled_set_cursor(0, 0);
 8001854:	2100      	movs	r1, #0
 8001856:	2000      	movs	r0, #0
 8001858:	f000 fb64 	bl	8001f24 <oled_set_cursor>
		printf("I1 : %05.2f A", irms[0]);
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <main+0x7bc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe95 	bl	8000590 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4836      	ldr	r0, [pc, #216]	@ (8001944 <main+0x7c4>)
 800186c:	f004 ff82 	bl	8006774 <iprintf>
		oled_set_cursor(0, 2);
 8001870:	2102      	movs	r1, #2
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fb56 	bl	8001f24 <oled_set_cursor>
		printf("I2 : %05.2f A", irms[1]);
 8001878:	4b30      	ldr	r3, [pc, #192]	@ (800193c <main+0x7bc>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe87 	bl	8000590 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4830      	ldr	r0, [pc, #192]	@ (8001948 <main+0x7c8>)
 8001888:	f004 ff74 	bl	8006774 <iprintf>
		oled_set_cursor(0, 4);
 800188c:	2104      	movs	r1, #4
 800188e:	2000      	movs	r0, #0
 8001890:	f000 fb48 	bl	8001f24 <oled_set_cursor>
		printf("I3 : %05.2f A", irms[2]);
 8001894:	4b29      	ldr	r3, [pc, #164]	@ (800193c <main+0x7bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe79 	bl	8000590 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	482a      	ldr	r0, [pc, #168]	@ (800194c <main+0x7cc>)
 80018a4:	f004 ff66 	bl	8006774 <iprintf>
		oled_set_cursor(0, 6);
 80018a8:	2106      	movs	r1, #6
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 fb3a 	bl	8001f24 <oled_set_cursor>
		printf("I4 : %05.2f A", irms[3]);
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <main+0x7bc>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe6b 	bl	8000590 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4824      	ldr	r0, [pc, #144]	@ (8001950 <main+0x7d0>)
 80018c0:	f004 ff58 	bl	8006774 <iprintf>

		sprintf(tx_lora_bf, "%04d%04d%04d%04d", (uint16_t) (irms[0] * 100),
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <main+0x7bc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4922      	ldr	r1, [pc, #136]	@ (8001954 <main+0x7d4>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fc48 	bl	8000160 <__aeabi_fmul>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb60 	bl	8000f98 <__aeabi_f2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29b      	uxth	r3, r3
 80018dc:	461d      	mov	r5, r3
				(uint16_t) (irms[1] * 100), (uint16_t) (irms[2] * 100),
 80018de:	4b17      	ldr	r3, [pc, #92]	@ (800193c <main+0x7bc>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	491c      	ldr	r1, [pc, #112]	@ (8001954 <main+0x7d4>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fc3b 	bl	8000160 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fb53 	bl	8000f98 <__aeabi_f2uiz>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b29b      	uxth	r3, r3
		sprintf(tx_lora_bf, "%04d%04d%04d%04d", (uint16_t) (irms[0] * 100),
 80018f6:	461e      	mov	r6, r3
				(uint16_t) (irms[1] * 100), (uint16_t) (irms[2] * 100),
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <main+0x7bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4915      	ldr	r1, [pc, #84]	@ (8001954 <main+0x7d4>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc2e 	bl	8000160 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb46 	bl	8000f98 <__aeabi_f2uiz>
 800190c:	4603      	mov	r3, r0
 800190e:	b29b      	uxth	r3, r3
		sprintf(tx_lora_bf, "%04d%04d%04d%04d", (uint16_t) (irms[0] * 100),
 8001910:	461c      	mov	r4, r3
				(uint16_t) (irms[3] * 100));
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <main+0x7bc>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	490f      	ldr	r1, [pc, #60]	@ (8001954 <main+0x7d4>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc21 	bl	8000160 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb39 	bl	8000f98 <__aeabi_f2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	b29b      	uxth	r3, r3
		sprintf(tx_lora_bf, "%04d%04d%04d%04d", (uint16_t) (irms[0] * 100),
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	9400      	str	r4, [sp, #0]
 800192e:	4633      	mov	r3, r6
 8001930:	462a      	mov	r2, r5
 8001932:	4909      	ldr	r1, [pc, #36]	@ (8001958 <main+0x7d8>)
 8001934:	4809      	ldr	r0, [pc, #36]	@ (800195c <main+0x7dc>)
 8001936:	f004 ffeb 	bl	8006910 <siprintf>
		somau = 0;
 800193a:	e463      	b.n	8001204 <main+0x84>
 800193c:	20001fc4 	.word	0x20001fc4
 8001940:	42480000 	.word	0x42480000
 8001944:	08008d98 	.word	0x08008d98
 8001948:	08008da8 	.word	0x08008da8
 800194c:	08008db8 	.word	0x08008db8
 8001950:	08008dc8 	.word	0x08008dc8
 8001954:	42c80000 	.word	0x42c80000
 8001958:	08008dd8 	.word	0x08008dd8
 800195c:	2000037c 	.word	0x2000037c

08001960 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196a:	2228      	movs	r2, #40	@ 0x28
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f005 f831 	bl	80069d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001990:	2301      	movs	r3, #1
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800199e:	2301      	movs	r3, #1
 80019a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80019b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fbea 	bl	8004190 <HAL_RCC_OscConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x66>
		Error_Handler();
 80019c2:	f000 f9f9 	bl	8001db8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019c6:	230f      	movs	r3, #15
 80019c8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2102      	movs	r1, #2
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fe56 	bl	8004694 <HAL_RCC_ClockConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x92>
		Error_Handler();
 80019ee:	f000 f9e3 	bl	8001db8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019f2:	2302      	movs	r3, #2
 80019f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80019f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019fa:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 ffd6 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0xae>
		Error_Handler();
 8001a0a:	f000 f9d5 	bl	8001db8 <Error_Handler>
	}
}
 8001a0e:	bf00      	nop
 8001a10:	3750      	adds	r7, #80	@ 0x50
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae8 <MX_ADC1_Init+0xd0>)
 8001a2c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a34:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001a36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a42:	4b28      	ldr	r3, [pc, #160]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a44:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001a56:	4823      	ldr	r0, [pc, #140]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a58:	f000 feda 	bl	8002810 <HAL_ADC_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x4e>
		Error_Handler();
 8001a62:	f000 f9a9 	bl	8001db8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4619      	mov	r1, r3
 8001a76:	481b      	ldr	r0, [pc, #108]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a78:	f001 f89c 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8001a82:	f000 f999 	bl	8001db8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4814      	ldr	r0, [pc, #80]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001a94:	f001 f88e 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0x8a>
		Error_Handler();
 8001a9e:	f000 f98b 	bl	8001db8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001ab0:	f001 f880 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC1_Init+0xa6>
		Error_Handler();
 8001aba:	f000 f97d 	bl	8001db8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <MX_ADC1_Init+0xcc>)
 8001acc:	f001 f872 	bl	8002bb4 <HAL_ADC_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_ADC1_Init+0xc2>
		Error_Handler();
 8001ad6:	f000 f96f 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000020c 	.word	0x2000020c
 8001ae8:	40012400 	.word	0x40012400

08001aec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	@ (8001b40 <MX_I2C1_Init+0x54>)
 8001af4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001af8:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <MX_I2C1_Init+0x58>)
 8001afa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b0e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b28:	4804      	ldr	r0, [pc, #16]	@ (8001b3c <MX_I2C1_Init+0x50>)
 8001b2a:	f001 fe95 	bl	8003858 <HAL_I2C_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b34:	f000 f940 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000280 	.word	0x20000280
 8001b40:	40005400 	.word	0x40005400
 8001b44:	000186a0 	.word	0x000186a0

08001b48 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b4e:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <MX_SPI1_Init+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b58:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b78:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_SPI1_Init+0x64>)
 8001b9a:	f003 f875 	bl	8004c88 <HAL_SPI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001ba4:	f000 f908 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200002d4 	.word	0x200002d4
 8001bb0:	40013000 	.word	0x40013000

08001bb4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <MX_TIM1_Init+0x9c>)
 8001bd4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bd8:	2248      	movs	r2, #72	@ 0x48
 8001bda:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001be4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001be8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001bfc:	4813      	ldr	r0, [pc, #76]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001bfe:	f003 fdd8 	bl	80057b2 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x58>
		Error_Handler();
 8001c08:	f000 f8d6 	bl	8001db8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c10:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001c1a:	f003 fe63 	bl	80058e4 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001c24:	f000 f8c8 	bl	8001db8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_TIM1_Init+0x98>)
 8001c36:	f004 f821 	bl	8005c7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001c40:	f000 f8ba 	bl	8001db8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000032c 	.word	0x2000032c
 8001c50:	40012c00 	.word	0x40012c00

08001c54 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <MX_DMA_Init+0x28>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <MX_DMA_Init+0x28>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6153      	str	r3, [r2, #20]
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <MX_DMA_Init+0x28>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40021000 	.word	0x40021000

08001c80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c94:	4b3c      	ldr	r3, [pc, #240]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001c9a:	f043 0320 	orr.w	r3, r3, #32
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a35      	ldr	r2, [pc, #212]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <MX_GPIO_Init+0x108>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f641 0103 	movw	r1, #6147	@ 0x1803
 8001ce2:	482a      	ldr	r0, [pc, #168]	@ (8001d8c <MX_GPIO_Init+0x10c>)
 8001ce4:	f001 fd88 	bl	80037f8 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cec:	4b28      	ldr	r3, [pc, #160]	@ (8001d90 <MX_GPIO_Init+0x110>)
 8001cee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4826      	ldr	r0, [pc, #152]	@ (8001d94 <MX_GPIO_Init+0x114>)
 8001cfc:	f001 fbf8 	bl	80034f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB11 PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12;
 8001d00:	f641 0303 	movw	r3, #6147	@ 0x1803
 8001d04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	481c      	ldr	r0, [pc, #112]	@ (8001d8c <MX_GPIO_Init+0x10c>)
 8001d1a:	f001 fbe9 	bl	80034f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_GPIO_Init+0x118>)
 8001d24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <MX_GPIO_Init+0x10c>)
 8001d32:	f001 fbdd 	bl	80034f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_GPIO_Init+0x110>)
 8001d3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <MX_GPIO_Init+0x10c>)
 8001d4c:	f001 fbd0 	bl	80034f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	2008      	movs	r0, #8
 8001d56:	f001 faac 	bl	80032b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d5a:	2008      	movs	r0, #8
 8001d5c:	f001 fac5 	bl	80032ea <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	200a      	movs	r0, #10
 8001d66:	f001 faa4 	bl	80032b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d6a:	200a      	movs	r0, #10
 8001d6c:	f001 fabd 	bl	80032ea <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2028      	movs	r0, #40	@ 0x28
 8001d76:	f001 fa9c 	bl	80032b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d7a:	2028      	movs	r0, #40	@ 0x28
 8001d7c:	f001 fab5 	bl	80032ea <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010c00 	.word	0x40010c00
 8001d90:	10210000 	.word	0x10210000
 8001d94:	40010800 	.word	0x40010800
 8001d98:	10110000 	.word	0x10110000

08001d9c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	ssd1306_char_f8x16(ch);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f8e7 	bl	8001f7c <ssd1306_char_f8x16>
//	oled_display_char(ch);

	return ch;
 8001dae:	687b      	ldr	r3, [r7, #4]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <Error_Handler+0x8>

08001dc4 <oled_send_command>:
uint8_t data[2] = { 0x40, 0 };
uint8_t cmd[2] = { 0x00, 0 };

char OLED_I2C_ADDRESS = 0x3c;
uint8_t current_x = 0, current_y = 0;
void oled_send_command(unsigned char command) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
	cmd[1] = command;
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <oled_send_command+0x30>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDRESS << 1, cmd, 2,
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <oled_send_command+0x34>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	4a03      	ldr	r2, [pc, #12]	@ (8001df4 <oled_send_command+0x30>)
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <oled_send_command+0x38>)
 8001de8:	f001 fe7a 	bl	8003ae0 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20001fe4 	.word	0x20001fe4
 8001df8:	20000006 	.word	0x20000006
 8001dfc:	20000280 	.word	0x20000280

08001e00 <oled_send_data>:

void oled_send_data(unsigned char dt) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
	data[1] = dt;
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <oled_send_data+0x30>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_I2C_ADDRESS << 1, data, 2,
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <oled_send_data+0x34>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	b299      	uxth	r1, r3
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	4a03      	ldr	r2, [pc, #12]	@ (8001e30 <oled_send_data+0x30>)
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <oled_send_data+0x38>)
 8001e24:	f001 fe5c 	bl	8003ae0 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20000006 	.word	0x20000006
 8001e38:	20000280 	.word	0x20000280

08001e3c <oled_init>:

void oled_init() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	oled_send_command(0xAE); // T?t màn hình (Display OFF)
 8001e40:	20ae      	movs	r0, #174	@ 0xae
 8001e42:	f7ff ffbf 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xD5); // Cài ??t Clock divide ratio
 8001e46:	20d5      	movs	r0, #213	@ 0xd5
 8001e48:	f7ff ffbc 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x80); // Giá tr? m?c ??nh
 8001e4c:	2080      	movs	r0, #128	@ 0x80
 8001e4e:	f7ff ffb9 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xA8); // Cài ??t MUX ratio
 8001e52:	20a8      	movs	r0, #168	@ 0xa8
 8001e54:	f7ff ffb6 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x3F); // 1/64 duty
 8001e58:	203f      	movs	r0, #63	@ 0x3f
 8001e5a:	f7ff ffb3 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xD3); // Cài ??t Display Offset
 8001e5e:	20d3      	movs	r0, #211	@ 0xd3
 8001e60:	f7ff ffb0 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x00); // Không d?ch chuy?n
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff ffad 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x40); // Set Display Start Line thành 0
 8001e6a:	2040      	movs	r0, #64	@ 0x40
 8001e6c:	f7ff ffaa 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x8D); // B?t ngu?n c?p ?i?n áp DC
 8001e70:	208d      	movs	r0, #141	@ 0x8d
 8001e72:	f7ff ffa7 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x14); // B?t ?i?n áp
 8001e76:	2014      	movs	r0, #20
 8001e78:	f7ff ffa4 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xA1); // ??o chi?u quét ngang (Segment Re-map)
 8001e7c:	20a1      	movs	r0, #161	@ 0xa1
 8001e7e:	f7ff ffa1 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xC8); // ??o chi?u quét d?c (COM Output Scan Direction)
 8001e82:	20c8      	movs	r0, #200	@ 0xc8
 8001e84:	f7ff ff9e 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xDA); // Cài ??t COM pins hardware configuration
 8001e88:	20da      	movs	r0, #218	@ 0xda
 8001e8a:	f7ff ff9b 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x12);
 8001e8e:	2012      	movs	r0, #18
 8001e90:	f7ff ff98 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x81); // Cài ??t ?? t??ng ph?n
 8001e94:	2081      	movs	r0, #129	@ 0x81
 8001e96:	f7ff ff95 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xff);
 8001e9a:	20ff      	movs	r0, #255	@ 0xff
 8001e9c:	f7ff ff92 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xD9); // Cài ??t Pre-charge Period
 8001ea0:	20d9      	movs	r0, #217	@ 0xd9
 8001ea2:	f7ff ff8f 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xF1);
 8001ea6:	20f1      	movs	r0, #241	@ 0xf1
 8001ea8:	f7ff ff8c 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xDB); // Cài ??t VCOMH Deselect Level
 8001eac:	20db      	movs	r0, #219	@ 0xdb
 8001eae:	f7ff ff89 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x40);
 8001eb2:	2040      	movs	r0, #64	@ 0x40
 8001eb4:	f7ff ff86 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xA4); // Hi?n th? toàn b? RAM
 8001eb8:	20a4      	movs	r0, #164	@ 0xa4
 8001eba:	f7ff ff83 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xA6); // Ch? ?? hi?n th? bình th??ng
 8001ebe:	20a6      	movs	r0, #166	@ 0xa6
 8001ec0:	f7ff ff80 	bl	8001dc4 <oled_send_command>
	oled_send_command(0xAF); // B?t màn hình (Display ON)
 8001ec4:	20af      	movs	r0, #175	@ 0xaf
 8001ec6:	f7ff ff7d 	bl	8001dc4 <oled_send_command>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <oled_display_pattern>:

void oled_display_pattern() {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
	for (unsigned char page = 0; page < 8; page++) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	e01b      	b.n	8001f12 <oled_display_pattern+0x44>
		oled_send_command(0xB0 + page); // Ch?n trang
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	3b50      	subs	r3, #80	@ 0x50
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff6f 	bl	8001dc4 <oled_send_command>
		oled_send_command(0x00); // C?t th?p
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ff6c 	bl	8001dc4 <oled_send_command>
		oled_send_command(0x10); // C?t cao
 8001eec:	2010      	movs	r0, #16
 8001eee:	f7ff ff69 	bl	8001dc4 <oled_send_command>

		for (unsigned char col = 0; col < 128; col++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71bb      	strb	r3, [r7, #6]
 8001ef6:	e005      	b.n	8001f04 <oled_display_pattern+0x36>
			oled_send_data(0); // Tô ??y d? li?u (?en toàn màn hình)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ff81 	bl	8001e00 <oled_send_data>
		for (unsigned char col = 0; col < 128; col++) {
 8001efe:	79bb      	ldrb	r3, [r7, #6]
 8001f00:	3301      	adds	r3, #1
 8001f02:	71bb      	strb	r3, [r7, #6]
 8001f04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	daf5      	bge.n	8001ef8 <oled_display_pattern+0x2a>
	for (unsigned char page = 0; page < 8; page++) {
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b07      	cmp	r3, #7
 8001f16:	d9e0      	bls.n	8001eda <oled_display_pattern+0xc>
		}
	}
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <oled_set_cursor>:

	// Thêm kho?ng tr?ng gi?a các ký t?
	oled_send_data(0x00);
}

void oled_set_cursor(unsigned char x, unsigned char y) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	71fb      	strb	r3, [r7, #7]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71bb      	strb	r3, [r7, #6]
	current_x = x;
 8001f34:	4a0f      	ldr	r2, [pc, #60]	@ (8001f74 <oled_set_cursor+0x50>)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	7013      	strb	r3, [r2, #0]
	current_y = y;
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f78 <oled_set_cursor+0x54>)
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	7013      	strb	r3, [r2, #0]
	oled_send_command(0xB0 + y);         // ??t dòng (y) cho màn hình OLED
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	3b50      	subs	r3, #80	@ 0x50
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff3c 	bl	8001dc4 <oled_send_command>
	oled_send_command((x & 0x0F));       // ??t c?t th?p 4 bit (x)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff35 	bl	8001dc4 <oled_send_command>
	oled_send_command(0x10 + (x >> 4));  // ??t c?t cao 4 bit (x)
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3310      	adds	r3, #16
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff2d 	bl	8001dc4 <oled_send_command>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20001fe6 	.word	0x20001fe6
 8001f78:	20001fe7 	.word	0x20001fe7

08001f7c <ssd1306_char_f8x16>:

void ssd1306_char_f8x16(unsigned char ch) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
	if (ch < 32 || ch > 127) {
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b1f      	cmp	r3, #31
 8001f8a:	d903      	bls.n	8001f94 <ssd1306_char_f8x16+0x18>
 8001f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	da01      	bge.n	8001f98 <ssd1306_char_f8x16+0x1c>
		ch = 32;
 8001f94:	2320      	movs	r3, #32
 8001f96:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t c, i;
	c = ch - 32;
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3b20      	subs	r3, #32
 8001f9c:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < 8; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e011      	b.n	8001fc8 <ssd1306_char_f8x16+0x4c>
		oled_send_data(font8x16[(16 * c) + i]);
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	011a      	lsls	r2, r3, #4
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a2a      	ldr	r2, [pc, #168]	@ (8002058 <ssd1306_char_f8x16+0xdc>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff25 	bl	8001e00 <oled_send_data>
		current_x++;
 8001fb6:	4b29      	ldr	r3, [pc, #164]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4b27      	ldr	r3, [pc, #156]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8001fc0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b07      	cmp	r3, #7
 8001fcc:	d9ea      	bls.n	8001fa4 <ssd1306_char_f8x16+0x28>
	}

	current_x = current_x - 8;
 8001fce:	4b23      	ldr	r3, [pc, #140]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8001fd8:	701a      	strb	r2, [r3, #0]
	current_y++;
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 8001fe4:	701a      	strb	r2, [r3, #0]
	oled_set_cursor(current_x, current_y);
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4a1d      	ldr	r2, [pc, #116]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff97 	bl	8001f24 <oled_set_cursor>

	for (i = 0; i < 8; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e012      	b.n	8002022 <ssd1306_char_f8x16+0xa6>
		oled_send_data(font8x16[(16 * c) + i + 8]);
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	011a      	lsls	r2, r3, #4
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	4413      	add	r3, r2
 8002004:	3308      	adds	r3, #8
 8002006:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <ssd1306_char_f8x16+0xdc>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fef8 	bl	8001e00 <oled_send_data>
		current_x++;
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 800201a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	3301      	adds	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b07      	cmp	r3, #7
 8002026:	d9e9      	bls.n	8001ffc <ssd1306_char_f8x16+0x80>
	}
	current_x++;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8002032:	701a      	strb	r2, [r3, #0]
	current_y--;
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 800203e:	701a      	strb	r2, [r3, #0]
	oled_set_cursor(current_x, current_y);
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <ssd1306_char_f8x16+0xe0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <ssd1306_char_f8x16+0xe4>)
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff6a 	bl	8001f24 <oled_set_cursor>
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	08008dec 	.word	0x08008dec
 800205c:	20001fe6 	.word	0x20001fe6
 8002060:	20001fe7 	.word	0x20001fe7

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_MspInit+0x5c>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_MspInit+0x5c>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_MspInit+0x5c>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_MspInit+0x5c>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <HAL_MspInit+0x5c>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_MspInit+0x5c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_MspInit+0x60>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_MspInit+0x60>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000

080020c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a28      	ldr	r2, [pc, #160]	@ (8002184 <HAL_ADC_MspInit+0xbc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d149      	bne.n	800217c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a26      	ldr	r2, [pc, #152]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b24      	ldr	r3, [pc, #144]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a20      	ldr	r2, [pc, #128]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <HAL_ADC_MspInit+0xc0>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002118:	230f      	movs	r3, #15
 800211a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211c:	2303      	movs	r3, #3
 800211e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4619      	mov	r1, r3
 8002126:	4819      	ldr	r0, [pc, #100]	@ (800218c <HAL_ADC_MspInit+0xc4>)
 8002128:	f001 f9e2 	bl	80034f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 800212e:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <HAL_ADC_MspInit+0xcc>)
 8002130:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002138:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800214c:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 800214e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002152:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002156:	2220      	movs	r2, #32
 8002158:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 800215c:	2200      	movs	r2, #0
 800215e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002160:	480b      	ldr	r0, [pc, #44]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002162:	f001 f8dd 	bl	8003320 <HAL_DMA_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800216c:	f7ff fe24 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002174:	621a      	str	r2, [r3, #32]
 8002176:	4a06      	ldr	r2, [pc, #24]	@ (8002190 <HAL_ADC_MspInit+0xc8>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012400 	.word	0x40012400
 8002188:	40021000 	.word	0x40021000
 800218c:	40010800 	.word	0x40010800
 8002190:	2000023c 	.word	0x2000023c
 8002194:	40020008 	.word	0x40020008

08002198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <HAL_I2C_MspInit+0x70>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d123      	bne.n	8002200 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021d0:	23c0      	movs	r3, #192	@ 0xc0
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d4:	2312      	movs	r3, #18
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	4619      	mov	r1, r3
 80021e2:	480b      	ldr	r0, [pc, #44]	@ (8002210 <HAL_I2C_MspInit+0x78>)
 80021e4:	f001 f984 	bl	80034f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b05      	ldr	r3, [pc, #20]	@ (800220c <HAL_I2C_MspInit+0x74>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40005400 	.word	0x40005400
 800220c:	40021000 	.word	0x40021000
 8002210:	40010c00 	.word	0x40010c00

08002214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1b      	ldr	r2, [pc, #108]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12f      	bne.n	8002294 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 800223a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b17      	ldr	r3, [pc, #92]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002264:	23a0      	movs	r3, #160	@ 0xa0
 8002266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	@ (80022a4 <HAL_SPI_MspInit+0x90>)
 8002278:	f001 f93a 	bl	80034f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227c:	2340      	movs	r3, #64	@ 0x40
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <HAL_SPI_MspInit+0x90>)
 8002290:	f001 f92e 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013000 	.word	0x40013000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010800 	.word	0x40010800

080022a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_TIM_Base_MspInit+0x34>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10b      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <HAL_TIM_Base_MspInit+0x38>)
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	4a08      	ldr	r2, [pc, #32]	@ (80022e0 <HAL_TIM_Base_MspInit+0x38>)
 80022c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022c4:	6193      	str	r3, [r2, #24]
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_TIM_Base_MspInit+0x38>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40012c00 	.word	0x40012c00
 80022e0:	40021000 	.word	0x40021000

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <NMI_Handler+0x4>

080022ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <MemManage_Handler+0x4>

080022fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <UsageFault_Handler+0x4>

0800230c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002334:	f000 fa2c 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002340:	2004      	movs	r0, #4
 8002342:	f001 fa71 	bl	8003828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800234e:	2010      	movs	r0, #16
 8002350:	f001 fa6a 	bl	8003828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800235c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002360:	f001 fa62 	bl	8003828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <readRegister>:
#include "sx1278.h"

uint8_t data_spi_tx[2]={};
uint8_t data_spi_rx[2]={};

uint8_t readRegister(uint8_t addr) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	CS = 0;
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <readRegister+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
	data_spi_tx[0]= addr & 0x7F;
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237e:	b2da      	uxtb	r2, r3
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <readRegister+0x50>)
 8002382:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, data_spi_tx, 1, HAL_MAX_DELAY);
 8002384:	f04f 33ff 	mov.w	r3, #4294967295
 8002388:	2201      	movs	r2, #1
 800238a:	490b      	ldr	r1, [pc, #44]	@ (80023b8 <readRegister+0x50>)
 800238c:	480b      	ldr	r0, [pc, #44]	@ (80023bc <readRegister+0x54>)
 800238e:	f002 fcff 	bl	8004d90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data_spi_rx, 1, HAL_MAX_DELAY);
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	2201      	movs	r2, #1
 8002398:	4909      	ldr	r1, [pc, #36]	@ (80023c0 <readRegister+0x58>)
 800239a:	4808      	ldr	r0, [pc, #32]	@ (80023bc <readRegister+0x54>)
 800239c:	f002 fe3c 	bl	8005018 <HAL_SPI_Receive>
	CS = 1;
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <readRegister+0x4c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
	return data_spi_rx[0];
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <readRegister+0x58>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	42218180 	.word	0x42218180
 80023b8:	20001fe8 	.word	0x20001fe8
 80023bc:	200002d4 	.word	0x200002d4
 80023c0:	20001fec 	.word	0x20001fec

080023c4 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t data) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	460a      	mov	r2, r1
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71bb      	strb	r3, [r7, #6]
	CS = 0;
 80023d4:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <writeRegister+0x54>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
	data_spi_tx[0]= addr | 0x80;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <writeRegister+0x58>)
 80023e4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, data_spi_tx, 1, HAL_MAX_DELAY);
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	2201      	movs	r2, #1
 80023ec:	490b      	ldr	r1, [pc, #44]	@ (800241c <writeRegister+0x58>)
 80023ee:	480c      	ldr	r0, [pc, #48]	@ (8002420 <writeRegister+0x5c>)
 80023f0:	f002 fcce 	bl	8004d90 <HAL_SPI_Transmit>
	data_spi_tx[0]= data;
 80023f4:	4a09      	ldr	r2, [pc, #36]	@ (800241c <writeRegister+0x58>)
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, data_spi_tx, 1, HAL_MAX_DELAY);
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	2201      	movs	r2, #1
 8002400:	4906      	ldr	r1, [pc, #24]	@ (800241c <writeRegister+0x58>)
 8002402:	4807      	ldr	r0, [pc, #28]	@ (8002420 <writeRegister+0x5c>)
 8002404:	f002 fcc4 	bl	8004d90 <HAL_SPI_Transmit>
	CS = 1;
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <writeRegister+0x54>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	42218180 	.word	0x42218180
 800241c:	20001fe8 	.word	0x20001fe8
 8002420:	200002d4 	.word	0x200002d4

08002424 <standby_mode>:

void standby_mode() {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8002428:	2181      	movs	r1, #129	@ 0x81
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff ffca 	bl	80023c4 <writeRegister>
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <sleep_mode>:

void sleep_mode() {
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff ffc2 	bl	80023c4 <writeRegister>
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <tx_mode>:

void tx_mode() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8002448:	2183      	movs	r1, #131	@ 0x83
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff ffba 	bl	80023c4 <writeRegister>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <rx_mode>:

void rx_mode() {
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8002458:	2185      	movs	r1, #133	@ 0x85
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff ffb2 	bl	80023c4 <writeRegister>
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <setFrequency>:

void setFrequency(unsigned long frequency) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	writeRegister(REG_FRF_MSB, (uint8_t) (frequency >> 16));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	2006      	movs	r0, #6
 8002476:	f7ff ffa5 	bl	80023c4 <writeRegister>
	writeRegister(REG_FRF_MID, (uint8_t) (frequency >> 8));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	2007      	movs	r0, #7
 8002484:	f7ff ff9e 	bl	80023c4 <writeRegister>
	writeRegister(REG_FRF_LSB, (uint8_t) (frequency >> 0));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	2008      	movs	r0, #8
 8002490:	f7ff ff98 	bl	80023c4 <writeRegister>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <sx1278_init>:

void sx1278_init(unsigned long frequency) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	RST_LORA = 0;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <sx1278_init+0x88>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80024aa:	2001      	movs	r0, #1
 80024ac:	f000 f98c 	bl	80027c8 <HAL_Delay>
	RST_LORA = 1;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <sx1278_init+0x88>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f000 f986 	bl	80027c8 <HAL_Delay>
	standby_mode();
 80024bc:	f7ff ffb2 	bl	8002424 <standby_mode>
	HAL_Delay(1);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f000 f981 	bl	80027c8 <HAL_Delay>
	sleep_mode();
 80024c6:	f7ff ffb5 	bl	8002434 <sleep_mode>

	setFrequency(frequency);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffca 	bl	8002464 <setFrequency>

	writeRegister(0x1d, 0x72); //BW = 125khz, CR = 4/5
 80024d0:	2172      	movs	r1, #114	@ 0x72
 80024d2:	201d      	movs	r0, #29
 80024d4:	f7ff ff76 	bl	80023c4 <writeRegister>
	writeRegister(0x1e, 0x70); //SF = 7
 80024d8:	2170      	movs	r1, #112	@ 0x70
 80024da:	201e      	movs	r0, #30
 80024dc:	f7ff ff72 	bl	80023c4 <writeRegister>

	writeRegister(0x0e, 0);
 80024e0:	2100      	movs	r1, #0
 80024e2:	200e      	movs	r0, #14
 80024e4:	f7ff ff6e 	bl	80023c4 <writeRegister>
	writeRegister(0x0f, 0);
 80024e8:	2100      	movs	r1, #0
 80024ea:	200f      	movs	r0, #15
 80024ec:	f7ff ff6a 	bl	80023c4 <writeRegister>
	writeRegister(0x0c, 0x23);
 80024f0:	2123      	movs	r1, #35	@ 0x23
 80024f2:	200c      	movs	r0, #12
 80024f4:	f7ff ff66 	bl	80023c4 <writeRegister>
	writeRegister(0x26, 0x04);
 80024f8:	2104      	movs	r1, #4
 80024fa:	2026      	movs	r0, #38	@ 0x26
 80024fc:	f7ff ff62 	bl	80023c4 <writeRegister>
	writeRegister(0x4d, 0x84);
 8002500:	2184      	movs	r1, #132	@ 0x84
 8002502:	204d      	movs	r0, #77	@ 0x4d
 8002504:	f7ff ff5e 	bl	80023c4 <writeRegister>
	writeRegister(0x0b, 0x2b);
 8002508:	212b      	movs	r1, #43	@ 0x2b
 800250a:	200b      	movs	r0, #11
 800250c:	f7ff ff5a 	bl	80023c4 <writeRegister>
	writeRegister(0x09, 0x8f);
 8002510:	218f      	movs	r1, #143	@ 0x8f
 8002512:	2009      	movs	r0, #9
 8002514:	f7ff ff56 	bl	80023c4 <writeRegister>
	standby_mode();
 8002518:	f7ff ff84 	bl	8002424 <standby_mode>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	42218184 	.word	0x42218184

08002528 <_getpid>:
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
 800252c:	2301      	movs	r3, #1
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <_kill>:
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
 8002540:	f004 fa9c 	bl	8006a7c <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	2216      	movs	r2, #22
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_exit>:
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	f04f 31ff 	mov.w	r1, #4294967295
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffe7 	bl	8002536 <_kill>
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <_exit+0x12>

0800256c <_read>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e00a      	b.n	8002594 <_read+0x28>
 800257e:	f3af 8000 	nop.w
 8002582:	4601      	mov	r1, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	b2ca      	uxtb	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf0      	blt.n	800257e <_read+0x12>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_write>:
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e009      	b.n	80025cc <_write+0x26>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fbeb 	bl	8001d9c <__io_putchar>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf1      	blt.n	80025b8 <_write+0x12>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_close>:
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <_fstat>:
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	2300      	movs	r3, #0
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <_isatty>:
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <_lseek>:
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	2300      	movs	r3, #0
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4a14      	ldr	r2, [pc, #80]	@ (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
 8002670:	f004 fa04 	bl	8006a7c <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20005000 	.word	0x20005000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	20001ff0 	.word	0x20001ff0
 80026a8:	20002148 	.word	0x20002148

080026ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <Reset_Handler>:
 80026b8:	f7ff fff8 	bl	80026ac <SystemInit>
 80026bc:	480b      	ldr	r0, [pc, #44]	@ (80026ec <LoopFillZerobss+0xe>)
 80026be:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <LoopFillZerobss+0x12>)
 80026c0:	4a0c      	ldr	r2, [pc, #48]	@ (80026f4 <LoopFillZerobss+0x16>)
 80026c2:	2300      	movs	r3, #0
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:
 80026c6:	58d4      	ldr	r4, [r2, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:
 80026cc:	18c4      	adds	r4, r0, r3
 80026ce:	428c      	cmp	r4, r1
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <LoopFillZerobss+0x1a>)
 80026d4:	4c09      	ldr	r4, [pc, #36]	@ (80026fc <LoopFillZerobss+0x1e>)
 80026d6:	2300      	movs	r3, #0
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:
 80026de:	42a2      	cmp	r2, r4
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>
 80026e2:	f004 f9d1 	bl	8006a88 <__libc_init_array>
 80026e6:	f7fe fd4b 	bl	8001180 <main>
 80026ea:	4770      	bx	lr
 80026ec:	20000000 	.word	0x20000000
 80026f0:	200001f0 	.word	0x200001f0
 80026f4:	08009798 	.word	0x08009798
 80026f8:	200001f0 	.word	0x200001f0
 80026fc:	20002144 	.word	0x20002144

08002700 <ADC1_2_IRQHandler>:
 8002700:	e7fe      	b.n	8002700 <ADC1_2_IRQHandler>
	...

08002704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_Init+0x28>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_Init+0x28>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002714:	2003      	movs	r0, #3
 8002716:	f000 fdc1 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271a:	200f      	movs	r0, #15
 800271c:	f000 f808 	bl	8002730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002720:	f7ff fca0 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_InitTick+0x54>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_InitTick+0x58>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fdd9 	bl	8003306 <HAL_SYSTICK_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e00e      	b.n	800277c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b0f      	cmp	r3, #15
 8002762:	d80a      	bhi.n	800277a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002764:	2200      	movs	r2, #0
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f000 fda1 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002770:	4a06      	ldr	r2, [pc, #24]	@ (800278c <HAL_InitTick+0x5c>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000008 	.word	0x20000008
 8002788:	20000010 	.word	0x20000010
 800278c:	2000000c 	.word	0x2000000c

08002790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b05      	ldr	r3, [pc, #20]	@ (80027ac <HAL_IncTick+0x1c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x20>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a03      	ldr	r2, [pc, #12]	@ (80027b0 <HAL_IncTick+0x20>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000010 	.word	0x20000010
 80027b0:	20001ff4 	.word	0x20001ff4

080027b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b02      	ldr	r3, [pc, #8]	@ (80027c4 <HAL_GetTick+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	20001ff4 	.word	0x20001ff4

080027c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_GetTick>
 80027d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d005      	beq.n	80027ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_Delay+0x44>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ee:	bf00      	nop
 80027f0:	f7ff ffe0 	bl	80027b4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d8f7      	bhi.n	80027f0 <HAL_Delay+0x28>
  {
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000010 	.word	0x20000010

08002810 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0be      	b.n	80029b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fc3a 	bl	80020c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 faff 	bl	8002e58 <ADC_ConversionStop_Disable>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8099 	bne.w	800299e <HAL_ADC_Init+0x18e>
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8095 	bne.w	800299e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800287c:	f023 0302 	bic.w	r3, r3, #2
 8002880:	f043 0202 	orr.w	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002890:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7b1b      	ldrb	r3, [r3, #12]
 8002896:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002898:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	4313      	orrs	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a8:	d003      	beq.n	80028b2 <HAL_ADC_Init+0xa2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_ADC_Init+0xa8>
 80028b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b6:	e000      	b.n	80028ba <HAL_ADC_Init+0xaa>
 80028b8:	2300      	movs	r3, #0
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7d1b      	ldrb	r3, [r3, #20]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7b1b      	ldrb	r3, [r3, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	035a      	lsls	r2, r3, #13
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e00b      	b.n	80028fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <HAL_ADC_Init+0x1a8>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	430b      	orrs	r3, r1
 8002922:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800292c:	d003      	beq.n	8002936 <HAL_ADC_Init+0x126>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d104      	bne.n	8002940 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	3b01      	subs	r3, #1
 800293c:	051b      	lsls	r3, r3, #20
 800293e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	430a      	orrs	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_ADC_Init+0x1ac>)
 800295c:	4013      	ands	r3, r2
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	429a      	cmp	r2, r3
 8002962:	d10b      	bne.n	800297c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	f023 0303 	bic.w	r3, r3, #3
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800297a:	e018      	b.n	80029ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f023 0312 	bic.w	r3, r3, #18
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	f043 0201 	orr.w	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800299c:	e007      	b.n	80029ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	ffe1f7fd 	.word	0xffe1f7fd
 80029bc:	ff1f0efe 	.word	0xff1f0efe

080029c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a64      	ldr	r2, [pc, #400]	@ (8002b68 <HAL_ADC_Start_DMA+0x1a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_ADC_Start_DMA+0x24>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a63      	ldr	r2, [pc, #396]	@ (8002b6c <HAL_ADC_Start_DMA+0x1ac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d106      	bne.n	80029f2 <HAL_ADC_Start_DMA+0x32>
 80029e4:	4b60      	ldr	r3, [pc, #384]	@ (8002b68 <HAL_ADC_Start_DMA+0x1a8>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f040 80b3 	bne.w	8002b58 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_Start_DMA+0x40>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0ae      	b.n	8002b5e <HAL_ADC_Start_DMA+0x19e>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f9cb 	bl	8002da4 <ADC_Enable>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f040 809a 	bne.w	8002b4e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4e      	ldr	r2, [pc, #312]	@ (8002b6c <HAL_ADC_Start_DMA+0x1ac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d105      	bne.n	8002a44 <HAL_ADC_Start_DMA+0x84>
 8002a38:	4b4b      	ldr	r3, [pc, #300]	@ (8002b68 <HAL_ADC_Start_DMA+0x1a8>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d115      	bne.n	8002a70 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d026      	beq.n	8002aac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a6e:	e01d      	b.n	8002aac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a39      	ldr	r2, [pc, #228]	@ (8002b68 <HAL_ADC_Start_DMA+0x1a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Start_DMA+0xd0>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a38      	ldr	r2, [pc, #224]	@ (8002b6c <HAL_ADC_Start_DMA+0x1ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10d      	bne.n	8002aac <HAL_ADC_Start_DMA+0xec>
 8002a90:	4b35      	ldr	r3, [pc, #212]	@ (8002b68 <HAL_ADC_Start_DMA+0x1a8>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aa4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f023 0206 	bic.w	r2, r3, #6
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	@ (8002b70 <HAL_ADC_Start_DMA+0x1b0>)
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_ADC_Start_DMA+0x1b4>)
 8002ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	@ (8002b78 <HAL_ADC_Start_DMA+0x1b8>)
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0202 	mvn.w	r2, #2
 8002af4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b04:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a18      	ldr	r0, [r3, #32]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	334c      	adds	r3, #76	@ 0x4c
 8002b10:	4619      	mov	r1, r3
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f000 fc5d 	bl	80033d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b24:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b28:	d108      	bne.n	8002b3c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002b38:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b3a:	e00f      	b.n	8002b5c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002b4a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b4c:	e006      	b.n	8002b5c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002b56:	e001      	b.n	8002b5c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40012400 	.word	0x40012400
 8002b6c:	40012800 	.word	0x40012800
 8002b70:	08002edb 	.word	0x08002edb
 8002b74:	08002f57 	.word	0x08002f57
 8002b78:	08002f73 	.word	0x08002f73

08002b7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x20>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0dc      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x1da>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d81c      	bhi.n	8002c1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b05      	subs	r3, #5
 8002bf6:	221f      	movs	r2, #31
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	4019      	ands	r1, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b05      	subs	r3, #5
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c1c:	e03c      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d81c      	bhi.n	8002c60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b23      	subs	r3, #35	@ 0x23
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4019      	ands	r1, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b23      	subs	r3, #35	@ 0x23
 8002c52:	fa00 f203 	lsl.w	r2, r0, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c5e:	e01b      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	3b41      	subs	r3, #65	@ 0x41
 8002c72:	221f      	movs	r2, #31
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4019      	ands	r1, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b41      	subs	r3, #65	@ 0x41
 8002c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d91c      	bls.n	8002cda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	3b1e      	subs	r3, #30
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	4019      	ands	r1, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6898      	ldr	r0, [r3, #8]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b1e      	subs	r3, #30
 8002ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	e019      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6919      	ldr	r1, [r3, #16]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	2207      	movs	r2, #7
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4019      	ands	r1, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6898      	ldr	r0, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d003      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d1a:	2b11      	cmp	r3, #17
 8002d1c:	d132      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d126      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002d44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d11a      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d4e:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <HAL_ADC_ConfigChannel+0x1e8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0c9a      	lsrs	r2, r3, #18
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d64:	e002      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f9      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x1b2>
 8002d72:	e007      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012400 	.word	0x40012400
 8002d9c:	20000008 	.word	0x20000008
 8002da0:	431bde83 	.word	0x431bde83

08002da4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d040      	beq.n	8002e44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e50 <ADC_Enable+0xac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <ADC_Enable+0xb0>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002de0:	e002      	b.n	8002de8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dee:	f7ff fce1 	bl	80027b4 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002df4:	e01f      	b.n	8002e36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002df6:	f7ff fcdd 	bl	80027b4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d918      	bls.n	8002e36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d011      	beq.n	8002e36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d1d8      	bne.n	8002df6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000008 	.word	0x20000008
 8002e54:	431bde83 	.word	0x431bde83

08002e58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12e      	bne.n	8002ed0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e82:	f7ff fc97 	bl	80027b4 <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e88:	e01b      	b.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e8a:	f7ff fc93 	bl	80027b4 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d914      	bls.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d0dc      	beq.n	8002e8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d127      	bne.n	8002f44 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f0e:	d115      	bne.n	8002f3c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff fe1d 	bl	8002b7c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f42:	e004      	b.n	8002f4e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff fe12 	bl	8002b8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff fe01 	bl	8002ba0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADCEx_Calibration_Start+0x1e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e097      	b.n	80030f6 <HAL_ADCEx_Calibration_Start+0x14e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff42 	bl	8002e58 <ADC_ConversionStop_Disable>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fee3 	bl	8002da4 <ADC_Enable>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 8081 	bne.w	80030ec <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff2:	f023 0302 	bic.w	r3, r3, #2
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ffe:	4b40      	ldr	r3, [pc, #256]	@ (8003100 <HAL_ADCEx_Calibration_Start+0x158>)
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	2002      	movs	r0, #2
 8003004:	f001 fd8a 	bl	8004b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8003008:	4603      	mov	r3, r0
 800300a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800300e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003010:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003012:	e002      	b.n	800301a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b01      	subs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f9      	bne.n	8003014 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0208 	orr.w	r2, r2, #8
 800302e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003030:	f7ff fbc0 	bl	80027b4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003036:	e01b      	b.n	8003070 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003038:	f7ff fbbc 	bl	80027b4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b0a      	cmp	r3, #10
 8003044:	d914      	bls.n	8003070 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	f023 0312 	bic.w	r3, r3, #18
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e042      	b.n	80030f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1dc      	bne.n	8003038 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0204 	orr.w	r2, r2, #4
 800308c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800308e:	f7ff fb91 	bl	80027b4 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003094:	e01b      	b.n	80030ce <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003096:	f7ff fb8d 	bl	80027b4 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b0a      	cmp	r3, #10
 80030a2:	d914      	bls.n	80030ce <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	f023 0312 	bic.w	r3, r3, #18
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e013      	b.n	80030f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1dc      	bne.n	8003096 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000008 	.word	0x20000008

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4906      	ldr	r1, [pc, #24]	@ (800319c <__NVIC_EnableIRQ+0x34>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	@ (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	@ (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff90 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff2d 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff42 	bl	800314c <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff90 	bl	80031f4 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5f 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff ff35 	bl	8003168 <__NVIC_EnableIRQ>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffa2 	bl	8003258 <SysTick_Config>
 8003314:	4603      	mov	r3, r0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e043      	b.n	80033be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4b22      	ldr	r3, [pc, #136]	@ (80033c8 <HAL_DMA_Init+0xa8>)
 800333e:	4413      	add	r3, r2
 8003340:	4a22      	ldr	r2, [pc, #136]	@ (80033cc <HAL_DMA_Init+0xac>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a1f      	ldr	r2, [pc, #124]	@ (80033d0 <HAL_DMA_Init+0xb0>)
 8003352:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800336a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800336e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	bffdfff8 	.word	0xbffdfff8
 80033cc:	cccccccd 	.word	0xcccccccd
 80033d0:	40020000 	.word	0x40020000

080033d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_DMA_Start_IT+0x20>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e04b      	b.n	800348c <HAL_DMA_Start_IT+0xb8>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d13a      	bne.n	800347e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f831 	bl	8003494 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 020e 	orr.w	r2, r2, #14
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00f      	b.n	800346c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0204 	bic.w	r2, r2, #4
 800345a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 020a 	orr.w	r2, r2, #10
 800346a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e005      	b.n	800348a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800348a:	7dfb      	ldrb	r3, [r7, #23]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d108      	bne.n	80034d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d2:	e007      	b.n	80034e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b08b      	sub	sp, #44	@ 0x2c
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003502:	e169      	b.n	80037d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003504:	2201      	movs	r2, #1
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	429a      	cmp	r2, r3
 800351e:	f040 8158 	bne.w	80037d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a9a      	ldr	r2, [pc, #616]	@ (8003790 <HAL_GPIO_Init+0x2a0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d05e      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
 800352c:	4a98      	ldr	r2, [pc, #608]	@ (8003790 <HAL_GPIO_Init+0x2a0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d875      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 8003532:	4a98      	ldr	r2, [pc, #608]	@ (8003794 <HAL_GPIO_Init+0x2a4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d058      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
 8003538:	4a96      	ldr	r2, [pc, #600]	@ (8003794 <HAL_GPIO_Init+0x2a4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d86f      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 800353e:	4a96      	ldr	r2, [pc, #600]	@ (8003798 <HAL_GPIO_Init+0x2a8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d052      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
 8003544:	4a94      	ldr	r2, [pc, #592]	@ (8003798 <HAL_GPIO_Init+0x2a8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d869      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 800354a:	4a94      	ldr	r2, [pc, #592]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04c      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
 8003550:	4a92      	ldr	r2, [pc, #584]	@ (800379c <HAL_GPIO_Init+0x2ac>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d863      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 8003556:	4a92      	ldr	r2, [pc, #584]	@ (80037a0 <HAL_GPIO_Init+0x2b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d046      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
 800355c:	4a90      	ldr	r2, [pc, #576]	@ (80037a0 <HAL_GPIO_Init+0x2b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d85d      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 8003562:	2b12      	cmp	r3, #18
 8003564:	d82a      	bhi.n	80035bc <HAL_GPIO_Init+0xcc>
 8003566:	2b12      	cmp	r3, #18
 8003568:	d859      	bhi.n	800361e <HAL_GPIO_Init+0x12e>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <HAL_GPIO_Init+0x80>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	080035eb 	.word	0x080035eb
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080035d7 	.word	0x080035d7
 800357c:	08003619 	.word	0x08003619
 8003580:	0800361f 	.word	0x0800361f
 8003584:	0800361f 	.word	0x0800361f
 8003588:	0800361f 	.word	0x0800361f
 800358c:	0800361f 	.word	0x0800361f
 8003590:	0800361f 	.word	0x0800361f
 8003594:	0800361f 	.word	0x0800361f
 8003598:	0800361f 	.word	0x0800361f
 800359c:	0800361f 	.word	0x0800361f
 80035a0:	0800361f 	.word	0x0800361f
 80035a4:	0800361f 	.word	0x0800361f
 80035a8:	0800361f 	.word	0x0800361f
 80035ac:	0800361f 	.word	0x0800361f
 80035b0:	0800361f 	.word	0x0800361f
 80035b4:	080035cd 	.word	0x080035cd
 80035b8:	080035e1 	.word	0x080035e1
 80035bc:	4a79      	ldr	r2, [pc, #484]	@ (80037a4 <HAL_GPIO_Init+0x2b4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035c2:	e02c      	b.n	800361e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	623b      	str	r3, [r7, #32]
          break;
 80035ca:	e029      	b.n	8003620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	3304      	adds	r3, #4
 80035d2:	623b      	str	r3, [r7, #32]
          break;
 80035d4:	e024      	b.n	8003620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	3308      	adds	r3, #8
 80035dc:	623b      	str	r3, [r7, #32]
          break;
 80035de:	e01f      	b.n	8003620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	330c      	adds	r3, #12
 80035e6:	623b      	str	r3, [r7, #32]
          break;
 80035e8:	e01a      	b.n	8003620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d102      	bne.n	80035f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035f2:	2304      	movs	r3, #4
 80035f4:	623b      	str	r3, [r7, #32]
          break;
 80035f6:	e013      	b.n	8003620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003600:	2308      	movs	r3, #8
 8003602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	611a      	str	r2, [r3, #16]
          break;
 800360a:	e009      	b.n	8003620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800360c:	2308      	movs	r3, #8
 800360e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	615a      	str	r2, [r3, #20]
          break;
 8003616:	e003      	b.n	8003620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003618:	2300      	movs	r3, #0
 800361a:	623b      	str	r3, [r7, #32]
          break;
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x130>
          break;
 800361e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2bff      	cmp	r3, #255	@ 0xff
 8003624:	d801      	bhi.n	800362a <HAL_GPIO_Init+0x13a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	e001      	b.n	800362e <HAL_GPIO_Init+0x13e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2bff      	cmp	r3, #255	@ 0xff
 8003634:	d802      	bhi.n	800363c <HAL_GPIO_Init+0x14c>
 8003636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x152>
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	3b08      	subs	r3, #8
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	210f      	movs	r1, #15
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	6a39      	ldr	r1, [r7, #32]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80b1 	beq.w	80037d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003670:	4b4d      	ldr	r3, [pc, #308]	@ (80037a8 <HAL_GPIO_Init+0x2b8>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	4a4c      	ldr	r2, [pc, #304]	@ (80037a8 <HAL_GPIO_Init+0x2b8>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6193      	str	r3, [r2, #24]
 800367c:	4b4a      	ldr	r3, [pc, #296]	@ (80037a8 <HAL_GPIO_Init+0x2b8>)
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003688:	4a48      	ldr	r2, [pc, #288]	@ (80037ac <HAL_GPIO_Init+0x2bc>)
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3302      	adds	r3, #2
 8003690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <HAL_GPIO_Init+0x2c0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x1ec>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3f      	ldr	r2, [pc, #252]	@ (80037b4 <HAL_GPIO_Init+0x2c4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x1e8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a3e      	ldr	r2, [pc, #248]	@ (80037b8 <HAL_GPIO_Init+0x2c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x1e4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3d      	ldr	r2, [pc, #244]	@ (80037bc <HAL_GPIO_Init+0x2cc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x1e0>
 80036cc:	2303      	movs	r3, #3
 80036ce:	e006      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d0:	2304      	movs	r3, #4
 80036d2:	e004      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e002      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036dc:	2300      	movs	r3, #0
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036ee:	492f      	ldr	r1, [pc, #188]	@ (80037ac <HAL_GPIO_Init+0x2bc>)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d006      	beq.n	8003716 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003708:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	492c      	ldr	r1, [pc, #176]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4313      	orrs	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
 8003714:	e006      	b.n	8003724 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003716:	4b2a      	ldr	r3, [pc, #168]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	43db      	mvns	r3, r3
 800371e:	4928      	ldr	r1, [pc, #160]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003720:	4013      	ands	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003730:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4922      	ldr	r1, [pc, #136]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
 800373c:	e006      	b.n	800374c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800373e:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	43db      	mvns	r3, r3
 8003746:	491e      	ldr	r1, [pc, #120]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003748:	4013      	ands	r3, r2
 800374a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d006      	beq.n	8003766 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003758:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4918      	ldr	r1, [pc, #96]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003766:	4b16      	ldr	r3, [pc, #88]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	43db      	mvns	r3, r3
 800376e:	4914      	ldr	r1, [pc, #80]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003770:	4013      	ands	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d021      	beq.n	80037c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003780:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	490e      	ldr	r1, [pc, #56]	@ (80037c0 <HAL_GPIO_Init+0x2d0>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	e021      	b.n	80037d2 <HAL_GPIO_Init+0x2e2>
 800378e:	bf00      	nop
 8003790:	10320000 	.word	0x10320000
 8003794:	10310000 	.word	0x10310000
 8003798:	10220000 	.word	0x10220000
 800379c:	10210000 	.word	0x10210000
 80037a0:	10120000 	.word	0x10120000
 80037a4:	10110000 	.word	0x10110000
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40010800 	.word	0x40010800
 80037b4:	40010c00 	.word	0x40010c00
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40011400 	.word	0x40011400
 80037c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_GPIO_Init+0x304>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	4909      	ldr	r1, [pc, #36]	@ (80037f4 <HAL_GPIO_Init+0x304>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	3301      	adds	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f47f ae8e 	bne.w	8003504 <HAL_GPIO_Init+0x14>
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	372c      	adds	r7, #44	@ 0x2c
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
 8003804:	4613      	mov	r3, r2
 8003806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003808:	787b      	ldrb	r3, [r7, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003814:	e003      	b.n	800381e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	041a      	lsls	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003832:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800383e:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fc00 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_I2C_Init>:
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_I2C_Init+0x12>
 8003866:	2301      	movs	r3, #1
 8003868:	e12b      	b.n	8003ac2 <HAL_I2C_Init+0x26a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_I2C_Init+0x2c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fe fc8a 	bl	8002198 <HAL_I2C_MspInit>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2224      	movs	r2, #36	@ 0x24
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f001 f832 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a81      	ldr	r2, [pc, #516]	@ (8003acc <HAL_I2C_Init+0x274>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d807      	bhi.n	80038dc <HAL_I2C_Init+0x84>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a80      	ldr	r2, [pc, #512]	@ (8003ad0 <HAL_I2C_Init+0x278>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e006      	b.n	80038ea <HAL_I2C_Init+0x92>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad4 <HAL_I2C_Init+0x27c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf94      	ite	ls
 80038e4:	2301      	movls	r3, #1
 80038e6:	2300      	movhi	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Init+0x9a>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0e7      	b.n	8003ac2 <HAL_I2C_Init+0x26a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a78      	ldr	r2, [pc, #480]	@ (8003ad8 <HAL_I2C_Init+0x280>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a6a      	ldr	r2, [pc, #424]	@ (8003acc <HAL_I2C_Init+0x274>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d802      	bhi.n	800392c <HAL_I2C_Init+0xd4>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3301      	adds	r3, #1
 800392a:	e009      	b.n	8003940 <HAL_I2C_Init+0xe8>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	4a69      	ldr	r2, [pc, #420]	@ (8003adc <HAL_I2C_Init+0x284>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	3301      	adds	r3, #1
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	495c      	ldr	r1, [pc, #368]	@ (8003acc <HAL_I2C_Init+0x274>)
 800395c:	428b      	cmp	r3, r1
 800395e:	d819      	bhi.n	8003994 <HAL_I2C_Init+0x13c>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e59      	subs	r1, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fbb1 f3f3 	udiv	r3, r1, r3
 800396e:	1c59      	adds	r1, r3, #1
 8003970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003974:	400b      	ands	r3, r1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_I2C_Init+0x138>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e59      	subs	r1, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fbb1 f3f3 	udiv	r3, r1, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398e:	e051      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003990:	2304      	movs	r3, #4
 8003992:	e04f      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <HAL_I2C_Init+0x168>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e012      	b.n	80039e6 <HAL_I2C_Init+0x18e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Init+0x196>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e022      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10e      	bne.n	8003a14 <HAL_I2C_Init+0x1bc>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1e58      	subs	r0, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a12:	e00f      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6809      	ldr	r1, [r1, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61cb      	str	r3, [r1, #28]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6911      	ldr	r1, [r2, #16]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6093      	str	r3, [r2, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	000186a0 	.word	0x000186a0
 8003ad0:	001e847f 	.word	0x001e847f
 8003ad4:	003d08ff 	.word	0x003d08ff
 8003ad8:	431bde83 	.word	0x431bde83
 8003adc:	10624dd3 	.word	0x10624dd3

08003ae0 <HAL_I2C_Master_Transmit>:
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	461a      	mov	r2, r3
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
 8003af0:	4613      	mov	r3, r2
 8003af2:	813b      	strh	r3, [r7, #8]
 8003af4:	f7fe fe5e 	bl	80027b4 <HAL_GetTick>
 8003af8:	6178      	str	r0, [r7, #20]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	f040 80e0 	bne.w	8003cc8 <HAL_I2C_Master_Transmit+0x1e8>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2319      	movs	r3, #25
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4970      	ldr	r1, [pc, #448]	@ (8003cd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f964 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Master_Transmit+0x42>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0d3      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_I2C_Master_Transmit+0x50>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0cc      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d007      	beq.n	8003b56 <HAL_I2C_Master_Transmit+0x76>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2210      	movs	r2, #16
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	893a      	ldrh	r2, [r7, #8]
 8003b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a50      	ldr	r2, [pc, #320]	@ (8003cd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b98:	8979      	ldrh	r1, [r7, #10]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a3a      	ldr	r2, [r7, #32]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f89c 	bl	8003cdc <I2C_MasterRequestWrite>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Transmit+0xce>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e08d      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	e066      	b.n	8003c94 <HAL_I2C_Master_Transmit+0x1b4>
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa22 	bl	8004014 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <HAL_I2C_Master_Transmit+0x112>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <HAL_I2C_Master_Transmit+0x10e>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_I2C_Master_Transmit+0x188>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d017      	beq.n	8003c68 <HAL_I2C_Master_Transmit+0x188>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6a39      	ldr	r1, [r7, #32]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fa19 	bl	80040a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <HAL_I2C_Master_Transmit+0x1b4>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <HAL_I2C_Master_Transmit+0x1b0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	2301      	movs	r3, #1
 8003c92:	e01a      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d194      	bne.n	8003bc6 <HAL_I2C_Master_Transmit+0xe6>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2C_Master_Transmit+0x1ea>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <I2C_MasterRequestWrite>:
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	817b      	strh	r3, [r7, #10]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d006      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d003      	beq.n	8003d06 <I2C_MasterRequestWrite+0x2a>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d04:	d108      	bne.n	8003d18 <I2C_MasterRequestWrite+0x3c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e00b      	b.n	8003d30 <I2C_MasterRequestWrite+0x54>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	2b12      	cmp	r3, #18
 8003d1e:	d107      	bne.n	8003d30 <I2C_MasterRequestWrite+0x54>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f84f 	bl	8003de0 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_MasterRequestWrite+0x88>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d103      	bne.n	8003d60 <I2C_MasterRequestWrite+0x84>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d60:	2303      	movs	r3, #3
 8003d62:	e035      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d6c:	d108      	bne.n	8003d80 <I2C_MasterRequestWrite+0xa4>
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]
 8003d7e:	e01b      	b.n	8003db8 <I2C_MasterRequestWrite+0xdc>
 8003d80:	897b      	ldrh	r3, [r7, #10]
 8003d82:	11db      	asrs	r3, r3, #7
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f003 0306 	and.w	r3, r3, #6
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f063 030f 	orn	r3, r3, #15
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	490e      	ldr	r1, [pc, #56]	@ (8003dd8 <I2C_MasterRequestWrite+0xfc>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f898 	bl	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_MasterRequestWrite+0xd2>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e010      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4907      	ldr	r1, [pc, #28]	@ (8003ddc <I2C_MasterRequestWrite+0x100>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f888 	bl	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_MasterRequestWrite+0xf2>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_MasterRequestWrite+0xf4>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010008 	.word	0x00010008
 8003ddc:	00010002 	.word	0x00010002

08003de0 <I2C_WaitOnFlagUntilTimeout>:
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	71fb      	strb	r3, [r7, #7]
 8003df0:	e048      	b.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d044      	beq.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003dfa:	f7fe fcdb 	bl	80027b4 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d139      	bne.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10d      	bne.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	43da      	mvns	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	e00c      	b.n	8003e50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	43da      	mvns	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d116      	bne.n	8003e84 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003e80:	2301      	movs	r3, #1
 8003e82:	e023      	b.n	8003ecc <I2C_WaitOnFlagUntilTimeout+0xec>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10d      	bne.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	e00c      	b.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d093      	beq.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	e071      	b.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d123      	bne.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f0c:	615a      	str	r2, [r3, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e067      	b.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d041      	beq.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003f44:	f7fe fc36 	bl	80027b4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d136      	bne.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10c      	bne.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bf14      	ite	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	2300      	moveq	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e00b      	b.n	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e021      	b.n	800400c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10c      	bne.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	e00b      	b.n	8004004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf14      	ite	ne
 8003ffe:	2301      	movne	r3, #1
 8004000:	2300      	moveq	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f af6d 	bne.w	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800400a:	2300      	movs	r3, #0
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnTXEFlagUntilTimeout>:
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	e034      	b.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f886 	bl	8004134 <I2C_IsAcknowledgeFailed>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800402e:	2301      	movs	r3, #1
 8004030:	e034      	b.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d028      	beq.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800403a:	f7fe fbbb 	bl	80027b4 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11d      	bne.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d016      	beq.n	800408c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004088:	2301      	movs	r3, #1
 800408a:	e007      	b.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b80      	cmp	r3, #128	@ 0x80
 8004098:	d1c3      	bne.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 800409a:	2300      	movs	r3, #0
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnBTFFlagUntilTimeout>:
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	e034      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f83e 	bl	8004134 <I2C_IsAcknowledgeFailed>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80040be:	2301      	movs	r3, #1
 80040c0:	e034      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d028      	beq.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80040ca:	f7fe fb73 	bl	80027b4 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d302      	bcc.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11d      	bne.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d016      	beq.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004118:	2301      	movs	r3, #1
 800411a:	e007      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b04      	cmp	r3, #4
 8004128:	d1c3      	bne.n	80040b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800412a:	2300      	movs	r3, #0
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2C_IsAcknowledgeFailed>:
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800414a:	d11b      	bne.n	8004184 <I2C_IsAcknowledgeFailed+0x50>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004154:	615a      	str	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <I2C_IsAcknowledgeFailed+0x52>
 8004184:	2300      	movs	r3, #0
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_RCC_OscConfig>:
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x12>
 800419e:	2301      	movs	r3, #1
 80041a0:	e272      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8087 	beq.w	80042be <HAL_RCC_OscConfig+0x12e>
 80041b0:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x46>
 80041bc:	4b8f      	ldr	r3, [pc, #572]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d112      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
 80041c8:	4b8c      	ldr	r3, [pc, #560]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d10b      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e>
 80041d6:	4b89      	ldr	r3, [pc, #548]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d06c      	beq.n	80042bc <HAL_RCC_OscConfig+0x12c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d168      	bne.n	80042bc <HAL_RCC_OscConfig+0x12c>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e24c      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f6:	d106      	bne.n	8004206 <HAL_RCC_OscConfig+0x76>
 80041f8:	4b80      	ldr	r3, [pc, #512]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a7f      	ldr	r2, [pc, #508]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	e02e      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0x98>
 800420e:	4b7b      	ldr	r3, [pc, #492]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a7a      	ldr	r2, [pc, #488]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b78      	ldr	r3, [pc, #480]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a77      	ldr	r2, [pc, #476]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e01d      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004230:	d10c      	bne.n	800424c <HAL_RCC_OscConfig+0xbc>
 8004232:	4b72      	ldr	r3, [pc, #456]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a71      	ldr	r2, [pc, #452]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6e      	ldr	r2, [pc, #440]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e00b      	b.n	8004264 <HAL_RCC_OscConfig+0xd4>
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a6a      	ldr	r2, [pc, #424]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a67      	ldr	r2, [pc, #412]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_RCC_OscConfig+0x104>
 800426c:	f7fe faa2 	bl	80027b4 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0xf6>
 8004274:	f7fe fa9e 	bl	80027b4 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b64      	cmp	r3, #100	@ 0x64
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0xf6>
 8004282:	2303      	movs	r3, #3
 8004284:	e200      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004286:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f0      	beq.n	8004274 <HAL_RCC_OscConfig+0xe4>
 8004292:	e014      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
 8004294:	f7fe fa8e 	bl	80027b4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x11e>
 800429c:	f7fe fa8a 	bl	80027b4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x11e>
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1ec      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80042ae:	4b53      	ldr	r3, [pc, #332]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x10c>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x12e>
 80042bc:	bf00      	nop
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d063      	beq.n	8004392 <HAL_RCC_OscConfig+0x202>
 80042ca:	4b4c      	ldr	r3, [pc, #304]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCC_OscConfig+0x15e>
 80042d6:	4b49      	ldr	r3, [pc, #292]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d11c      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
 80042e2:	4b46      	ldr	r3, [pc, #280]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d116      	bne.n	800431c <HAL_RCC_OscConfig+0x18c>
 80042ee:	4b43      	ldr	r3, [pc, #268]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d001      	beq.n	8004306 <HAL_RCC_OscConfig+0x176>
 8004302:	2301      	movs	r3, #1
 8004304:	e1c0      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004306:	4b3d      	ldr	r3, [pc, #244]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4939      	ldr	r1, [pc, #228]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]
 800431a:	e03a      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_OscConfig+0x1d6>
 8004324:	4b36      	ldr	r3, [pc, #216]	@ (8004400 <HAL_RCC_OscConfig+0x270>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	f7fe fa43 	bl	80027b4 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x1b4>
 8004332:	f7fe fa3f 	bl	80027b4 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x1b4>
 8004340:	2303      	movs	r3, #3
 8004342:	e1a1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004344:	4b2d      	ldr	r3, [pc, #180]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x1a2>
 8004350:	4b2a      	ldr	r3, [pc, #168]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4927      	ldr	r1, [pc, #156]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]
 8004364:	e015      	b.n	8004392 <HAL_RCC_OscConfig+0x202>
 8004366:	4b26      	ldr	r3, [pc, #152]	@ (8004400 <HAL_RCC_OscConfig+0x270>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	f7fe fa22 	bl	80027b4 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1f6>
 8004374:	f7fe fa1e 	bl	80027b4 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1f6>
 8004382:	2303      	movs	r3, #3
 8004384:	e180      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x1e4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d03a      	beq.n	8004414 <HAL_RCC_OscConfig+0x284>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d019      	beq.n	80043da <HAL_RCC_OscConfig+0x24a>
 80043a6:	4b17      	ldr	r3, [pc, #92]	@ (8004404 <HAL_RCC_OscConfig+0x274>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f7fe fa02 	bl	80027b4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x236>
 80043b4:	f7fe f9fe 	bl	80027b4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x236>
 80043c2:	2303      	movs	r3, #3
 80043c4:	e160      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_RCC_OscConfig+0x26c>)
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x224>
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 face 	bl	8004974 <RCC_Delay>
 80043d8:	e01c      	b.n	8004414 <HAL_RCC_OscConfig+0x284>
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_RCC_OscConfig+0x274>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f7fe f9e8 	bl	80027b4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]
 80043e6:	e00f      	b.n	8004408 <HAL_RCC_OscConfig+0x278>
 80043e8:	f7fe f9e4 	bl	80027b4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d908      	bls.n	8004408 <HAL_RCC_OscConfig+0x278>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e146      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	42420000 	.word	0x42420000
 8004404:	42420480 	.word	0x42420480
 8004408:	4b92      	ldr	r3, [pc, #584]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e9      	bne.n	80043e8 <HAL_RCC_OscConfig+0x258>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a6 	beq.w	800456e <HAL_RCC_OscConfig+0x3de>
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]
 8004426:	4b8b      	ldr	r3, [pc, #556]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <HAL_RCC_OscConfig+0x2be>
 8004432:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4a87      	ldr	r2, [pc, #540]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443c:	61d3      	str	r3, [r2, #28]
 800443e:	4b85      	ldr	r3, [pc, #532]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
 800444e:	4b82      	ldr	r3, [pc, #520]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d118      	bne.n	800448c <HAL_RCC_OscConfig+0x2fc>
 800445a:	4b7f      	ldr	r3, [pc, #508]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	f7fe f9a5 	bl	80027b4 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x2f0>
 800446e:	f7fe f9a1 	bl	80027b4 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b64      	cmp	r3, #100	@ 0x64
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x2f0>
 800447c:	2303      	movs	r3, #3
 800447e:	e103      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004480:	4b75      	ldr	r3, [pc, #468]	@ (8004658 <HAL_RCC_OscConfig+0x4c8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f0      	beq.n	800446e <HAL_RCC_OscConfig+0x2de>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x312>
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a6e      	ldr	r2, [pc, #440]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	e02d      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x334>
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a69      	ldr	r2, [pc, #420]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6213      	str	r3, [r2, #32]
 80044b6:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a66      	ldr	r2, [pc, #408]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	e01c      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d10c      	bne.n	80044e6 <HAL_RCC_OscConfig+0x356>
 80044cc:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4a60      	ldr	r2, [pc, #384]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6213      	str	r3, [r2, #32]
 80044d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	e00b      	b.n	80044fe <HAL_RCC_OscConfig+0x36e>
 80044e6:	4b5b      	ldr	r3, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6213      	str	r3, [r2, #32]
 80044f2:	4b58      	ldr	r3, [pc, #352]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a57      	ldr	r2, [pc, #348]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <HAL_RCC_OscConfig+0x3a2>
 8004506:	f7fe f955 	bl	80027b4 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x394>
 800450e:	f7fe f951 	bl	80027b4 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x394>
 8004520:	2303      	movs	r3, #3
 8004522:	e0b1      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004524:	4b4b      	ldr	r3, [pc, #300]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0ee      	beq.n	800450e <HAL_RCC_OscConfig+0x37e>
 8004530:	e014      	b.n	800455c <HAL_RCC_OscConfig+0x3cc>
 8004532:	f7fe f93f 	bl	80027b4 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x3c0>
 800453a:	f7fe f93b 	bl	80027b4 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x3c0>
 800454c:	2303      	movs	r3, #3
 800454e:	e09b      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004550:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ee      	bne.n	800453a <HAL_RCC_OscConfig+0x3aa>
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCC_OscConfig+0x3de>
 8004562:	4b3c      	ldr	r3, [pc, #240]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4a3b      	ldr	r2, [pc, #236]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456c:	61d3      	str	r3, [r2, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8087 	beq.w	8004686 <HAL_RCC_OscConfig+0x4f6>
 8004578:	4b36      	ldr	r3, [pc, #216]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d061      	beq.n	8004648 <HAL_RCC_OscConfig+0x4b8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d146      	bne.n	800461a <HAL_RCC_OscConfig+0x48a>
 800458c:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	f7fe f90f 	bl	80027b4 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x41c>
 800459a:	f7fe f90b 	bl	80027b4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x41c>
 80045a8:	2303      	movs	r3, #3
 80045aa:	e06d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 80045ac:	4b29      	ldr	r3, [pc, #164]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x40a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_OscConfig+0x444>
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4921      	ldr	r1, [pc, #132]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a19      	ldr	r1, [r3, #32]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	430b      	orrs	r3, r1
 80045e6:	491b      	ldr	r1, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f7fe f8df 	bl	80027b4 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x47c>
 80045fa:	f7fe f8db 	bl	80027b4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x47c>
 8004608:	2303      	movs	r3, #3
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x46a>
 8004618:	e035      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RCC_OscConfig+0x4cc>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f7fe f8c8 	bl	80027b4 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x4aa>
 8004628:	f7fe f8c4 	bl	80027b4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x4aa>
 8004636:	2303      	movs	r3, #3
 8004638:	e026      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x498>
 8004646:	e01e      	b.n	8004686 <HAL_RCC_OscConfig+0x4f6>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4d0>
 8004650:	2301      	movs	r3, #1
 8004652:	e019      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004654:	40021000 	.word	0x40021000
 8004658:	40007000 	.word	0x40007000
 800465c:	42420060 	.word	0x42420060
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_OscConfig+0x500>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	429a      	cmp	r2, r3
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x4f2>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x4f6>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x4f8>
 8004686:	2300      	movs	r3, #0
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000

08004694 <HAL_RCC_ClockConfig>:
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x14>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0d0      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 80046a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d910      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x44>
 80046b6:	4b67      	ldr	r3, [pc, #412]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 0207 	bic.w	r2, r3, #7
 80046be:	4965      	ldr	r1, [pc, #404]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
 80046c6:	4b63      	ldr	r3, [pc, #396]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x44>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0b8      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_ClockConfig+0x92>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x68>
 80046f0:	4b59      	ldr	r3, [pc, #356]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a58      	ldr	r2, [pc, #352]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046fa:	6053      	str	r3, [r2, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x80>
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a52      	ldr	r2, [pc, #328]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004712:	6053      	str	r3, [r2, #4]
 8004714:	4b50      	ldr	r3, [pc, #320]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	494d      	ldr	r1, [pc, #308]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d040      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x120>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xb6>
 800473a:	4b47      	ldr	r3, [pc, #284]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d115      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
 8004746:	2301      	movs	r3, #1
 8004748:	e07f      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xce>
 8004752:	4b41      	ldr	r3, [pc, #260]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
 800475e:	2301      	movs	r3, #1
 8004760:	e073      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 8004762:	4b3d      	ldr	r3, [pc, #244]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCC_ClockConfig+0xde>
 800476e:	2301      	movs	r3, #1
 8004770:	e06b      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 8004772:	4b39      	ldr	r3, [pc, #228]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f023 0203 	bic.w	r2, r3, #3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4936      	ldr	r1, [pc, #216]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	f7fe f816 	bl	80027b4 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
 800478c:	f7fe f812 	bl	80027b4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x10e>
 800479e:	2303      	movs	r3, #3
 80047a0:	e053      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 80047a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 020c 	and.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1eb      	bne.n	800478c <HAL_RCC_ClockConfig+0xf8>
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d210      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x150>
 80047c2:	4b24      	ldr	r3, [pc, #144]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4922      	ldr	r1, [pc, #136]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x150>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e032      	b.n	800484a <HAL_RCC_ClockConfig+0x1b6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x16e>
 80047f0:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4916      	ldr	r1, [pc, #88]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCC_ClockConfig+0x18e>
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	490e      	ldr	r1, [pc, #56]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	f000 f821 	bl	8004868 <HAL_RCC_GetSysClockFreq>
 8004826:	4602      	mov	r2, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	490a      	ldr	r1, [pc, #40]	@ (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	5ccb      	ldrb	r3, [r1, r3]
 8004836:	fa22 f303 	lsr.w	r3, r2, r3
 800483a:	4a09      	ldr	r2, [pc, #36]	@ (8004860 <HAL_RCC_ClockConfig+0x1cc>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_ClockConfig+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd ff74 	bl	8002730 <HAL_InitTick>
 8004848:	2300      	movs	r3, #0
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40022000 	.word	0x40022000
 8004858:	40021000 	.word	0x40021000
 800485c:	080093dc 	.word	0x080093dc
 8004860:	20000008 	.word	0x20000008
 8004864:	2000000c 	.word	0x2000000c

08004868 <HAL_RCC_GetSysClockFreq>:
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	2300      	movs	r3, #0
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	4b1e      	ldr	r3, [pc, #120]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x30>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x36>
 8004896:	e027      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x80>
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e027      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0c9b      	lsrs	r3, r3, #18
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d010      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x70>
 80048b6:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x94>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0c5b      	lsrs	r3, r3, #17
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	4a11      	ldr	r2, [pc, #68]	@ (8004908 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048c2:	5cd3      	ldrb	r3, [r2, r3]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ca:	fb03 f202 	mul.w	r2, r3, r2
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	@ (800490c <HAL_RCC_GetSysClockFreq+0xa4>)
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	e002      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x86>
 80048e8:	4b05      	ldr	r3, [pc, #20]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	bf00      	nop
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	007a1200 	.word	0x007a1200
 8004904:	080093f4 	.word	0x080093f4
 8004908:	08009404 	.word	0x08009404
 800490c:	003d0900 	.word	0x003d0900

08004910 <HAL_RCC_GetHCLKFreq>:
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
 8004914:	4b02      	ldr	r3, [pc, #8]	@ (8004920 <HAL_RCC_GetHCLKFreq+0x10>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	20000008 	.word	0x20000008

08004924 <HAL_RCC_GetPCLK1Freq>:
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
 8004928:	f7ff fff2 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	@ (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	080093ec 	.word	0x080093ec

0800494c <HAL_RCC_GetPCLK2Freq>:
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
 8004950:	f7ff ffde 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0adb      	lsrs	r3, r3, #11
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	@ (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	080093ec 	.word	0x080093ec

08004974 <RCC_Delay>:
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	4b0a      	ldr	r3, [pc, #40]	@ (80049a8 <RCC_Delay+0x34>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	@ (80049ac <RCC_Delay+0x38>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a5b      	lsrs	r3, r3, #9
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	bf00      	nop
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e5a      	subs	r2, r3, #1
 8004996:	60fa      	str	r2, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f9      	bne.n	8004990 <RCC_Delay+0x1c>
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr
 80049a8:	20000008 	.word	0x20000008
 80049ac:	10624dd3 	.word	0x10624dd3

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d07d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
 80049d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10d      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80049dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	61d3      	str	r3, [r2, #28]
 80049e8:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
 80049f8:	4b46      	ldr	r3, [pc, #280]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d118      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004a04:	4b43      	ldr	r3, [pc, #268]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a42      	ldr	r2, [pc, #264]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	f7fd fed0 	bl	80027b4 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]
 8004a16:	e008      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a18:	f7fd fecc 	bl	80027b4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a26:	2303      	movs	r3, #3
 8004a28:	e06d      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004a36:	4b36      	ldr	r3, [pc, #216]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d02e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d027      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a54:	4b2e      	ldr	r3, [pc, #184]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6213      	str	r3, [r2, #32]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a7a:	f7fd fe9b 	bl	80027b4 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]
 8004a80:	e00a      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a82:	f7fd fe97 	bl	80027b4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a94:	2303      	movs	r3, #3
 8004a96:	e036      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0ee      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4917      	ldr	r1, [pc, #92]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	620b      	str	r3, [r1, #32]
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ac6:	61d3      	str	r3, [r2, #28]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	490b      	ldr	r1, [pc, #44]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4904      	ldr	r1, [pc, #16]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
 8004b04:	2300      	movs	r3, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42420440 	.word	0x42420440

08004b1c <HAL_RCCEx_GetPeriphCLKFreq>:
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d00a      	beq.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	f200 808a 	bhi.w	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d045      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d075      	beq.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004b52:	e082      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b54:	4b46      	ldr	r3, [pc, #280]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4b45      	ldr	r3, [pc, #276]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d07b      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0c9b      	lsrs	r3, r3, #18
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	4a41      	ldr	r2, [pc, #260]	@ (8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d015      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8004b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0c5b      	lsrs	r3, r3, #17
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	4a3b      	ldr	r2, [pc, #236]	@ (8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b8a:	5cd3      	ldrb	r3, [r2, r3]
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004b98:	4a38      	ldr	r2, [pc, #224]	@ (8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	e004      	b.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a34      	ldr	r2, [pc, #208]	@ (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bc0:	d102      	bne.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e04a      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e042      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004bd8:	4b25      	ldr	r3, [pc, #148]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be8:	d108      	bne.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e01f      	b.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004c08:	4b19      	ldr	r3, [pc, #100]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004c14:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e00f      	b.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c26:	d11c      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c34:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e012      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c3c:	e011      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c3e:	f7ff fe85 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0a      	ldr	r3, [pc, #40]	@ (8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	0b9b      	lsrs	r3, r3, #14
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	e004      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004c62:	bf00      	nop
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000
 8004c74:	08009408 	.word	0x08009408
 8004c78:	08009418 	.word	0x08009418
 8004c7c:	007a1200 	.word	0x007a1200
 8004c80:	003d0900 	.word	0x003d0900
 8004c84:	aaaaaaab 	.word	0xaaaaaaab

08004c88 <HAL_SPI_Init>:
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_SPI_Init+0x12>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e076      	b.n	8004d88 <HAL_SPI_Init+0x100>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <HAL_SPI_Init+0x2c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004caa:	d009      	beq.n	8004cc0 <HAL_SPI_Init+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
 8004cb2:	e005      	b.n	8004cc0 <HAL_SPI_Init+0x38>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	611a      	str	r2, [r3, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_SPI_Init+0x58>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd fa9a 	bl	8002214 <HAL_SPI_MspInit>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d44:	ea42 0103 	orr.w	r1, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	0c1a      	lsrs	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f002 0204 	and.w	r2, r2, #4
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d76:	61da      	str	r2, [r3, #28]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004d86:	2300      	movs	r3, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_SPI_Transmit>:
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	80fb      	strh	r3, [r7, #6]
 8004da0:	f7fd fd08 	bl	80027b4 <HAL_GetTick>
 8004da4:	61f8      	str	r0, [r7, #28]
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	837b      	strh	r3, [r7, #26]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_SPI_Transmit+0x2a>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e12a      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SPI_Transmit+0x36>
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_SPI_Transmit+0x3a>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e122      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_SPI_Transmit+0x48>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e11b      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2203      	movs	r2, #3
 8004de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	655a      	str	r2, [r3, #84]	@ 0x54
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	869a      	strh	r2, [r3, #52]	@ 0x34
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e26:	d10f      	bne.n	8004e48 <HAL_SPI_Transmit+0xb8>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e52:	2b40      	cmp	r3, #64	@ 0x40
 8004e54:	d007      	beq.n	8004e66 <HAL_SPI_Transmit+0xd6>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e6e:	d152      	bne.n	8004f16 <HAL_SPI_Transmit+0x186>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0xee>
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d145      	bne.n	8004f0a <HAL_SPI_Transmit+0x17a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ea2:	e032      	b.n	8004f0a <HAL_SPI_Transmit+0x17a>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d112      	bne.n	8004ed8 <HAL_SPI_Transmit+0x148>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	881a      	ldrh	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ed6:	e018      	b.n	8004f0a <HAL_SPI_Transmit+0x17a>
 8004ed8:	f7fd fc6c 	bl	80027b4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d803      	bhi.n	8004ef0 <HAL_SPI_Transmit+0x160>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Transmit+0x166>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_SPI_Transmit+0x17a>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004f06:	2303      	movs	r3, #3
 8004f08:	e082      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1c7      	bne.n	8004ea4 <HAL_SPI_Transmit+0x114>
 8004f14:	e053      	b.n	8004fbe <HAL_SPI_Transmit+0x22e>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_SPI_Transmit+0x194>
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d147      	bne.n	8004fb4 <HAL_SPI_Transmit+0x224>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	7812      	ldrb	r2, [r2, #0]
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f4a:	e033      	b.n	8004fb4 <HAL_SPI_Transmit+0x224>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d113      	bne.n	8004f82 <HAL_SPI_Transmit+0x1f2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f80:	e018      	b.n	8004fb4 <HAL_SPI_Transmit+0x224>
 8004f82:	f7fd fc17 	bl	80027b4 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d803      	bhi.n	8004f9a <HAL_SPI_Transmit+0x20a>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f98:	d102      	bne.n	8004fa0 <HAL_SPI_Transmit+0x210>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_SPI_Transmit+0x224>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e02d      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1c6      	bne.n	8004f4c <HAL_SPI_Transmit+0x1bc>
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fbc4 	bl	8005750 <SPI_EndRxTxTransaction>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_Transmit+0x244>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	655a      	str	r2, [r3, #84]	@ 0x54
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <HAL_SPI_Transmit+0x262>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_SPI_Transmit+0x27e>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <HAL_SPI_Transmit+0x280>
 800500e:	2300      	movs	r3, #0
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_SPI_Receive>:
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d001      	beq.n	8005038 <HAL_SPI_Receive+0x20>
 8005034:	2302      	movs	r3, #2
 8005036:	e104      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005040:	d112      	bne.n	8005068 <HAL_SPI_Receive+0x50>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10e      	bne.n	8005068 <HAL_SPI_Receive+0x50>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2204      	movs	r2, #4
 800504e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f8f3 	bl	800524a <HAL_SPI_TransmitReceive>
 8005064:	4603      	mov	r3, r0
 8005066:	e0ec      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 8005068:	f7fd fba4 	bl	80027b4 <HAL_GetTick>
 800506c:	6178      	str	r0, [r7, #20]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Receive+0x62>
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_SPI_Receive+0x66>
 800507a:	2301      	movs	r3, #1
 800507c:	e0e1      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_SPI_Receive+0x74>
 8005088:	2302      	movs	r3, #2
 800508a:	e0da      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2204      	movs	r2, #4
 8005098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	869a      	strh	r2, [r3, #52]	@ 0x34
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050da:	d10f      	bne.n	80050fc <HAL_SPI_Receive+0xe4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d007      	beq.n	800511a <HAL_SPI_Receive+0x102>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d170      	bne.n	8005204 <HAL_SPI_Receive+0x1ec>
 8005122:	e035      	b.n	8005190 <HAL_SPI_Receive+0x178>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b01      	cmp	r3, #1
 8005130:	d115      	bne.n	800515e <HAL_SPI_Receive+0x146>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f103 020c 	add.w	r2, r3, #12
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800515c:	e018      	b.n	8005190 <HAL_SPI_Receive+0x178>
 800515e:	f7fd fb29 	bl	80027b4 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d803      	bhi.n	8005176 <HAL_SPI_Receive+0x15e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d102      	bne.n	800517c <HAL_SPI_Receive+0x164>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_SPI_Receive+0x178>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800518c:	2303      	movs	r3, #3
 800518e:	e058      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1c4      	bne.n	8005124 <HAL_SPI_Receive+0x10c>
 800519a:	e038      	b.n	800520e <HAL_SPI_Receive+0x1f6>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d113      	bne.n	80051d2 <HAL_SPI_Receive+0x1ba>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b4:	b292      	uxth	r2, r2
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051d0:	e018      	b.n	8005204 <HAL_SPI_Receive+0x1ec>
 80051d2:	f7fd faef 	bl	80027b4 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d803      	bhi.n	80051ea <HAL_SPI_Receive+0x1d2>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d102      	bne.n	80051f0 <HAL_SPI_Receive+0x1d8>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <HAL_SPI_Receive+0x1ec>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005200:	2303      	movs	r3, #3
 8005202:	e01e      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1c6      	bne.n	800519c <HAL_SPI_Receive+0x184>
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa4a 	bl	80056ac <SPI_EndRxTransaction>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Receive+0x20c>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_SPI_Receive+0x228>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_SPI_Receive+0x22a>
 8005240:	2300      	movs	r3, #0
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_SPI_TransmitReceive>:
 800524a:	b580      	push	{r7, lr}
 800524c:	b08a      	sub	sp, #40	@ 0x28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	807b      	strh	r3, [r7, #2]
 8005258:	2301      	movs	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
 800525c:	f7fd faaa 	bl	80027b4 <HAL_GetTick>
 8005260:	6238      	str	r0, [r7, #32]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	887b      	ldrh	r3, [r7, #2]
 8005272:	82fb      	strh	r3, [r7, #22]
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d00c      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x4a>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005280:	d106      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x46>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x46>
 800528a:	7ffb      	ldrb	r3, [r7, #31]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d001      	beq.n	8005294 <HAL_SPI_TransmitReceive+0x4a>
 8005290:	2302      	movs	r3, #2
 8005292:	e17f      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x5c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0x5c>
 80052a0:	887b      	ldrh	r3, [r7, #2]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_SPI_TransmitReceive+0x60>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e174      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x6e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e16d      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d003      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x8a>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2205      	movs	r2, #5
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	887a      	ldrh	r2, [r7, #2]
 80052e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	887a      	ldrh	r2, [r7, #2]
 80052ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	887a      	ldrh	r2, [r7, #2]
 80052f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	869a      	strh	r2, [r3, #52]	@ 0x34
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005314:	2b40      	cmp	r3, #64	@ 0x40
 8005316:	d007      	beq.n	8005328 <HAL_SPI_TransmitReceive+0xde>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005330:	d17e      	bne.n	8005430 <HAL_SPI_TransmitReceive+0x1e6>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_TransmitReceive+0xf6>
 800533a:	8afb      	ldrh	r3, [r7, #22]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d16c      	bne.n	800541a <HAL_SPI_TransmitReceive+0x1d0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005364:	e059      	b.n	800541a <HAL_SPI_TransmitReceive+0x1d0>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11b      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x162>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x162>
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	2b01      	cmp	r3, #1
 8005382:	d113      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x162>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	631a      	str	r2, [r3, #48]	@ 0x30
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d119      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x1a4>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d014      	beq.n	80053ee <HAL_SPI_TransmitReceive+0x1a4>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ce:	b292      	uxth	r2, r2
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	1c9a      	adds	r2, r3, #2
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053ea:	2301      	movs	r3, #1
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ee:	f7fd f9e1 	bl	80027b4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d80d      	bhi.n	800541a <HAL_SPI_TransmitReceive+0x1d0>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d009      	beq.n	800541a <HAL_SPI_TransmitReceive+0x1d0>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005416:	2303      	movs	r3, #3
 8005418:	e0bc      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1a0      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x11c>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d19b      	bne.n	8005366 <HAL_SPI_TransmitReceive+0x11c>
 800542e:	e082      	b.n	8005536 <HAL_SPI_TransmitReceive+0x2ec>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_SPI_TransmitReceive+0x1f4>
 8005438:	8afb      	ldrh	r3, [r7, #22]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d171      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x2d8>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005464:	e05d      	b.n	8005522 <HAL_SPI_TransmitReceive+0x2d8>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	d11c      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x264>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d017      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x264>
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	2b01      	cmp	r3, #1
 8005482:	d114      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x264>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	7812      	ldrb	r2, [r2, #0]
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d119      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x2a6>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x2a6>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054ec:	2301      	movs	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f0:	f7fd f960 	bl	80027b4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d803      	bhi.n	8005508 <HAL_SPI_TransmitReceive+0x2be>
 8005500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d102      	bne.n	800550e <HAL_SPI_TransmitReceive+0x2c4>
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x2d8>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800551e:	2303      	movs	r3, #3
 8005520:	e038      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d19c      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x21c>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d197      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x21c>
 8005536:	6a3a      	ldr	r2, [r7, #32]
 8005538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f908 	bl	8005750 <SPI_EndRxTxTransaction>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x30e>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005554:	2301      	movs	r3, #1
 8005556:	e01d      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x32c>
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x348>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_SPI_TransmitReceive+0x34a>
 8005592:	2300      	movs	r3, #0
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	@ 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <SPI_WaitFlagStateUntilTimeout>:
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	4613      	mov	r3, r2
 80055aa:	71fb      	strb	r3, [r7, #7]
 80055ac:	f7fd f902 	bl	80027b4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	f7fd f8fa 	bl	80027b4 <HAL_GetTick>
 80055c0:	61b8      	str	r0, [r7, #24]
 80055c2:	4b39      	ldr	r3, [pc, #228]	@ (80056a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	015b      	lsls	r3, r3, #5
 80055c8:	0d1b      	lsrs	r3, r3, #20
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	fb02 f303 	mul.w	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e054      	b.n	800567e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d050      	beq.n	800567e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80055dc:	f7fd f8ea 	bl	80027b4 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d902      	bls.n	80055f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d13d      	bne.n	800566e <SPI_WaitFlagStateUntilTimeout+0xd2>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800560a:	d111      	bne.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005614:	d004      	beq.n	8005620 <SPI_WaitFlagStateUntilTimeout+0x84>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561e:	d107      	bne.n	8005630 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005638:	d10f      	bne.n	800565a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800566a:	2303      	movs	r3, #3
 800566c:	e017      	b.n	800569e <SPI_WaitFlagStateUntilTimeout+0x102>
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8005674:	2300      	movs	r3, #0
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3b01      	subs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	429a      	cmp	r2, r3
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	429a      	cmp	r2, r3
 800569a:	d19b      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x38>
 800569c:	2300      	movs	r3, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000008 	.word	0x20000008

080056ac <SPI_EndRxTransaction>:
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056c0:	d111      	bne.n	80056e6 <SPI_EndRxTransaction+0x3a>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ca:	d004      	beq.n	80056d6 <SPI_EndRxTransaction+0x2a>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d4:	d107      	bne.n	80056e6 <SPI_EndRxTransaction+0x3a>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ee:	d117      	bne.n	8005720 <SPI_EndRxTransaction+0x74>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f8:	d112      	bne.n	8005720 <SPI_EndRxTransaction+0x74>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	2101      	movs	r1, #1
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff ff49 	bl	800559c <SPI_WaitFlagStateUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01a      	beq.n	8005746 <SPI_EndRxTransaction+0x9a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005714:	f043 0220 	orr.w	r2, r3, #32
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
 800571c:	2303      	movs	r3, #3
 800571e:	e013      	b.n	8005748 <SPI_EndRxTransaction+0x9c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	@ 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff ff36 	bl	800559c <SPI_WaitFlagStateUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <SPI_EndRxTransaction+0x9a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54
 8005742:	2303      	movs	r3, #3
 8005744:	e000      	b.n	8005748 <SPI_EndRxTransaction+0x9c>
 8005746:	2300      	movs	r3, #0
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <SPI_EndRxTxTransaction>:
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2201      	movs	r2, #1
 8005764:	2102      	movs	r1, #2
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff18 	bl	800559c <SPI_WaitFlagStateUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <SPI_EndRxTxTransaction+0x32>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
 800577e:	2303      	movs	r3, #3
 8005780:	e013      	b.n	80057aa <SPI_EndRxTxTransaction+0x5a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2200      	movs	r2, #0
 800578a:	2180      	movs	r1, #128	@ 0x80
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ff05 	bl	800559c <SPI_WaitFlagStateUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x58>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80057a4:	2303      	movs	r3, #3
 80057a6:	e000      	b.n	80057aa <SPI_EndRxTxTransaction+0x5a>
 80057a8:	2300      	movs	r3, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_TIM_Base_Init>:
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_Base_Init+0x12>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e041      	b.n	8005848 <HAL_TIM_Base_Init+0x96>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_TIM_Base_Init+0x2c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fc fd65 	bl	80022a8 <HAL_TIM_Base_MspInit>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4619      	mov	r1, r3
 80057f0:	4610      	mov	r0, r2
 80057f2:	f000 f93f 	bl	8005a74 <TIM_Base_SetConfig>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005846:	2300      	movs	r3, #0
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_Base_Start>:
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Base_Start+0x18>
 8005864:	2301      	movs	r3, #1
 8005866:	e032      	b.n	80058ce <HAL_TIM_Base_Start+0x7e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a18      	ldr	r2, [pc, #96]	@ (80058d8 <HAL_TIM_Base_Start+0x88>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_Start+0x48>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005882:	d009      	beq.n	8005898 <HAL_TIM_Base_Start+0x48>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <HAL_TIM_Base_Start+0x8c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_Base_Start+0x48>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <HAL_TIM_Base_Start+0x90>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d111      	bne.n	80058bc <HAL_TIM_Base_Start+0x6c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d010      	beq.n	80058cc <HAL_TIM_Base_Start+0x7c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e007      	b.n	80058cc <HAL_TIM_Base_Start+0x7c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800

080058e4 <HAL_TIM_ConfigClockSource>:
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_TIM_ConfigClockSource+0x1c>
 80058fc:	2302      	movs	r3, #2
 80058fe:	e0b4      	b.n	8005a6a <HAL_TIM_ConfigClockSource+0x186>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005926:	60bb      	str	r3, [r7, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005938:	d03e      	beq.n	80059b8 <HAL_TIM_ConfigClockSource+0xd4>
 800593a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800593e:	f200 8087 	bhi.w	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005946:	f000 8086 	beq.w	8005a56 <HAL_TIM_ConfigClockSource+0x172>
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594e:	d87f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b70      	cmp	r3, #112	@ 0x70
 8005952:	d01a      	beq.n	800598a <HAL_TIM_ConfigClockSource+0xa6>
 8005954:	2b70      	cmp	r3, #112	@ 0x70
 8005956:	d87b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005958:	2b60      	cmp	r3, #96	@ 0x60
 800595a:	d050      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x11a>
 800595c:	2b60      	cmp	r3, #96	@ 0x60
 800595e:	d877      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005960:	2b50      	cmp	r3, #80	@ 0x50
 8005962:	d03c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0xfa>
 8005964:	2b50      	cmp	r3, #80	@ 0x50
 8005966:	d873      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b40      	cmp	r3, #64	@ 0x40
 800596a:	d058      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x13a>
 800596c:	2b40      	cmp	r3, #64	@ 0x40
 800596e:	d86f      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b30      	cmp	r3, #48	@ 0x30
 8005972:	d064      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	2b30      	cmp	r3, #48	@ 0x30
 8005976:	d86b      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d060      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d867      	bhi.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d05c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005984:	2b10      	cmp	r3, #16
 8005986:	d05a      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	e062      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x16c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f000 f950 	bl	8005c3e <TIM_ETR_SetConfig>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059ac:	60bb      	str	r3, [r7, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	e04f      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6899      	ldr	r1, [r3, #8]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f000 f939 	bl	8005c3e <TIM_ETR_SetConfig>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689a      	ldr	r2, [r3, #8]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	e03c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 f8b0 	bl	8005b50 <TIM_TI1_ConfigInputStage>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2150      	movs	r1, #80	@ 0x50
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f907 	bl	8005c0a <TIM_ITRx_SetConfig>
 80059fc:	e02c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 f8ce 	bl	8005bac <TIM_TI2_ConfigInputStage>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2160      	movs	r1, #96	@ 0x60
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f8f7 	bl	8005c0a <TIM_ITRx_SetConfig>
 8005a1c:	e01c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 f890 	bl	8005b50 <TIM_TI1_ConfigInputStage>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2140      	movs	r1, #64	@ 0x40
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f8e7 	bl	8005c0a <TIM_ITRx_SetConfig>
 8005a3c:	e00c      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 f8de 	bl	8005c0a <TIM_ITRx_SetConfig>
 8005a4e:	e003      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_ConfigClockSource+0x174>
 8005a56:	bf00      	nop
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <TIM_Base_SetConfig>:
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	@ (8005b44 <TIM_Base_SetConfig+0xd0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0x30>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0x30>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a2c      	ldr	r2, [pc, #176]	@ (8005b48 <TIM_Base_SetConfig+0xd4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0x30>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005b4c <TIM_Base_SetConfig+0xd8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <TIM_Base_SetConfig+0x42>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <TIM_Base_SetConfig+0xd0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0x62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0x62>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b48 <TIM_Base_SetConfig+0xd4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0x62>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <TIM_Base_SetConfig+0xd8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <TIM_Base_SetConfig+0x74>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005b44 <TIM_Base_SetConfig+0xd0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d103      	bne.n	8005b1c <TIM_Base_SetConfig+0xa8>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	615a      	str	r2, [r3, #20]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d005      	beq.n	8005b3a <TIM_Base_SetConfig+0xc6>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	611a      	str	r2, [r3, #16]
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40000400 	.word	0x40000400
 8005b4c:	40000800 	.word	0x40000800

08005b50 <TIM_TI1_ConfigInputStage>:
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	621a      	str	r2, [r3, #32]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f023 030a 	bic.w	r3, r3, #10
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	619a      	str	r2, [r3, #24]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	621a      	str	r2, [r3, #32]
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <TIM_TI2_ConfigInputStage>:
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0210 	bic.w	r2, r3, #16
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	031b      	lsls	r3, r3, #12
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	619a      	str	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <TIM_ITRx_SetConfig>:
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f043 0307 	orr.w	r3, r3, #7
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	609a      	str	r2, [r3, #8]
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <TIM_ETR_SetConfig>:
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	021a      	lsls	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_MasterConfigSynchronization>:
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e046      	b.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce0:	d009      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a12      	ldr	r2, [pc, #72]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a10      	ldr	r2, [pc, #64]	@ (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10c      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005d20:	2300      	movs	r3, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800

08005d38 <__cvt>:
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3e:	461d      	mov	r5, r3
 8005d40:	bfbb      	ittet	lt
 8005d42:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005d46:	461d      	movlt	r5, r3
 8005d48:	2300      	movge	r3, #0
 8005d4a:	232d      	movlt	r3, #45	@ 0x2d
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	4614      	mov	r4, r2
 8005d50:	bfb8      	it	lt
 8005d52:	4614      	movlt	r4, r2
 8005d54:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005d58:	7013      	strb	r3, [r2, #0]
 8005d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d5c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005d60:	f023 0820 	bic.w	r8, r3, #32
 8005d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d68:	d005      	beq.n	8005d76 <__cvt+0x3e>
 8005d6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d6e:	d100      	bne.n	8005d72 <__cvt+0x3a>
 8005d70:	3601      	adds	r6, #1
 8005d72:	2302      	movs	r3, #2
 8005d74:	e000      	b.n	8005d78 <__cvt+0x40>
 8005d76:	2303      	movs	r3, #3
 8005d78:	aa07      	add	r2, sp, #28
 8005d7a:	9204      	str	r2, [sp, #16]
 8005d7c:	aa06      	add	r2, sp, #24
 8005d7e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d82:	e9cd 3600 	strd	r3, r6, [sp]
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f000 ff3d 	bl	8006c08 <_dtoa_r>
 8005d8e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d92:	4607      	mov	r7, r0
 8005d94:	d119      	bne.n	8005dca <__cvt+0x92>
 8005d96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d98:	07db      	lsls	r3, r3, #31
 8005d9a:	d50e      	bpl.n	8005dba <__cvt+0x82>
 8005d9c:	eb00 0906 	add.w	r9, r0, r6
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	4620      	mov	r0, r4
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa feb2 	bl	8000b10 <__aeabi_dcmpeq>
 8005dac:	b108      	cbz	r0, 8005db2 <__cvt+0x7a>
 8005dae:	f8cd 901c 	str.w	r9, [sp, #28]
 8005db2:	2230      	movs	r2, #48	@ 0x30
 8005db4:	9b07      	ldr	r3, [sp, #28]
 8005db6:	454b      	cmp	r3, r9
 8005db8:	d31e      	bcc.n	8005df8 <__cvt+0xc0>
 8005dba:	4638      	mov	r0, r7
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005dc0:	1bdb      	subs	r3, r3, r7
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	b008      	add	sp, #32
 8005dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dce:	eb00 0906 	add.w	r9, r0, r6
 8005dd2:	d1e5      	bne.n	8005da0 <__cvt+0x68>
 8005dd4:	7803      	ldrb	r3, [r0, #0]
 8005dd6:	2b30      	cmp	r3, #48	@ 0x30
 8005dd8:	d10a      	bne.n	8005df0 <__cvt+0xb8>
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2300      	movs	r3, #0
 8005dde:	4620      	mov	r0, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	f7fa fe95 	bl	8000b10 <__aeabi_dcmpeq>
 8005de6:	b918      	cbnz	r0, 8005df0 <__cvt+0xb8>
 8005de8:	f1c6 0601 	rsb	r6, r6, #1
 8005dec:	f8ca 6000 	str.w	r6, [sl]
 8005df0:	f8da 3000 	ldr.w	r3, [sl]
 8005df4:	4499      	add	r9, r3
 8005df6:	e7d3      	b.n	8005da0 <__cvt+0x68>
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	9107      	str	r1, [sp, #28]
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e7d9      	b.n	8005db4 <__cvt+0x7c>

08005e00 <__exponent>:
 8005e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e02:	2900      	cmp	r1, #0
 8005e04:	bfb6      	itet	lt
 8005e06:	232d      	movlt	r3, #45	@ 0x2d
 8005e08:	232b      	movge	r3, #43	@ 0x2b
 8005e0a:	4249      	neglt	r1, r1
 8005e0c:	2909      	cmp	r1, #9
 8005e0e:	7002      	strb	r2, [r0, #0]
 8005e10:	7043      	strb	r3, [r0, #1]
 8005e12:	dd29      	ble.n	8005e68 <__exponent+0x68>
 8005e14:	f10d 0307 	add.w	r3, sp, #7
 8005e18:	461d      	mov	r5, r3
 8005e1a:	270a      	movs	r7, #10
 8005e1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e20:	461a      	mov	r2, r3
 8005e22:	fb07 1416 	mls	r4, r7, r6, r1
 8005e26:	3430      	adds	r4, #48	@ 0x30
 8005e28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	2c63      	cmp	r4, #99	@ 0x63
 8005e30:	4631      	mov	r1, r6
 8005e32:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e36:	dcf1      	bgt.n	8005e1c <__exponent+0x1c>
 8005e38:	3130      	adds	r1, #48	@ 0x30
 8005e3a:	1e94      	subs	r4, r2, #2
 8005e3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e40:	4623      	mov	r3, r4
 8005e42:	1c41      	adds	r1, r0, #1
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	d30a      	bcc.n	8005e5e <__exponent+0x5e>
 8005e48:	f10d 0309 	add.w	r3, sp, #9
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	42ac      	cmp	r4, r5
 8005e50:	bf88      	it	hi
 8005e52:	2300      	movhi	r3, #0
 8005e54:	3302      	adds	r3, #2
 8005e56:	4403      	add	r3, r0
 8005e58:	1a18      	subs	r0, r3, r0
 8005e5a:	b003      	add	sp, #12
 8005e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e66:	e7ed      	b.n	8005e44 <__exponent+0x44>
 8005e68:	2330      	movs	r3, #48	@ 0x30
 8005e6a:	3130      	adds	r1, #48	@ 0x30
 8005e6c:	7083      	strb	r3, [r0, #2]
 8005e6e:	70c1      	strb	r1, [r0, #3]
 8005e70:	1d03      	adds	r3, r0, #4
 8005e72:	e7f1      	b.n	8005e58 <__exponent+0x58>

08005e74 <_printf_float>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	b091      	sub	sp, #68	@ 0x44
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005e80:	4616      	mov	r6, r2
 8005e82:	461f      	mov	r7, r3
 8005e84:	4605      	mov	r5, r0
 8005e86:	f000 fdaf 	bl	80069e8 <_localeconv_r>
 8005e8a:	6803      	ldr	r3, [r0, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	9308      	str	r3, [sp, #32]
 8005e90:	f7fa f95e 	bl	8000150 <strlen>
 8005e94:	2300      	movs	r3, #0
 8005e96:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e98:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e9e:	3307      	adds	r3, #7
 8005ea0:	f023 0307 	bic.w	r3, r3, #7
 8005ea4:	f103 0208 	add.w	r2, r3, #8
 8005ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005eac:	f8d4 b000 	ldr.w	fp, [r4]
 8005eb0:	f8c8 2000 	str.w	r2, [r8]
 8005eb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ebe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ece:	4b9c      	ldr	r3, [pc, #624]	@ (8006140 <_printf_float+0x2cc>)
 8005ed0:	f7fa fe50 	bl	8000b74 <__aeabi_dcmpun>
 8005ed4:	bb70      	cbnz	r0, 8005f34 <_printf_float+0xc0>
 8005ed6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005eda:	f04f 32ff 	mov.w	r2, #4294967295
 8005ede:	4b98      	ldr	r3, [pc, #608]	@ (8006140 <_printf_float+0x2cc>)
 8005ee0:	f7fa fe2a 	bl	8000b38 <__aeabi_dcmple>
 8005ee4:	bb30      	cbnz	r0, 8005f34 <_printf_float+0xc0>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa fe19 	bl	8000b24 <__aeabi_dcmplt>
 8005ef2:	b110      	cbz	r0, 8005efa <_printf_float+0x86>
 8005ef4:	232d      	movs	r3, #45	@ 0x2d
 8005ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005efa:	4a92      	ldr	r2, [pc, #584]	@ (8006144 <_printf_float+0x2d0>)
 8005efc:	4b92      	ldr	r3, [pc, #584]	@ (8006148 <_printf_float+0x2d4>)
 8005efe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f02:	bf94      	ite	ls
 8005f04:	4690      	movls	r8, r2
 8005f06:	4698      	movhi	r8, r3
 8005f08:	2303      	movs	r3, #3
 8005f0a:	f04f 0900 	mov.w	r9, #0
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	f02b 0304 	bic.w	r3, fp, #4
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	4633      	mov	r3, r6
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	9700      	str	r7, [sp, #0]
 8005f1e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005f20:	f000 f9d4 	bl	80062cc <_printf_common>
 8005f24:	3001      	adds	r0, #1
 8005f26:	f040 8090 	bne.w	800604a <_printf_float+0x1d6>
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	b011      	add	sp, #68	@ 0x44
 8005f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	4640      	mov	r0, r8
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	f7fa fe1a 	bl	8000b74 <__aeabi_dcmpun>
 8005f40:	b148      	cbz	r0, 8005f56 <_printf_float+0xe2>
 8005f42:	464b      	mov	r3, r9
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bfb8      	it	lt
 8005f48:	232d      	movlt	r3, #45	@ 0x2d
 8005f4a:	4a80      	ldr	r2, [pc, #512]	@ (800614c <_printf_float+0x2d8>)
 8005f4c:	bfb8      	it	lt
 8005f4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f52:	4b7f      	ldr	r3, [pc, #508]	@ (8006150 <_printf_float+0x2dc>)
 8005f54:	e7d3      	b.n	8005efe <_printf_float+0x8a>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	d13f      	bne.n	8005fe0 <_printf_float+0x16c>
 8005f60:	2306      	movs	r3, #6
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	9206      	str	r2, [sp, #24]
 8005f6e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f70:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f74:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f76:	9203      	str	r2, [sp, #12]
 8005f78:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005f7c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	4642      	mov	r2, r8
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4628      	mov	r0, r5
 8005f88:	464b      	mov	r3, r9
 8005f8a:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f8c:	f7ff fed4 	bl	8005d38 <__cvt>
 8005f90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f92:	4680      	mov	r8, r0
 8005f94:	2947      	cmp	r1, #71	@ 0x47
 8005f96:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f98:	d128      	bne.n	8005fec <_printf_float+0x178>
 8005f9a:	1cc8      	adds	r0, r1, #3
 8005f9c:	db02      	blt.n	8005fa4 <_printf_float+0x130>
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	dd40      	ble.n	8006026 <_printf_float+0x1b2>
 8005fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fac:	4652      	mov	r2, sl
 8005fae:	3901      	subs	r1, #1
 8005fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fb4:	910d      	str	r1, [sp, #52]	@ 0x34
 8005fb6:	f7ff ff23 	bl	8005e00 <__exponent>
 8005fba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fbc:	4681      	mov	r9, r0
 8005fbe:	1813      	adds	r3, r2, r0
 8005fc0:	2a01      	cmp	r2, #1
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	dc02      	bgt.n	8005fcc <_printf_float+0x158>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	07d2      	lsls	r2, r2, #31
 8005fca:	d501      	bpl.n	8005fd0 <_printf_float+0x15c>
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d09e      	beq.n	8005f16 <_printf_float+0xa2>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	e79a      	b.n	8005f16 <_printf_float+0xa2>
 8005fe0:	2947      	cmp	r1, #71	@ 0x47
 8005fe2:	d1bf      	bne.n	8005f64 <_printf_float+0xf0>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1bd      	bne.n	8005f64 <_printf_float+0xf0>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7ba      	b.n	8005f62 <_printf_float+0xee>
 8005fec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff0:	d9dc      	bls.n	8005fac <_printf_float+0x138>
 8005ff2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ff6:	d118      	bne.n	800602a <_printf_float+0x1b6>
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	dd0b      	ble.n	8006016 <_printf_float+0x1a2>
 8005ffe:	6121      	str	r1, [r4, #16]
 8006000:	b913      	cbnz	r3, 8006008 <_printf_float+0x194>
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	07d0      	lsls	r0, r2, #31
 8006006:	d502      	bpl.n	800600e <_printf_float+0x19a>
 8006008:	3301      	adds	r3, #1
 800600a:	440b      	add	r3, r1
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	f04f 0900 	mov.w	r9, #0
 8006012:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006014:	e7dc      	b.n	8005fd0 <_printf_float+0x15c>
 8006016:	b913      	cbnz	r3, 800601e <_printf_float+0x1aa>
 8006018:	6822      	ldr	r2, [r4, #0]
 800601a:	07d2      	lsls	r2, r2, #31
 800601c:	d501      	bpl.n	8006022 <_printf_float+0x1ae>
 800601e:	3302      	adds	r3, #2
 8006020:	e7f4      	b.n	800600c <_printf_float+0x198>
 8006022:	2301      	movs	r3, #1
 8006024:	e7f2      	b.n	800600c <_printf_float+0x198>
 8006026:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800602a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800602c:	4299      	cmp	r1, r3
 800602e:	db05      	blt.n	800603c <_printf_float+0x1c8>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	6121      	str	r1, [r4, #16]
 8006034:	07d8      	lsls	r0, r3, #31
 8006036:	d5ea      	bpl.n	800600e <_printf_float+0x19a>
 8006038:	1c4b      	adds	r3, r1, #1
 800603a:	e7e7      	b.n	800600c <_printf_float+0x198>
 800603c:	2900      	cmp	r1, #0
 800603e:	bfcc      	ite	gt
 8006040:	2201      	movgt	r2, #1
 8006042:	f1c1 0202 	rsble	r2, r1, #2
 8006046:	4413      	add	r3, r2
 8006048:	e7e0      	b.n	800600c <_printf_float+0x198>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	055a      	lsls	r2, r3, #21
 800604e:	d407      	bmi.n	8006060 <_printf_float+0x1ec>
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	4642      	mov	r2, r8
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	d12b      	bne.n	80060b6 <_printf_float+0x242>
 800605e:	e764      	b.n	8005f2a <_printf_float+0xb6>
 8006060:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006064:	f240 80dc 	bls.w	8006220 <_printf_float+0x3ac>
 8006068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606c:	2200      	movs	r2, #0
 800606e:	2300      	movs	r3, #0
 8006070:	f7fa fd4e 	bl	8000b10 <__aeabi_dcmpeq>
 8006074:	2800      	cmp	r0, #0
 8006076:	d033      	beq.n	80060e0 <_printf_float+0x26c>
 8006078:	2301      	movs	r3, #1
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	4a35      	ldr	r2, [pc, #212]	@ (8006154 <_printf_float+0x2e0>)
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f af51 	beq.w	8005f2a <_printf_float+0xb6>
 8006088:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800608c:	4543      	cmp	r3, r8
 800608e:	db02      	blt.n	8006096 <_printf_float+0x222>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	07d8      	lsls	r0, r3, #31
 8006094:	d50f      	bpl.n	80060b6 <_printf_float+0x242>
 8006096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f af42 	beq.w	8005f2a <_printf_float+0xb6>
 80060a6:	f04f 0900 	mov.w	r9, #0
 80060aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80060ae:	f104 0a1a 	add.w	sl, r4, #26
 80060b2:	45c8      	cmp	r8, r9
 80060b4:	dc09      	bgt.n	80060ca <_printf_float+0x256>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	079b      	lsls	r3, r3, #30
 80060ba:	f100 8102 	bmi.w	80062c2 <_printf_float+0x44e>
 80060be:	68e0      	ldr	r0, [r4, #12]
 80060c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060c2:	4298      	cmp	r0, r3
 80060c4:	bfb8      	it	lt
 80060c6:	4618      	movlt	r0, r3
 80060c8:	e731      	b.n	8005f2e <_printf_float+0xba>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4652      	mov	r2, sl
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f af28 	beq.w	8005f2a <_printf_float+0xb6>
 80060da:	f109 0901 	add.w	r9, r9, #1
 80060de:	e7e8      	b.n	80060b2 <_printf_float+0x23e>
 80060e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	dc38      	bgt.n	8006158 <_printf_float+0x2e4>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	4a19      	ldr	r2, [pc, #100]	@ (8006154 <_printf_float+0x2e0>)
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f af1a 	beq.w	8005f2a <_printf_float+0xb6>
 80060f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80060fa:	ea59 0303 	orrs.w	r3, r9, r3
 80060fe:	d102      	bne.n	8006106 <_printf_float+0x292>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	07d9      	lsls	r1, r3, #31
 8006104:	d5d7      	bpl.n	80060b6 <_printf_float+0x242>
 8006106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800610a:	4631      	mov	r1, r6
 800610c:	4628      	mov	r0, r5
 800610e:	47b8      	blx	r7
 8006110:	3001      	adds	r0, #1
 8006112:	f43f af0a 	beq.w	8005f2a <_printf_float+0xb6>
 8006116:	f04f 0a00 	mov.w	sl, #0
 800611a:	f104 0b1a 	add.w	fp, r4, #26
 800611e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006120:	425b      	negs	r3, r3
 8006122:	4553      	cmp	r3, sl
 8006124:	dc01      	bgt.n	800612a <_printf_float+0x2b6>
 8006126:	464b      	mov	r3, r9
 8006128:	e793      	b.n	8006052 <_printf_float+0x1de>
 800612a:	2301      	movs	r3, #1
 800612c:	465a      	mov	r2, fp
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f aef8 	beq.w	8005f2a <_printf_float+0xb6>
 800613a:	f10a 0a01 	add.w	sl, sl, #1
 800613e:	e7ee      	b.n	800611e <_printf_float+0x2aa>
 8006140:	7fefffff 	.word	0x7fefffff
 8006144:	0800941a 	.word	0x0800941a
 8006148:	0800941e 	.word	0x0800941e
 800614c:	08009422 	.word	0x08009422
 8006150:	08009426 	.word	0x08009426
 8006154:	0800942a 	.word	0x0800942a
 8006158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800615a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800615e:	4553      	cmp	r3, sl
 8006160:	bfa8      	it	ge
 8006162:	4653      	movge	r3, sl
 8006164:	2b00      	cmp	r3, #0
 8006166:	4699      	mov	r9, r3
 8006168:	dc36      	bgt.n	80061d8 <_printf_float+0x364>
 800616a:	f04f 0b00 	mov.w	fp, #0
 800616e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006172:	f104 021a 	add.w	r2, r4, #26
 8006176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006178:	930a      	str	r3, [sp, #40]	@ 0x28
 800617a:	eba3 0309 	sub.w	r3, r3, r9
 800617e:	455b      	cmp	r3, fp
 8006180:	dc31      	bgt.n	80061e6 <_printf_float+0x372>
 8006182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006184:	459a      	cmp	sl, r3
 8006186:	dc3a      	bgt.n	80061fe <_printf_float+0x38a>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	07da      	lsls	r2, r3, #31
 800618c:	d437      	bmi.n	80061fe <_printf_float+0x38a>
 800618e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006190:	ebaa 0903 	sub.w	r9, sl, r3
 8006194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006196:	ebaa 0303 	sub.w	r3, sl, r3
 800619a:	4599      	cmp	r9, r3
 800619c:	bfa8      	it	ge
 800619e:	4699      	movge	r9, r3
 80061a0:	f1b9 0f00 	cmp.w	r9, #0
 80061a4:	dc33      	bgt.n	800620e <_printf_float+0x39a>
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061ae:	f104 0b1a 	add.w	fp, r4, #26
 80061b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b4:	ebaa 0303 	sub.w	r3, sl, r3
 80061b8:	eba3 0309 	sub.w	r3, r3, r9
 80061bc:	4543      	cmp	r3, r8
 80061be:	f77f af7a 	ble.w	80060b6 <_printf_float+0x242>
 80061c2:	2301      	movs	r3, #1
 80061c4:	465a      	mov	r2, fp
 80061c6:	4631      	mov	r1, r6
 80061c8:	4628      	mov	r0, r5
 80061ca:	47b8      	blx	r7
 80061cc:	3001      	adds	r0, #1
 80061ce:	f43f aeac 	beq.w	8005f2a <_printf_float+0xb6>
 80061d2:	f108 0801 	add.w	r8, r8, #1
 80061d6:	e7ec      	b.n	80061b2 <_printf_float+0x33e>
 80061d8:	4642      	mov	r2, r8
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	d1c2      	bne.n	800616a <_printf_float+0x2f6>
 80061e4:	e6a1      	b.n	8005f2a <_printf_float+0xb6>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f ae9a 	beq.w	8005f2a <_printf_float+0xb6>
 80061f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061f8:	f10b 0b01 	add.w	fp, fp, #1
 80061fc:	e7bb      	b.n	8006176 <_printf_float+0x302>
 80061fe:	4631      	mov	r1, r6
 8006200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	d1c0      	bne.n	800618e <_printf_float+0x31a>
 800620c:	e68d      	b.n	8005f2a <_printf_float+0xb6>
 800620e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006210:	464b      	mov	r3, r9
 8006212:	4631      	mov	r1, r6
 8006214:	4628      	mov	r0, r5
 8006216:	4442      	add	r2, r8
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	d1c3      	bne.n	80061a6 <_printf_float+0x332>
 800621e:	e684      	b.n	8005f2a <_printf_float+0xb6>
 8006220:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006224:	f1ba 0f01 	cmp.w	sl, #1
 8006228:	dc01      	bgt.n	800622e <_printf_float+0x3ba>
 800622a:	07db      	lsls	r3, r3, #31
 800622c:	d536      	bpl.n	800629c <_printf_float+0x428>
 800622e:	2301      	movs	r3, #1
 8006230:	4642      	mov	r2, r8
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	47b8      	blx	r7
 8006238:	3001      	adds	r0, #1
 800623a:	f43f ae76 	beq.w	8005f2a <_printf_float+0xb6>
 800623e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006242:	4631      	mov	r1, r6
 8006244:	4628      	mov	r0, r5
 8006246:	47b8      	blx	r7
 8006248:	3001      	adds	r0, #1
 800624a:	f43f ae6e 	beq.w	8005f2a <_printf_float+0xb6>
 800624e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006252:	2200      	movs	r2, #0
 8006254:	2300      	movs	r3, #0
 8006256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625a:	f7fa fc59 	bl	8000b10 <__aeabi_dcmpeq>
 800625e:	b9c0      	cbnz	r0, 8006292 <_printf_float+0x41e>
 8006260:	4653      	mov	r3, sl
 8006262:	f108 0201 	add.w	r2, r8, #1
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	d10c      	bne.n	800628a <_printf_float+0x416>
 8006270:	e65b      	b.n	8005f2a <_printf_float+0xb6>
 8006272:	2301      	movs	r3, #1
 8006274:	465a      	mov	r2, fp
 8006276:	4631      	mov	r1, r6
 8006278:	4628      	mov	r0, r5
 800627a:	47b8      	blx	r7
 800627c:	3001      	adds	r0, #1
 800627e:	f43f ae54 	beq.w	8005f2a <_printf_float+0xb6>
 8006282:	f108 0801 	add.w	r8, r8, #1
 8006286:	45d0      	cmp	r8, sl
 8006288:	dbf3      	blt.n	8006272 <_printf_float+0x3fe>
 800628a:	464b      	mov	r3, r9
 800628c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006290:	e6e0      	b.n	8006054 <_printf_float+0x1e0>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	f104 0b1a 	add.w	fp, r4, #26
 800629a:	e7f4      	b.n	8006286 <_printf_float+0x412>
 800629c:	2301      	movs	r3, #1
 800629e:	4642      	mov	r2, r8
 80062a0:	e7e1      	b.n	8006266 <_printf_float+0x3f2>
 80062a2:	2301      	movs	r3, #1
 80062a4:	464a      	mov	r2, r9
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f ae3c 	beq.w	8005f2a <_printf_float+0xb6>
 80062b2:	f108 0801 	add.w	r8, r8, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	4543      	cmp	r3, r8
 80062be:	dcf0      	bgt.n	80062a2 <_printf_float+0x42e>
 80062c0:	e6fd      	b.n	80060be <_printf_float+0x24a>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	f104 0919 	add.w	r9, r4, #25
 80062ca:	e7f4      	b.n	80062b6 <_printf_float+0x442>

080062cc <_printf_common>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	4616      	mov	r6, r2
 80062d2:	4698      	mov	r8, r3
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	4607      	mov	r7, r0
 80062da:	4293      	cmp	r3, r2
 80062dc:	bfb8      	it	lt
 80062de:	4613      	movlt	r3, r2
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062e6:	460c      	mov	r4, r1
 80062e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ec:	b10a      	cbz	r2, 80062f2 <_printf_common+0x26>
 80062ee:	3301      	adds	r3, #1
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	0699      	lsls	r1, r3, #26
 80062f6:	bf42      	ittt	mi
 80062f8:	6833      	ldrmi	r3, [r6, #0]
 80062fa:	3302      	addmi	r3, #2
 80062fc:	6033      	strmi	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	f015 0506 	ands.w	r5, r5, #6
 8006304:	d106      	bne.n	8006314 <_printf_common+0x48>
 8006306:	f104 0a19 	add.w	sl, r4, #25
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	6832      	ldr	r2, [r6, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	42ab      	cmp	r3, r5
 8006312:	dc2b      	bgt.n	800636c <_printf_common+0xa0>
 8006314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	3b00      	subs	r3, #0
 800631c:	bf18      	it	ne
 800631e:	2301      	movne	r3, #1
 8006320:	0692      	lsls	r2, r2, #26
 8006322:	d430      	bmi.n	8006386 <_printf_common+0xba>
 8006324:	4641      	mov	r1, r8
 8006326:	4638      	mov	r0, r7
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	47c8      	blx	r9
 800632e:	3001      	adds	r0, #1
 8006330:	d023      	beq.n	800637a <_printf_common+0xae>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	f003 0306 	and.w	r3, r3, #6
 800633a:	2b04      	cmp	r3, #4
 800633c:	bf14      	ite	ne
 800633e:	2500      	movne	r5, #0
 8006340:	6833      	ldreq	r3, [r6, #0]
 8006342:	f04f 0600 	mov.w	r6, #0
 8006346:	bf08      	it	eq
 8006348:	68e5      	ldreq	r5, [r4, #12]
 800634a:	f104 041a 	add.w	r4, r4, #26
 800634e:	bf08      	it	eq
 8006350:	1aed      	subeq	r5, r5, r3
 8006352:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006356:	bf08      	it	eq
 8006358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800635c:	4293      	cmp	r3, r2
 800635e:	bfc4      	itt	gt
 8006360:	1a9b      	subgt	r3, r3, r2
 8006362:	18ed      	addgt	r5, r5, r3
 8006364:	42b5      	cmp	r5, r6
 8006366:	d11a      	bne.n	800639e <_printf_common+0xd2>
 8006368:	2000      	movs	r0, #0
 800636a:	e008      	b.n	800637e <_printf_common+0xb2>
 800636c:	2301      	movs	r3, #1
 800636e:	4652      	mov	r2, sl
 8006370:	4641      	mov	r1, r8
 8006372:	4638      	mov	r0, r7
 8006374:	47c8      	blx	r9
 8006376:	3001      	adds	r0, #1
 8006378:	d103      	bne.n	8006382 <_printf_common+0xb6>
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
 800637e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006382:	3501      	adds	r5, #1
 8006384:	e7c1      	b.n	800630a <_printf_common+0x3e>
 8006386:	2030      	movs	r0, #48	@ 0x30
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006394:	4422      	add	r2, r4
 8006396:	3302      	adds	r3, #2
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800639c:	e7c2      	b.n	8006324 <_printf_common+0x58>
 800639e:	2301      	movs	r3, #1
 80063a0:	4622      	mov	r2, r4
 80063a2:	4641      	mov	r1, r8
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c8      	blx	r9
 80063a8:	3001      	adds	r0, #1
 80063aa:	d0e6      	beq.n	800637a <_printf_common+0xae>
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7d9      	b.n	8006364 <_printf_common+0x98>

080063b0 <_printf_i>:
 80063b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	7e0f      	ldrb	r7, [r1, #24]
 80063b6:	4691      	mov	r9, r2
 80063b8:	2f78      	cmp	r7, #120	@ 0x78
 80063ba:	4680      	mov	r8, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	469a      	mov	sl, r3
 80063c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c6:	d807      	bhi.n	80063d8 <_printf_i+0x28>
 80063c8:	2f62      	cmp	r7, #98	@ 0x62
 80063ca:	d80a      	bhi.n	80063e2 <_printf_i+0x32>
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	f000 80d3 	beq.w	8006578 <_printf_i+0x1c8>
 80063d2:	2f58      	cmp	r7, #88	@ 0x58
 80063d4:	f000 80ba 	beq.w	800654c <_printf_i+0x19c>
 80063d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063e0:	e03a      	b.n	8006458 <_printf_i+0xa8>
 80063e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e6:	2b15      	cmp	r3, #21
 80063e8:	d8f6      	bhi.n	80063d8 <_printf_i+0x28>
 80063ea:	a101      	add	r1, pc, #4	@ (adr r1, 80063f0 <_printf_i+0x40>)
 80063ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f0:	08006449 	.word	0x08006449
 80063f4:	0800645d 	.word	0x0800645d
 80063f8:	080063d9 	.word	0x080063d9
 80063fc:	080063d9 	.word	0x080063d9
 8006400:	080063d9 	.word	0x080063d9
 8006404:	080063d9 	.word	0x080063d9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063d9 	.word	0x080063d9
 8006410:	080063d9 	.word	0x080063d9
 8006414:	080063d9 	.word	0x080063d9
 8006418:	080063d9 	.word	0x080063d9
 800641c:	0800655f 	.word	0x0800655f
 8006420:	08006487 	.word	0x08006487
 8006424:	08006519 	.word	0x08006519
 8006428:	080063d9 	.word	0x080063d9
 800642c:	080063d9 	.word	0x080063d9
 8006430:	08006581 	.word	0x08006581
 8006434:	080063d9 	.word	0x080063d9
 8006438:	08006487 	.word	0x08006487
 800643c:	080063d9 	.word	0x080063d9
 8006440:	080063d9 	.word	0x080063d9
 8006444:	08006521 	.word	0x08006521
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6032      	str	r2, [r6, #0]
 8006450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006458:	2301      	movs	r3, #1
 800645a:	e09e      	b.n	800659a <_printf_i+0x1ea>
 800645c:	6833      	ldr	r3, [r6, #0]
 800645e:	6820      	ldr	r0, [r4, #0]
 8006460:	1d19      	adds	r1, r3, #4
 8006462:	6031      	str	r1, [r6, #0]
 8006464:	0606      	lsls	r6, r0, #24
 8006466:	d501      	bpl.n	800646c <_printf_i+0xbc>
 8006468:	681d      	ldr	r5, [r3, #0]
 800646a:	e003      	b.n	8006474 <_printf_i+0xc4>
 800646c:	0645      	lsls	r5, r0, #25
 800646e:	d5fb      	bpl.n	8006468 <_printf_i+0xb8>
 8006470:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006474:	2d00      	cmp	r5, #0
 8006476:	da03      	bge.n	8006480 <_printf_i+0xd0>
 8006478:	232d      	movs	r3, #45	@ 0x2d
 800647a:	426d      	negs	r5, r5
 800647c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006480:	230a      	movs	r3, #10
 8006482:	4859      	ldr	r0, [pc, #356]	@ (80065e8 <_printf_i+0x238>)
 8006484:	e011      	b.n	80064aa <_printf_i+0xfa>
 8006486:	6821      	ldr	r1, [r4, #0]
 8006488:	6833      	ldr	r3, [r6, #0]
 800648a:	0608      	lsls	r0, r1, #24
 800648c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006490:	d402      	bmi.n	8006498 <_printf_i+0xe8>
 8006492:	0649      	lsls	r1, r1, #25
 8006494:	bf48      	it	mi
 8006496:	b2ad      	uxthmi	r5, r5
 8006498:	2f6f      	cmp	r7, #111	@ 0x6f
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	bf14      	ite	ne
 800649e:	230a      	movne	r3, #10
 80064a0:	2308      	moveq	r3, #8
 80064a2:	4851      	ldr	r0, [pc, #324]	@ (80065e8 <_printf_i+0x238>)
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064aa:	6866      	ldr	r6, [r4, #4]
 80064ac:	2e00      	cmp	r6, #0
 80064ae:	bfa8      	it	ge
 80064b0:	6821      	ldrge	r1, [r4, #0]
 80064b2:	60a6      	str	r6, [r4, #8]
 80064b4:	bfa4      	itt	ge
 80064b6:	f021 0104 	bicge.w	r1, r1, #4
 80064ba:	6021      	strge	r1, [r4, #0]
 80064bc:	b90d      	cbnz	r5, 80064c2 <_printf_i+0x112>
 80064be:	2e00      	cmp	r6, #0
 80064c0:	d04b      	beq.n	800655a <_printf_i+0x1aa>
 80064c2:	4616      	mov	r6, r2
 80064c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c8:	fb03 5711 	mls	r7, r3, r1, r5
 80064cc:	5dc7      	ldrb	r7, [r0, r7]
 80064ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064d2:	462f      	mov	r7, r5
 80064d4:	42bb      	cmp	r3, r7
 80064d6:	460d      	mov	r5, r1
 80064d8:	d9f4      	bls.n	80064c4 <_printf_i+0x114>
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d10b      	bne.n	80064f6 <_printf_i+0x146>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	07df      	lsls	r7, r3, #31
 80064e2:	d508      	bpl.n	80064f6 <_printf_i+0x146>
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	6861      	ldr	r1, [r4, #4]
 80064e8:	4299      	cmp	r1, r3
 80064ea:	bfde      	ittt	le
 80064ec:	2330      	movle	r3, #48	@ 0x30
 80064ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064f6:	1b92      	subs	r2, r2, r6
 80064f8:	6122      	str	r2, [r4, #16]
 80064fa:	464b      	mov	r3, r9
 80064fc:	4621      	mov	r1, r4
 80064fe:	4640      	mov	r0, r8
 8006500:	f8cd a000 	str.w	sl, [sp]
 8006504:	aa03      	add	r2, sp, #12
 8006506:	f7ff fee1 	bl	80062cc <_printf_common>
 800650a:	3001      	adds	r0, #1
 800650c:	d14a      	bne.n	80065a4 <_printf_i+0x1f4>
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	b004      	add	sp, #16
 8006514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	6023      	str	r3, [r4, #0]
 8006520:	2778      	movs	r7, #120	@ 0x78
 8006522:	4832      	ldr	r0, [pc, #200]	@ (80065ec <_printf_i+0x23c>)
 8006524:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	6831      	ldr	r1, [r6, #0]
 800652c:	061f      	lsls	r7, r3, #24
 800652e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006532:	d402      	bmi.n	800653a <_printf_i+0x18a>
 8006534:	065f      	lsls	r7, r3, #25
 8006536:	bf48      	it	mi
 8006538:	b2ad      	uxthmi	r5, r5
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	bf44      	itt	mi
 8006540:	f043 0320 	orrmi.w	r3, r3, #32
 8006544:	6023      	strmi	r3, [r4, #0]
 8006546:	b11d      	cbz	r5, 8006550 <_printf_i+0x1a0>
 8006548:	2310      	movs	r3, #16
 800654a:	e7ab      	b.n	80064a4 <_printf_i+0xf4>
 800654c:	4826      	ldr	r0, [pc, #152]	@ (80065e8 <_printf_i+0x238>)
 800654e:	e7e9      	b.n	8006524 <_printf_i+0x174>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f023 0320 	bic.w	r3, r3, #32
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	e7f6      	b.n	8006548 <_printf_i+0x198>
 800655a:	4616      	mov	r6, r2
 800655c:	e7bd      	b.n	80064da <_printf_i+0x12a>
 800655e:	6833      	ldr	r3, [r6, #0]
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	1d18      	adds	r0, r3, #4
 8006564:	6961      	ldr	r1, [r4, #20]
 8006566:	6030      	str	r0, [r6, #0]
 8006568:	062e      	lsls	r6, r5, #24
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	d501      	bpl.n	8006572 <_printf_i+0x1c2>
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	e002      	b.n	8006578 <_printf_i+0x1c8>
 8006572:	0668      	lsls	r0, r5, #25
 8006574:	d5fb      	bpl.n	800656e <_printf_i+0x1be>
 8006576:	8019      	strh	r1, [r3, #0]
 8006578:	2300      	movs	r3, #0
 800657a:	4616      	mov	r6, r2
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	e7bc      	b.n	80064fa <_printf_i+0x14a>
 8006580:	6833      	ldr	r3, [r6, #0]
 8006582:	2100      	movs	r1, #0
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	6032      	str	r2, [r6, #0]
 8006588:	681e      	ldr	r6, [r3, #0]
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	4630      	mov	r0, r6
 800658e:	f000 faa2 	bl	8006ad6 <memchr>
 8006592:	b108      	cbz	r0, 8006598 <_printf_i+0x1e8>
 8006594:	1b80      	subs	r0, r0, r6
 8006596:	6060      	str	r0, [r4, #4]
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	2300      	movs	r3, #0
 800659e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a2:	e7aa      	b.n	80064fa <_printf_i+0x14a>
 80065a4:	4632      	mov	r2, r6
 80065a6:	4649      	mov	r1, r9
 80065a8:	4640      	mov	r0, r8
 80065aa:	6923      	ldr	r3, [r4, #16]
 80065ac:	47d0      	blx	sl
 80065ae:	3001      	adds	r0, #1
 80065b0:	d0ad      	beq.n	800650e <_printf_i+0x15e>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	079b      	lsls	r3, r3, #30
 80065b6:	d413      	bmi.n	80065e0 <_printf_i+0x230>
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	4298      	cmp	r0, r3
 80065be:	bfb8      	it	lt
 80065c0:	4618      	movlt	r0, r3
 80065c2:	e7a6      	b.n	8006512 <_printf_i+0x162>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4632      	mov	r2, r6
 80065c8:	4649      	mov	r1, r9
 80065ca:	4640      	mov	r0, r8
 80065cc:	47d0      	blx	sl
 80065ce:	3001      	adds	r0, #1
 80065d0:	d09d      	beq.n	800650e <_printf_i+0x15e>
 80065d2:	3501      	adds	r5, #1
 80065d4:	68e3      	ldr	r3, [r4, #12]
 80065d6:	9903      	ldr	r1, [sp, #12]
 80065d8:	1a5b      	subs	r3, r3, r1
 80065da:	42ab      	cmp	r3, r5
 80065dc:	dcf2      	bgt.n	80065c4 <_printf_i+0x214>
 80065de:	e7eb      	b.n	80065b8 <_printf_i+0x208>
 80065e0:	2500      	movs	r5, #0
 80065e2:	f104 0619 	add.w	r6, r4, #25
 80065e6:	e7f5      	b.n	80065d4 <_printf_i+0x224>
 80065e8:	0800942c 	.word	0x0800942c
 80065ec:	0800943d 	.word	0x0800943d

080065f0 <std>:
 80065f0:	2300      	movs	r3, #0
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	e9c0 3300 	strd	r3, r3, [r0]
 80065fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fe:	6083      	str	r3, [r0, #8]
 8006600:	8181      	strh	r1, [r0, #12]
 8006602:	6643      	str	r3, [r0, #100]	@ 0x64
 8006604:	81c2      	strh	r2, [r0, #14]
 8006606:	6183      	str	r3, [r0, #24]
 8006608:	4619      	mov	r1, r3
 800660a:	2208      	movs	r2, #8
 800660c:	305c      	adds	r0, #92	@ 0x5c
 800660e:	f000 f9e2 	bl	80069d6 <memset>
 8006612:	4b0d      	ldr	r3, [pc, #52]	@ (8006648 <std+0x58>)
 8006614:	6224      	str	r4, [r4, #32]
 8006616:	6263      	str	r3, [r4, #36]	@ 0x24
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <std+0x5c>)
 800661a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800661c:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <std+0x60>)
 800661e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <std+0x64>)
 8006622:	6323      	str	r3, [r4, #48]	@ 0x30
 8006624:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <std+0x68>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d006      	beq.n	8006638 <std+0x48>
 800662a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662e:	4294      	cmp	r4, r2
 8006630:	d002      	beq.n	8006638 <std+0x48>
 8006632:	33d0      	adds	r3, #208	@ 0xd0
 8006634:	429c      	cmp	r4, r3
 8006636:	d105      	bne.n	8006644 <std+0x54>
 8006638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f000 ba46 	b.w	8006ad0 <__retarget_lock_init_recursive>
 8006644:	bd10      	pop	{r4, pc}
 8006646:	bf00      	nop
 8006648:	08006951 	.word	0x08006951
 800664c:	08006973 	.word	0x08006973
 8006650:	080069ab 	.word	0x080069ab
 8006654:	080069cf 	.word	0x080069cf
 8006658:	20001ff8 	.word	0x20001ff8

0800665c <stdio_exit_handler>:
 800665c:	4a02      	ldr	r2, [pc, #8]	@ (8006668 <stdio_exit_handler+0xc>)
 800665e:	4903      	ldr	r1, [pc, #12]	@ (800666c <stdio_exit_handler+0x10>)
 8006660:	4803      	ldr	r0, [pc, #12]	@ (8006670 <stdio_exit_handler+0x14>)
 8006662:	f000 b869 	b.w	8006738 <_fwalk_sglue>
 8006666:	bf00      	nop
 8006668:	20000014 	.word	0x20000014
 800666c:	080086c5 	.word	0x080086c5
 8006670:	20000024 	.word	0x20000024

08006674 <cleanup_stdio>:
 8006674:	6841      	ldr	r1, [r0, #4]
 8006676:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <cleanup_stdio+0x34>)
 8006678:	b510      	push	{r4, lr}
 800667a:	4299      	cmp	r1, r3
 800667c:	4604      	mov	r4, r0
 800667e:	d001      	beq.n	8006684 <cleanup_stdio+0x10>
 8006680:	f002 f820 	bl	80086c4 <_fflush_r>
 8006684:	68a1      	ldr	r1, [r4, #8]
 8006686:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <cleanup_stdio+0x38>)
 8006688:	4299      	cmp	r1, r3
 800668a:	d002      	beq.n	8006692 <cleanup_stdio+0x1e>
 800668c:	4620      	mov	r0, r4
 800668e:	f002 f819 	bl	80086c4 <_fflush_r>
 8006692:	68e1      	ldr	r1, [r4, #12]
 8006694:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <cleanup_stdio+0x3c>)
 8006696:	4299      	cmp	r1, r3
 8006698:	d004      	beq.n	80066a4 <cleanup_stdio+0x30>
 800669a:	4620      	mov	r0, r4
 800669c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a0:	f002 b810 	b.w	80086c4 <_fflush_r>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	bf00      	nop
 80066a8:	20001ff8 	.word	0x20001ff8
 80066ac:	20002060 	.word	0x20002060
 80066b0:	200020c8 	.word	0x200020c8

080066b4 <global_stdio_init.part.0>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4b0b      	ldr	r3, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x30>)
 80066b8:	4c0b      	ldr	r4, [pc, #44]	@ (80066e8 <global_stdio_init.part.0+0x34>)
 80066ba:	4a0c      	ldr	r2, [pc, #48]	@ (80066ec <global_stdio_init.part.0+0x38>)
 80066bc:	4620      	mov	r0, r4
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	2104      	movs	r1, #4
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7ff ff94 	bl	80065f0 <std>
 80066c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066cc:	2201      	movs	r2, #1
 80066ce:	2109      	movs	r1, #9
 80066d0:	f7ff ff8e 	bl	80065f0 <std>
 80066d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d8:	2202      	movs	r2, #2
 80066da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066de:	2112      	movs	r1, #18
 80066e0:	f7ff bf86 	b.w	80065f0 <std>
 80066e4:	20002130 	.word	0x20002130
 80066e8:	20001ff8 	.word	0x20001ff8
 80066ec:	0800665d 	.word	0x0800665d

080066f0 <__sfp_lock_acquire>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__sfp_lock_acquire+0x8>)
 80066f2:	f000 b9ee 	b.w	8006ad2 <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	20002139 	.word	0x20002139

080066fc <__sfp_lock_release>:
 80066fc:	4801      	ldr	r0, [pc, #4]	@ (8006704 <__sfp_lock_release+0x8>)
 80066fe:	f000 b9e9 	b.w	8006ad4 <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	20002139 	.word	0x20002139

08006708 <__sinit>:
 8006708:	b510      	push	{r4, lr}
 800670a:	4604      	mov	r4, r0
 800670c:	f7ff fff0 	bl	80066f0 <__sfp_lock_acquire>
 8006710:	6a23      	ldr	r3, [r4, #32]
 8006712:	b11b      	cbz	r3, 800671c <__sinit+0x14>
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	f7ff bff0 	b.w	80066fc <__sfp_lock_release>
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x28>)
 800671e:	6223      	str	r3, [r4, #32]
 8006720:	4b04      	ldr	r3, [pc, #16]	@ (8006734 <__sinit+0x2c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f5      	bne.n	8006714 <__sinit+0xc>
 8006728:	f7ff ffc4 	bl	80066b4 <global_stdio_init.part.0>
 800672c:	e7f2      	b.n	8006714 <__sinit+0xc>
 800672e:	bf00      	nop
 8006730:	08006675 	.word	0x08006675
 8006734:	20002130 	.word	0x20002130

08006738 <_fwalk_sglue>:
 8006738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800673c:	4607      	mov	r7, r0
 800673e:	4688      	mov	r8, r1
 8006740:	4614      	mov	r4, r2
 8006742:	2600      	movs	r6, #0
 8006744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006748:	f1b9 0901 	subs.w	r9, r9, #1
 800674c:	d505      	bpl.n	800675a <_fwalk_sglue+0x22>
 800674e:	6824      	ldr	r4, [r4, #0]
 8006750:	2c00      	cmp	r4, #0
 8006752:	d1f7      	bne.n	8006744 <_fwalk_sglue+0xc>
 8006754:	4630      	mov	r0, r6
 8006756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d907      	bls.n	8006770 <_fwalk_sglue+0x38>
 8006760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006764:	3301      	adds	r3, #1
 8006766:	d003      	beq.n	8006770 <_fwalk_sglue+0x38>
 8006768:	4629      	mov	r1, r5
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	4306      	orrs	r6, r0
 8006770:	3568      	adds	r5, #104	@ 0x68
 8006772:	e7e9      	b.n	8006748 <_fwalk_sglue+0x10>

08006774 <iprintf>:
 8006774:	b40f      	push	{r0, r1, r2, r3}
 8006776:	b507      	push	{r0, r1, r2, lr}
 8006778:	4906      	ldr	r1, [pc, #24]	@ (8006794 <iprintf+0x20>)
 800677a:	ab04      	add	r3, sp, #16
 800677c:	6808      	ldr	r0, [r1, #0]
 800677e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006782:	6881      	ldr	r1, [r0, #8]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	f001 fe05 	bl	8008394 <_vfiprintf_r>
 800678a:	b003      	add	sp, #12
 800678c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006790:	b004      	add	sp, #16
 8006792:	4770      	bx	lr
 8006794:	20000020 	.word	0x20000020

08006798 <setbuf>:
 8006798:	fab1 f281 	clz	r2, r1
 800679c:	0952      	lsrs	r2, r2, #5
 800679e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	f000 b800 	b.w	80067a8 <setvbuf>

080067a8 <setvbuf>:
 80067a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067ac:	461d      	mov	r5, r3
 80067ae:	4b57      	ldr	r3, [pc, #348]	@ (800690c <setvbuf+0x164>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	681f      	ldr	r7, [r3, #0]
 80067b4:	460e      	mov	r6, r1
 80067b6:	4690      	mov	r8, r2
 80067b8:	b127      	cbz	r7, 80067c4 <setvbuf+0x1c>
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	b913      	cbnz	r3, 80067c4 <setvbuf+0x1c>
 80067be:	4638      	mov	r0, r7
 80067c0:	f7ff ffa2 	bl	8006708 <__sinit>
 80067c4:	f1b8 0f02 	cmp.w	r8, #2
 80067c8:	d006      	beq.n	80067d8 <setvbuf+0x30>
 80067ca:	f1b8 0f01 	cmp.w	r8, #1
 80067ce:	f200 809a 	bhi.w	8006906 <setvbuf+0x15e>
 80067d2:	2d00      	cmp	r5, #0
 80067d4:	f2c0 8097 	blt.w	8006906 <setvbuf+0x15e>
 80067d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067da:	07d9      	lsls	r1, r3, #31
 80067dc:	d405      	bmi.n	80067ea <setvbuf+0x42>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	059a      	lsls	r2, r3, #22
 80067e2:	d402      	bmi.n	80067ea <setvbuf+0x42>
 80067e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067e6:	f000 f974 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 80067ea:	4621      	mov	r1, r4
 80067ec:	4638      	mov	r0, r7
 80067ee:	f001 ff69 	bl	80086c4 <_fflush_r>
 80067f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067f4:	b141      	cbz	r1, 8006808 <setvbuf+0x60>
 80067f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067fa:	4299      	cmp	r1, r3
 80067fc:	d002      	beq.n	8006804 <setvbuf+0x5c>
 80067fe:	4638      	mov	r0, r7
 8006800:	f000 ffca 	bl	8007798 <_free_r>
 8006804:	2300      	movs	r3, #0
 8006806:	6363      	str	r3, [r4, #52]	@ 0x34
 8006808:	2300      	movs	r3, #0
 800680a:	61a3      	str	r3, [r4, #24]
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	d503      	bpl.n	800681c <setvbuf+0x74>
 8006814:	4638      	mov	r0, r7
 8006816:	6921      	ldr	r1, [r4, #16]
 8006818:	f000 ffbe 	bl	8007798 <_free_r>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f1b8 0f02 	cmp.w	r8, #2
 8006822:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	d061      	beq.n	80068f2 <setvbuf+0x14a>
 800682e:	ab01      	add	r3, sp, #4
 8006830:	466a      	mov	r2, sp
 8006832:	4621      	mov	r1, r4
 8006834:	4638      	mov	r0, r7
 8006836:	f001 ff6d 	bl	8008714 <__swhatbuf_r>
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	4318      	orrs	r0, r3
 800683e:	81a0      	strh	r0, [r4, #12]
 8006840:	bb2d      	cbnz	r5, 800688e <setvbuf+0xe6>
 8006842:	9d00      	ldr	r5, [sp, #0]
 8006844:	4628      	mov	r0, r5
 8006846:	f000 ffef 	bl	8007828 <malloc>
 800684a:	4606      	mov	r6, r0
 800684c:	2800      	cmp	r0, #0
 800684e:	d152      	bne.n	80068f6 <setvbuf+0x14e>
 8006850:	f8dd 9000 	ldr.w	r9, [sp]
 8006854:	45a9      	cmp	r9, r5
 8006856:	d140      	bne.n	80068da <setvbuf+0x132>
 8006858:	f04f 35ff 	mov.w	r5, #4294967295
 800685c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006860:	f043 0202 	orr.w	r2, r3, #2
 8006864:	81a2      	strh	r2, [r4, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	60a2      	str	r2, [r4, #8]
 800686a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	6122      	str	r2, [r4, #16]
 8006872:	2201      	movs	r2, #1
 8006874:	6162      	str	r2, [r4, #20]
 8006876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006878:	07d6      	lsls	r6, r2, #31
 800687a:	d404      	bmi.n	8006886 <setvbuf+0xde>
 800687c:	0598      	lsls	r0, r3, #22
 800687e:	d402      	bmi.n	8006886 <setvbuf+0xde>
 8006880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006882:	f000 f927 	bl	8006ad4 <__retarget_lock_release_recursive>
 8006886:	4628      	mov	r0, r5
 8006888:	b003      	add	sp, #12
 800688a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688e:	2e00      	cmp	r6, #0
 8006890:	d0d8      	beq.n	8006844 <setvbuf+0x9c>
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	b913      	cbnz	r3, 800689c <setvbuf+0xf4>
 8006896:	4638      	mov	r0, r7
 8006898:	f7ff ff36 	bl	8006708 <__sinit>
 800689c:	f1b8 0f01 	cmp.w	r8, #1
 80068a0:	bf08      	it	eq
 80068a2:	89a3      	ldrheq	r3, [r4, #12]
 80068a4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80068a8:	bf04      	itt	eq
 80068aa:	f043 0301 	orreq.w	r3, r3, #1
 80068ae:	81a3      	strheq	r3, [r4, #12]
 80068b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b4:	6026      	str	r6, [r4, #0]
 80068b6:	f013 0208 	ands.w	r2, r3, #8
 80068ba:	d01e      	beq.n	80068fa <setvbuf+0x152>
 80068bc:	07d9      	lsls	r1, r3, #31
 80068be:	bf41      	itttt	mi
 80068c0:	2200      	movmi	r2, #0
 80068c2:	426d      	negmi	r5, r5
 80068c4:	60a2      	strmi	r2, [r4, #8]
 80068c6:	61a5      	strmi	r5, [r4, #24]
 80068c8:	bf58      	it	pl
 80068ca:	60a5      	strpl	r5, [r4, #8]
 80068cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068ce:	07d2      	lsls	r2, r2, #31
 80068d0:	d401      	bmi.n	80068d6 <setvbuf+0x12e>
 80068d2:	059b      	lsls	r3, r3, #22
 80068d4:	d513      	bpl.n	80068fe <setvbuf+0x156>
 80068d6:	2500      	movs	r5, #0
 80068d8:	e7d5      	b.n	8006886 <setvbuf+0xde>
 80068da:	4648      	mov	r0, r9
 80068dc:	f000 ffa4 	bl	8007828 <malloc>
 80068e0:	4606      	mov	r6, r0
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0b8      	beq.n	8006858 <setvbuf+0xb0>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	464d      	mov	r5, r9
 80068ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	e7cf      	b.n	8006892 <setvbuf+0xea>
 80068f2:	2500      	movs	r5, #0
 80068f4:	e7b2      	b.n	800685c <setvbuf+0xb4>
 80068f6:	46a9      	mov	r9, r5
 80068f8:	e7f5      	b.n	80068e6 <setvbuf+0x13e>
 80068fa:	60a2      	str	r2, [r4, #8]
 80068fc:	e7e6      	b.n	80068cc <setvbuf+0x124>
 80068fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006900:	f000 f8e8 	bl	8006ad4 <__retarget_lock_release_recursive>
 8006904:	e7e7      	b.n	80068d6 <setvbuf+0x12e>
 8006906:	f04f 35ff 	mov.w	r5, #4294967295
 800690a:	e7bc      	b.n	8006886 <setvbuf+0xde>
 800690c:	20000020 	.word	0x20000020

08006910 <siprintf>:
 8006910:	b40e      	push	{r1, r2, r3}
 8006912:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006916:	b500      	push	{lr}
 8006918:	b09c      	sub	sp, #112	@ 0x70
 800691a:	ab1d      	add	r3, sp, #116	@ 0x74
 800691c:	9002      	str	r0, [sp, #8]
 800691e:	9006      	str	r0, [sp, #24]
 8006920:	9107      	str	r1, [sp, #28]
 8006922:	9104      	str	r1, [sp, #16]
 8006924:	4808      	ldr	r0, [pc, #32]	@ (8006948 <siprintf+0x38>)
 8006926:	4909      	ldr	r1, [pc, #36]	@ (800694c <siprintf+0x3c>)
 8006928:	f853 2b04 	ldr.w	r2, [r3], #4
 800692c:	9105      	str	r1, [sp, #20]
 800692e:	6800      	ldr	r0, [r0, #0]
 8006930:	a902      	add	r1, sp, #8
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	f001 fc0a 	bl	800814c <_svfiprintf_r>
 8006938:	2200      	movs	r2, #0
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	b01c      	add	sp, #112	@ 0x70
 8006940:	f85d eb04 	ldr.w	lr, [sp], #4
 8006944:	b003      	add	sp, #12
 8006946:	4770      	bx	lr
 8006948:	20000020 	.word	0x20000020
 800694c:	ffff0208 	.word	0xffff0208

08006950 <__sread>:
 8006950:	b510      	push	{r4, lr}
 8006952:	460c      	mov	r4, r1
 8006954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006958:	f000 f86c 	bl	8006a34 <_read_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	bfab      	itete	ge
 8006960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006962:	89a3      	ldrhlt	r3, [r4, #12]
 8006964:	181b      	addge	r3, r3, r0
 8006966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800696a:	bfac      	ite	ge
 800696c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800696e:	81a3      	strhlt	r3, [r4, #12]
 8006970:	bd10      	pop	{r4, pc}

08006972 <__swrite>:
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	461f      	mov	r7, r3
 8006978:	898b      	ldrh	r3, [r1, #12]
 800697a:	4605      	mov	r5, r0
 800697c:	05db      	lsls	r3, r3, #23
 800697e:	460c      	mov	r4, r1
 8006980:	4616      	mov	r6, r2
 8006982:	d505      	bpl.n	8006990 <__swrite+0x1e>
 8006984:	2302      	movs	r3, #2
 8006986:	2200      	movs	r2, #0
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	f000 f840 	bl	8006a10 <_lseek_r>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	4632      	mov	r2, r6
 8006994:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006998:	81a3      	strh	r3, [r4, #12]
 800699a:	4628      	mov	r0, r5
 800699c:	463b      	mov	r3, r7
 800699e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	f000 b857 	b.w	8006a58 <_write_r>

080069aa <__sseek>:
 80069aa:	b510      	push	{r4, lr}
 80069ac:	460c      	mov	r4, r1
 80069ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b2:	f000 f82d 	bl	8006a10 <_lseek_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	bf15      	itete	ne
 80069bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069c6:	81a3      	strheq	r3, [r4, #12]
 80069c8:	bf18      	it	ne
 80069ca:	81a3      	strhne	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__sclose>:
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 b80d 	b.w	80069f0 <_close_r>

080069d6 <memset>:
 80069d6:	4603      	mov	r3, r0
 80069d8:	4402      	add	r2, r0
 80069da:	4293      	cmp	r3, r2
 80069dc:	d100      	bne.n	80069e0 <memset+0xa>
 80069de:	4770      	bx	lr
 80069e0:	f803 1b01 	strb.w	r1, [r3], #1
 80069e4:	e7f9      	b.n	80069da <memset+0x4>
	...

080069e8 <_localeconv_r>:
 80069e8:	4800      	ldr	r0, [pc, #0]	@ (80069ec <_localeconv_r+0x4>)
 80069ea:	4770      	bx	lr
 80069ec:	20000160 	.word	0x20000160

080069f0 <_close_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	2300      	movs	r3, #0
 80069f4:	4d05      	ldr	r5, [pc, #20]	@ (8006a0c <_close_r+0x1c>)
 80069f6:	4604      	mov	r4, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	f7fb fdef 	bl	80025de <_close>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_close_r+0x1a>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_close_r+0x1a>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	20002134 	.word	0x20002134

08006a10 <_lseek_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4d05      	ldr	r5, [pc, #20]	@ (8006a30 <_lseek_r+0x20>)
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f7fb fe01 	bl	8002626 <_lseek>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d102      	bne.n	8006a2e <_lseek_r+0x1e>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	b103      	cbz	r3, 8006a2e <_lseek_r+0x1e>
 8006a2c:	6023      	str	r3, [r4, #0]
 8006a2e:	bd38      	pop	{r3, r4, r5, pc}
 8006a30:	20002134 	.word	0x20002134

08006a34 <_read_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4604      	mov	r4, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4d05      	ldr	r5, [pc, #20]	@ (8006a54 <_read_r+0x20>)
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fb fd92 	bl	800256c <_read>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_read_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_read_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	20002134 	.word	0x20002134

08006a58 <_write_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	2200      	movs	r2, #0
 8006a62:	4d05      	ldr	r5, [pc, #20]	@ (8006a78 <_write_r+0x20>)
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f7fb fd9d 	bl	80025a6 <_write>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_write_r+0x1e>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_write_r+0x1e>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20002134 	.word	0x20002134

08006a7c <__errno>:
 8006a7c:	4b01      	ldr	r3, [pc, #4]	@ (8006a84 <__errno+0x8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000020 	.word	0x20000020

08006a88 <__libc_init_array>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	4d0c      	ldr	r5, [pc, #48]	@ (8006ac0 <__libc_init_array+0x38>)
 8006a8e:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac4 <__libc_init_array+0x3c>)
 8006a90:	1b64      	subs	r4, r4, r5
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	d109      	bne.n	8006aac <__libc_init_array+0x24>
 8006a98:	f002 f96c 	bl	8008d74 <_init>
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	4d0a      	ldr	r5, [pc, #40]	@ (8006ac8 <__libc_init_array+0x40>)
 8006aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8006acc <__libc_init_array+0x44>)
 8006aa2:	1b64      	subs	r4, r4, r5
 8006aa4:	10a4      	asrs	r4, r4, #2
 8006aa6:	42a6      	cmp	r6, r4
 8006aa8:	d105      	bne.n	8006ab6 <__libc_init_array+0x2e>
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab0:	4798      	blx	r3
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7ee      	b.n	8006a94 <__libc_init_array+0xc>
 8006ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aba:	4798      	blx	r3
 8006abc:	3601      	adds	r6, #1
 8006abe:	e7f2      	b.n	8006aa6 <__libc_init_array+0x1e>
 8006ac0:	08009790 	.word	0x08009790
 8006ac4:	08009790 	.word	0x08009790
 8006ac8:	08009790 	.word	0x08009790
 8006acc:	08009794 	.word	0x08009794

08006ad0 <__retarget_lock_init_recursive>:
 8006ad0:	4770      	bx	lr

08006ad2 <__retarget_lock_acquire_recursive>:
 8006ad2:	4770      	bx	lr

08006ad4 <__retarget_lock_release_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <memchr>:
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	b2c9      	uxtb	r1, r1
 8006adc:	4402      	add	r2, r0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	d101      	bne.n	8006ae8 <memchr+0x12>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e003      	b.n	8006af0 <memchr+0x1a>
 8006ae8:	7804      	ldrb	r4, [r0, #0]
 8006aea:	3301      	adds	r3, #1
 8006aec:	428c      	cmp	r4, r1
 8006aee:	d1f6      	bne.n	8006ade <memchr+0x8>
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <quorem>:
 8006af2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af6:	6903      	ldr	r3, [r0, #16]
 8006af8:	690c      	ldr	r4, [r1, #16]
 8006afa:	4607      	mov	r7, r0
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	db7e      	blt.n	8006bfe <quorem+0x10c>
 8006b00:	3c01      	subs	r4, #1
 8006b02:	00a3      	lsls	r3, r4, #2
 8006b04:	f100 0514 	add.w	r5, r0, #20
 8006b08:	f101 0814 	add.w	r8, r1, #20
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b12:	9301      	str	r3, [sp, #4]
 8006b14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b28:	d32e      	bcc.n	8006b88 <quorem+0x96>
 8006b2a:	f04f 0a00 	mov.w	sl, #0
 8006b2e:	46c4      	mov	ip, r8
 8006b30:	46ae      	mov	lr, r5
 8006b32:	46d3      	mov	fp, sl
 8006b34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b38:	b298      	uxth	r0, r3
 8006b3a:	fb06 a000 	mla	r0, r6, r0, sl
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	0c02      	lsrs	r2, r0, #16
 8006b42:	fb06 2303 	mla	r3, r6, r3, r2
 8006b46:	f8de 2000 	ldr.w	r2, [lr]
 8006b4a:	b280      	uxth	r0, r0
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	1a12      	subs	r2, r2, r0
 8006b50:	445a      	add	r2, fp
 8006b52:	f8de 0000 	ldr.w	r0, [lr]
 8006b56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b64:	b292      	uxth	r2, r2
 8006b66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b6a:	45e1      	cmp	r9, ip
 8006b6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b70:	f84e 2b04 	str.w	r2, [lr], #4
 8006b74:	d2de      	bcs.n	8006b34 <quorem+0x42>
 8006b76:	9b00      	ldr	r3, [sp, #0]
 8006b78:	58eb      	ldr	r3, [r5, r3]
 8006b7a:	b92b      	cbnz	r3, 8006b88 <quorem+0x96>
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	3b04      	subs	r3, #4
 8006b80:	429d      	cmp	r5, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	d32f      	bcc.n	8006be6 <quorem+0xf4>
 8006b86:	613c      	str	r4, [r7, #16]
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f001 f97b 	bl	8007e84 <__mcmp>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	db25      	blt.n	8006bde <quorem+0xec>
 8006b92:	4629      	mov	r1, r5
 8006b94:	2000      	movs	r0, #0
 8006b96:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b9a:	f8d1 c000 	ldr.w	ip, [r1]
 8006b9e:	fa1f fe82 	uxth.w	lr, r2
 8006ba2:	fa1f f38c 	uxth.w	r3, ip
 8006ba6:	eba3 030e 	sub.w	r3, r3, lr
 8006baa:	4403      	add	r3, r0
 8006bac:	0c12      	lsrs	r2, r2, #16
 8006bae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bbc:	45c1      	cmp	r9, r8
 8006bbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bc2:	f841 3b04 	str.w	r3, [r1], #4
 8006bc6:	d2e6      	bcs.n	8006b96 <quorem+0xa4>
 8006bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bd0:	b922      	cbnz	r2, 8006bdc <quorem+0xea>
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	429d      	cmp	r5, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	d30b      	bcc.n	8006bf2 <quorem+0x100>
 8006bda:	613c      	str	r4, [r7, #16]
 8006bdc:	3601      	adds	r6, #1
 8006bde:	4630      	mov	r0, r6
 8006be0:	b003      	add	sp, #12
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	3b04      	subs	r3, #4
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	d1cb      	bne.n	8006b86 <quorem+0x94>
 8006bee:	3c01      	subs	r4, #1
 8006bf0:	e7c6      	b.n	8006b80 <quorem+0x8e>
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	3b04      	subs	r3, #4
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d1ef      	bne.n	8006bda <quorem+0xe8>
 8006bfa:	3c01      	subs	r4, #1
 8006bfc:	e7ea      	b.n	8006bd4 <quorem+0xe2>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	e7ee      	b.n	8006be0 <quorem+0xee>
 8006c02:	0000      	movs	r0, r0
 8006c04:	0000      	movs	r0, r0
	...

08006c08 <_dtoa_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	69c7      	ldr	r7, [r0, #28]
 8006c12:	b097      	sub	sp, #92	@ 0x5c
 8006c14:	4683      	mov	fp, r0
 8006c16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006c1c:	b97f      	cbnz	r7, 8006c3e <_dtoa_r+0x36>
 8006c1e:	2010      	movs	r0, #16
 8006c20:	f000 fe02 	bl	8007828 <malloc>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c2a:	b920      	cbnz	r0, 8006c36 <_dtoa_r+0x2e>
 8006c2c:	21ef      	movs	r1, #239	@ 0xef
 8006c2e:	4ba8      	ldr	r3, [pc, #672]	@ (8006ed0 <_dtoa_r+0x2c8>)
 8006c30:	48a8      	ldr	r0, [pc, #672]	@ (8006ed4 <_dtoa_r+0x2cc>)
 8006c32:	f001 febf 	bl	80089b4 <__assert_func>
 8006c36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c3a:	6007      	str	r7, [r0, #0]
 8006c3c:	60c7      	str	r7, [r0, #12]
 8006c3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	b159      	cbz	r1, 8006c5e <_dtoa_r+0x56>
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4093      	lsls	r3, r2
 8006c4c:	604a      	str	r2, [r1, #4]
 8006c4e:	608b      	str	r3, [r1, #8]
 8006c50:	4658      	mov	r0, fp
 8006c52:	f000 fedf 	bl	8007a14 <_Bfree>
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	1e2b      	subs	r3, r5, #0
 8006c60:	bfaf      	iteee	ge
 8006c62:	2300      	movge	r3, #0
 8006c64:	2201      	movlt	r2, #1
 8006c66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c6a:	9303      	strlt	r3, [sp, #12]
 8006c6c:	bfa8      	it	ge
 8006c6e:	6033      	strge	r3, [r6, #0]
 8006c70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c74:	4b98      	ldr	r3, [pc, #608]	@ (8006ed8 <_dtoa_r+0x2d0>)
 8006c76:	bfb8      	it	lt
 8006c78:	6032      	strlt	r2, [r6, #0]
 8006c7a:	ea33 0308 	bics.w	r3, r3, r8
 8006c7e:	d112      	bne.n	8006ca6 <_dtoa_r+0x9e>
 8006c80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	f000 8550 	beq.w	8007732 <_dtoa_r+0xb2a>
 8006c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006edc <_dtoa_r+0x2d4>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 8552 	beq.w	8007742 <_dtoa_r+0xb3a>
 8006c9e:	f10a 0303 	add.w	r3, sl, #3
 8006ca2:	f000 bd4c 	b.w	800773e <_dtoa_r+0xb36>
 8006ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006caa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f7f9 ff2b 	bl	8000b10 <__aeabi_dcmpeq>
 8006cba:	4607      	mov	r7, r0
 8006cbc:	b158      	cbz	r0, 8006cd6 <_dtoa_r+0xce>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006cc2:	6013      	str	r3, [r2, #0]
 8006cc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cc6:	b113      	cbz	r3, 8006cce <_dtoa_r+0xc6>
 8006cc8:	4b85      	ldr	r3, [pc, #532]	@ (8006ee0 <_dtoa_r+0x2d8>)
 8006cca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006ee4 <_dtoa_r+0x2dc>
 8006cd2:	f000 bd36 	b.w	8007742 <_dtoa_r+0xb3a>
 8006cd6:	ab14      	add	r3, sp, #80	@ 0x50
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	ab15      	add	r3, sp, #84	@ 0x54
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4658      	mov	r0, fp
 8006ce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ce4:	f001 f97e 	bl	8007fe4 <__d2b>
 8006ce8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006cec:	4681      	mov	r9, r0
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d077      	beq.n	8006de2 <_dtoa_r+0x1da>
 8006cf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d08:	9712      	str	r7, [sp, #72]	@ 0x48
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4b76      	ldr	r3, [pc, #472]	@ (8006ee8 <_dtoa_r+0x2e0>)
 8006d10:	f7f9 fade 	bl	80002d0 <__aeabi_dsub>
 8006d14:	a368      	add	r3, pc, #416	@ (adr r3, 8006eb8 <_dtoa_r+0x2b0>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fc91 	bl	8000640 <__aeabi_dmul>
 8006d1e:	a368      	add	r3, pc, #416	@ (adr r3, 8006ec0 <_dtoa_r+0x2b8>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fad6 	bl	80002d4 <__adddf3>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	f7f9 fc1d 	bl	800056c <__aeabi_i2d>
 8006d32:	a365      	add	r3, pc, #404	@ (adr r3, 8006ec8 <_dtoa_r+0x2c0>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f7f9 fc82 	bl	8000640 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4620      	mov	r0, r4
 8006d42:	4629      	mov	r1, r5
 8006d44:	f7f9 fac6 	bl	80002d4 <__adddf3>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	f7f9 ff28 	bl	8000ba0 <__aeabi_d2iz>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4607      	mov	r7, r0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fee3 	bl	8000b24 <__aeabi_dcmplt>
 8006d5e:	b140      	cbz	r0, 8006d72 <_dtoa_r+0x16a>
 8006d60:	4638      	mov	r0, r7
 8006d62:	f7f9 fc03 	bl	800056c <__aeabi_i2d>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 fed1 	bl	8000b10 <__aeabi_dcmpeq>
 8006d6e:	b900      	cbnz	r0, 8006d72 <_dtoa_r+0x16a>
 8006d70:	3f01      	subs	r7, #1
 8006d72:	2f16      	cmp	r7, #22
 8006d74:	d853      	bhi.n	8006e1e <_dtoa_r+0x216>
 8006d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8006eec <_dtoa_r+0x2e4>)
 8006d7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fece 	bl	8000b24 <__aeabi_dcmplt>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d04a      	beq.n	8006e22 <_dtoa_r+0x21a>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	3f01      	subs	r7, #1
 8006d90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d94:	1b9b      	subs	r3, r3, r6
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	bf46      	itte	mi
 8006d9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d9e:	2300      	movmi	r3, #0
 8006da0:	f04f 0800 	movpl.w	r8, #0
 8006da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006da6:	bf48      	it	mi
 8006da8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006daa:	2f00      	cmp	r7, #0
 8006dac:	db3b      	blt.n	8006e26 <_dtoa_r+0x21e>
 8006dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db0:	970e      	str	r7, [sp, #56]	@ 0x38
 8006db2:	443b      	add	r3, r7
 8006db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db6:	2300      	movs	r3, #0
 8006db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dbc:	2b09      	cmp	r3, #9
 8006dbe:	d866      	bhi.n	8006e8e <_dtoa_r+0x286>
 8006dc0:	2b05      	cmp	r3, #5
 8006dc2:	bfc4      	itt	gt
 8006dc4:	3b04      	subgt	r3, #4
 8006dc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006dc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dca:	bfc8      	it	gt
 8006dcc:	2400      	movgt	r4, #0
 8006dce:	f1a3 0302 	sub.w	r3, r3, #2
 8006dd2:	bfd8      	it	le
 8006dd4:	2401      	movle	r4, #1
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d864      	bhi.n	8006ea4 <_dtoa_r+0x29c>
 8006dda:	e8df f003 	tbb	[pc, r3]
 8006dde:	382b      	.short	0x382b
 8006de0:	5636      	.short	0x5636
 8006de2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006de6:	441e      	add	r6, r3
 8006de8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	bfc1      	itttt	gt
 8006df0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006df4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006df8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e00:	bfd6      	itet	le
 8006e02:	f1c3 0320 	rsble	r3, r3, #32
 8006e06:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e0a:	fa04 f003 	lslle.w	r0, r4, r3
 8006e0e:	f7f9 fb9d 	bl	800054c <__aeabi_ui2d>
 8006e12:	2201      	movs	r2, #1
 8006e14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e18:	3e01      	subs	r6, #1
 8006e1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e1c:	e775      	b.n	8006d0a <_dtoa_r+0x102>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e7b6      	b.n	8006d90 <_dtoa_r+0x188>
 8006e22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006e24:	e7b5      	b.n	8006d92 <_dtoa_r+0x18a>
 8006e26:	427b      	negs	r3, r7
 8006e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	eba8 0807 	sub.w	r8, r8, r7
 8006e30:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e32:	e7c2      	b.n	8006dba <_dtoa_r+0x1b2>
 8006e34:	2300      	movs	r3, #0
 8006e36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dc35      	bgt.n	8006eaa <_dtoa_r+0x2a2>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	461a      	mov	r2, r3
 8006e42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e46:	9221      	str	r2, [sp, #132]	@ 0x84
 8006e48:	e00b      	b.n	8006e62 <_dtoa_r+0x25a>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e7f3      	b.n	8006e36 <_dtoa_r+0x22e>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	9308      	str	r3, [sp, #32]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	9307      	str	r3, [sp, #28]
 8006e5e:	bfb8      	it	lt
 8006e60:	2301      	movlt	r3, #1
 8006e62:	2100      	movs	r1, #0
 8006e64:	2204      	movs	r2, #4
 8006e66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e6a:	f102 0514 	add.w	r5, r2, #20
 8006e6e:	429d      	cmp	r5, r3
 8006e70:	d91f      	bls.n	8006eb2 <_dtoa_r+0x2aa>
 8006e72:	6041      	str	r1, [r0, #4]
 8006e74:	4658      	mov	r0, fp
 8006e76:	f000 fd8d 	bl	8007994 <_Balloc>
 8006e7a:	4682      	mov	sl, r0
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d139      	bne.n	8006ef4 <_dtoa_r+0x2ec>
 8006e80:	4602      	mov	r2, r0
 8006e82:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e86:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef0 <_dtoa_r+0x2e8>)
 8006e88:	e6d2      	b.n	8006c30 <_dtoa_r+0x28>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7e0      	b.n	8006e50 <_dtoa_r+0x248>
 8006e8e:	2401      	movs	r4, #1
 8006e90:	2300      	movs	r3, #0
 8006e92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e94:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e96:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ea0:	2312      	movs	r3, #18
 8006ea2:	e7d0      	b.n	8006e46 <_dtoa_r+0x23e>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ea8:	e7f5      	b.n	8006e96 <_dtoa_r+0x28e>
 8006eaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006eb0:	e7d7      	b.n	8006e62 <_dtoa_r+0x25a>
 8006eb2:	3101      	adds	r1, #1
 8006eb4:	0052      	lsls	r2, r2, #1
 8006eb6:	e7d8      	b.n	8006e6a <_dtoa_r+0x262>
 8006eb8:	636f4361 	.word	0x636f4361
 8006ebc:	3fd287a7 	.word	0x3fd287a7
 8006ec0:	8b60c8b3 	.word	0x8b60c8b3
 8006ec4:	3fc68a28 	.word	0x3fc68a28
 8006ec8:	509f79fb 	.word	0x509f79fb
 8006ecc:	3fd34413 	.word	0x3fd34413
 8006ed0:	0800945b 	.word	0x0800945b
 8006ed4:	08009472 	.word	0x08009472
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	08009457 	.word	0x08009457
 8006ee0:	0800942b 	.word	0x0800942b
 8006ee4:	0800942a 	.word	0x0800942a
 8006ee8:	3ff80000 	.word	0x3ff80000
 8006eec:	08009568 	.word	0x08009568
 8006ef0:	080094ca 	.word	0x080094ca
 8006ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ef8:	6018      	str	r0, [r3, #0]
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	2b0e      	cmp	r3, #14
 8006efe:	f200 80a4 	bhi.w	800704a <_dtoa_r+0x442>
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	f000 80a1 	beq.w	800704a <_dtoa_r+0x442>
 8006f08:	2f00      	cmp	r7, #0
 8006f0a:	dd33      	ble.n	8006f74 <_dtoa_r+0x36c>
 8006f0c:	4b86      	ldr	r3, [pc, #536]	@ (8007128 <_dtoa_r+0x520>)
 8006f0e:	f007 020f 	and.w	r2, r7, #15
 8006f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f16:	05f8      	lsls	r0, r7, #23
 8006f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f24:	d516      	bpl.n	8006f54 <_dtoa_r+0x34c>
 8006f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f2a:	4b80      	ldr	r3, [pc, #512]	@ (800712c <_dtoa_r+0x524>)
 8006f2c:	2603      	movs	r6, #3
 8006f2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f32:	f7f9 fcaf 	bl	8000894 <__aeabi_ddiv>
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	f004 040f 	and.w	r4, r4, #15
 8006f3e:	4d7b      	ldr	r5, [pc, #492]	@ (800712c <_dtoa_r+0x524>)
 8006f40:	b954      	cbnz	r4, 8006f58 <_dtoa_r+0x350>
 8006f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4a:	f7f9 fca3 	bl	8000894 <__aeabi_ddiv>
 8006f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f52:	e028      	b.n	8006fa6 <_dtoa_r+0x39e>
 8006f54:	2602      	movs	r6, #2
 8006f56:	e7f2      	b.n	8006f3e <_dtoa_r+0x336>
 8006f58:	07e1      	lsls	r1, r4, #31
 8006f5a:	d508      	bpl.n	8006f6e <_dtoa_r+0x366>
 8006f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f64:	f7f9 fb6c 	bl	8000640 <__aeabi_dmul>
 8006f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	1064      	asrs	r4, r4, #1
 8006f70:	3508      	adds	r5, #8
 8006f72:	e7e5      	b.n	8006f40 <_dtoa_r+0x338>
 8006f74:	f000 80d2 	beq.w	800711c <_dtoa_r+0x514>
 8006f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7c:	427c      	negs	r4, r7
 8006f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007128 <_dtoa_r+0x520>)
 8006f80:	f004 020f 	and.w	r2, r4, #15
 8006f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	f7f9 fb58 	bl	8000640 <__aeabi_dmul>
 8006f90:	2602      	movs	r6, #2
 8006f92:	2300      	movs	r3, #0
 8006f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f98:	4d64      	ldr	r5, [pc, #400]	@ (800712c <_dtoa_r+0x524>)
 8006f9a:	1124      	asrs	r4, r4, #4
 8006f9c:	2c00      	cmp	r4, #0
 8006f9e:	f040 80b2 	bne.w	8007106 <_dtoa_r+0x4fe>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1d3      	bne.n	8006f4e <_dtoa_r+0x346>
 8006fa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006faa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 80b7 	beq.w	8007120 <_dtoa_r+0x518>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8007130 <_dtoa_r+0x528>)
 8006fba:	f7f9 fdb3 	bl	8000b24 <__aeabi_dcmplt>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	f000 80ae 	beq.w	8007120 <_dtoa_r+0x518>
 8006fc4:	9b07      	ldr	r3, [sp, #28]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80aa 	beq.w	8007120 <_dtoa_r+0x518>
 8006fcc:	9b08      	ldr	r3, [sp, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dd37      	ble.n	8007042 <_dtoa_r+0x43a>
 8006fd2:	1e7b      	subs	r3, r7, #1
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	9304      	str	r3, [sp, #16]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4b55      	ldr	r3, [pc, #340]	@ (8007134 <_dtoa_r+0x52c>)
 8006fde:	f7f9 fb2f 	bl	8000640 <__aeabi_dmul>
 8006fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe6:	9c08      	ldr	r4, [sp, #32]
 8006fe8:	3601      	adds	r6, #1
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7f9 fabe 	bl	800056c <__aeabi_i2d>
 8006ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ff4:	f7f9 fb24 	bl	8000640 <__aeabi_dmul>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8007138 <_dtoa_r+0x530>)
 8006ffc:	f7f9 f96a 	bl	80002d4 <__adddf3>
 8007000:	4605      	mov	r5, r0
 8007002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007006:	2c00      	cmp	r4, #0
 8007008:	f040 809a 	bne.w	8007140 <_dtoa_r+0x538>
 800700c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	4b4a      	ldr	r3, [pc, #296]	@ (800713c <_dtoa_r+0x534>)
 8007014:	f7f9 f95c 	bl	80002d0 <__aeabi_dsub>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007020:	462a      	mov	r2, r5
 8007022:	4633      	mov	r3, r6
 8007024:	f7f9 fd9c 	bl	8000b60 <__aeabi_dcmpgt>
 8007028:	2800      	cmp	r0, #0
 800702a:	f040 828e 	bne.w	800754a <_dtoa_r+0x942>
 800702e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007032:	462a      	mov	r2, r5
 8007034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007038:	f7f9 fd74 	bl	8000b24 <__aeabi_dcmplt>
 800703c:	2800      	cmp	r0, #0
 800703e:	f040 8127 	bne.w	8007290 <_dtoa_r+0x688>
 8007042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800704a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800704c:	2b00      	cmp	r3, #0
 800704e:	f2c0 8163 	blt.w	8007318 <_dtoa_r+0x710>
 8007052:	2f0e      	cmp	r7, #14
 8007054:	f300 8160 	bgt.w	8007318 <_dtoa_r+0x710>
 8007058:	4b33      	ldr	r3, [pc, #204]	@ (8007128 <_dtoa_r+0x520>)
 800705a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800705e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007062:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007066:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007068:	2b00      	cmp	r3, #0
 800706a:	da03      	bge.n	8007074 <_dtoa_r+0x46c>
 800706c:	9b07      	ldr	r3, [sp, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f340 8100 	ble.w	8007274 <_dtoa_r+0x66c>
 8007074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007078:	4656      	mov	r6, sl
 800707a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fc07 	bl	8000894 <__aeabi_ddiv>
 8007086:	f7f9 fd8b 	bl	8000ba0 <__aeabi_d2iz>
 800708a:	4680      	mov	r8, r0
 800708c:	f7f9 fa6e 	bl	800056c <__aeabi_i2d>
 8007090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007094:	f7f9 fad4 	bl	8000640 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 f916 	bl	80002d0 <__aeabi_dsub>
 80070a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070a8:	9d07      	ldr	r5, [sp, #28]
 80070aa:	f806 4b01 	strb.w	r4, [r6], #1
 80070ae:	eba6 040a 	sub.w	r4, r6, sl
 80070b2:	42a5      	cmp	r5, r4
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	f040 8116 	bne.w	80072e8 <_dtoa_r+0x6e0>
 80070bc:	f7f9 f90a 	bl	80002d4 <__adddf3>
 80070c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	f7f9 fd4a 	bl	8000b60 <__aeabi_dcmpgt>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	f040 80f8 	bne.w	80072c2 <_dtoa_r+0x6ba>
 80070d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 fd19 	bl	8000b10 <__aeabi_dcmpeq>
 80070de:	b118      	cbz	r0, 80070e8 <_dtoa_r+0x4e0>
 80070e0:	f018 0f01 	tst.w	r8, #1
 80070e4:	f040 80ed 	bne.w	80072c2 <_dtoa_r+0x6ba>
 80070e8:	4649      	mov	r1, r9
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 fc92 	bl	8007a14 <_Bfree>
 80070f0:	2300      	movs	r3, #0
 80070f2:	7033      	strb	r3, [r6, #0]
 80070f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80070f6:	3701      	adds	r7, #1
 80070f8:	601f      	str	r7, [r3, #0]
 80070fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8320 	beq.w	8007742 <_dtoa_r+0xb3a>
 8007102:	601e      	str	r6, [r3, #0]
 8007104:	e31d      	b.n	8007742 <_dtoa_r+0xb3a>
 8007106:	07e2      	lsls	r2, r4, #31
 8007108:	d505      	bpl.n	8007116 <_dtoa_r+0x50e>
 800710a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800710e:	f7f9 fa97 	bl	8000640 <__aeabi_dmul>
 8007112:	2301      	movs	r3, #1
 8007114:	3601      	adds	r6, #1
 8007116:	1064      	asrs	r4, r4, #1
 8007118:	3508      	adds	r5, #8
 800711a:	e73f      	b.n	8006f9c <_dtoa_r+0x394>
 800711c:	2602      	movs	r6, #2
 800711e:	e742      	b.n	8006fa6 <_dtoa_r+0x39e>
 8007120:	9c07      	ldr	r4, [sp, #28]
 8007122:	9704      	str	r7, [sp, #16]
 8007124:	e761      	b.n	8006fea <_dtoa_r+0x3e2>
 8007126:	bf00      	nop
 8007128:	08009568 	.word	0x08009568
 800712c:	08009540 	.word	0x08009540
 8007130:	3ff00000 	.word	0x3ff00000
 8007134:	40240000 	.word	0x40240000
 8007138:	401c0000 	.word	0x401c0000
 800713c:	40140000 	.word	0x40140000
 8007140:	4b70      	ldr	r3, [pc, #448]	@ (8007304 <_dtoa_r+0x6fc>)
 8007142:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800714c:	4454      	add	r4, sl
 800714e:	2900      	cmp	r1, #0
 8007150:	d045      	beq.n	80071de <_dtoa_r+0x5d6>
 8007152:	2000      	movs	r0, #0
 8007154:	496c      	ldr	r1, [pc, #432]	@ (8007308 <_dtoa_r+0x700>)
 8007156:	f7f9 fb9d 	bl	8000894 <__aeabi_ddiv>
 800715a:	4633      	mov	r3, r6
 800715c:	462a      	mov	r2, r5
 800715e:	f7f9 f8b7 	bl	80002d0 <__aeabi_dsub>
 8007162:	4656      	mov	r6, sl
 8007164:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716c:	f7f9 fd18 	bl	8000ba0 <__aeabi_d2iz>
 8007170:	4605      	mov	r5, r0
 8007172:	f7f9 f9fb 	bl	800056c <__aeabi_i2d>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717e:	f7f9 f8a7 	bl	80002d0 <__aeabi_dsub>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	3530      	adds	r5, #48	@ 0x30
 8007188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800718c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007190:	f806 5b01 	strb.w	r5, [r6], #1
 8007194:	f7f9 fcc6 	bl	8000b24 <__aeabi_dcmplt>
 8007198:	2800      	cmp	r0, #0
 800719a:	d163      	bne.n	8007264 <_dtoa_r+0x65c>
 800719c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071a0:	2000      	movs	r0, #0
 80071a2:	495a      	ldr	r1, [pc, #360]	@ (800730c <_dtoa_r+0x704>)
 80071a4:	f7f9 f894 	bl	80002d0 <__aeabi_dsub>
 80071a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071ac:	f7f9 fcba 	bl	8000b24 <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f040 8087 	bne.w	80072c4 <_dtoa_r+0x6bc>
 80071b6:	42a6      	cmp	r6, r4
 80071b8:	f43f af43 	beq.w	8007042 <_dtoa_r+0x43a>
 80071bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071c0:	2200      	movs	r2, #0
 80071c2:	4b53      	ldr	r3, [pc, #332]	@ (8007310 <_dtoa_r+0x708>)
 80071c4:	f7f9 fa3c 	bl	8000640 <__aeabi_dmul>
 80071c8:	2200      	movs	r2, #0
 80071ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007310 <_dtoa_r+0x708>)
 80071d4:	f7f9 fa34 	bl	8000640 <__aeabi_dmul>
 80071d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071dc:	e7c4      	b.n	8007168 <_dtoa_r+0x560>
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	f7f9 fa2d 	bl	8000640 <__aeabi_dmul>
 80071e6:	4656      	mov	r6, sl
 80071e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80071ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f2:	f7f9 fcd5 	bl	8000ba0 <__aeabi_d2iz>
 80071f6:	4605      	mov	r5, r0
 80071f8:	f7f9 f9b8 	bl	800056c <__aeabi_i2d>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007204:	f7f9 f864 	bl	80002d0 <__aeabi_dsub>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	3530      	adds	r5, #48	@ 0x30
 800720e:	f806 5b01 	strb.w	r5, [r6], #1
 8007212:	42a6      	cmp	r6, r4
 8007214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	d124      	bne.n	8007268 <_dtoa_r+0x660>
 800721e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007222:	4b39      	ldr	r3, [pc, #228]	@ (8007308 <_dtoa_r+0x700>)
 8007224:	f7f9 f856 	bl	80002d4 <__adddf3>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007230:	f7f9 fc96 	bl	8000b60 <__aeabi_dcmpgt>
 8007234:	2800      	cmp	r0, #0
 8007236:	d145      	bne.n	80072c4 <_dtoa_r+0x6bc>
 8007238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800723c:	2000      	movs	r0, #0
 800723e:	4932      	ldr	r1, [pc, #200]	@ (8007308 <_dtoa_r+0x700>)
 8007240:	f7f9 f846 	bl	80002d0 <__aeabi_dsub>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724c:	f7f9 fc6a 	bl	8000b24 <__aeabi_dcmplt>
 8007250:	2800      	cmp	r0, #0
 8007252:	f43f aef6 	beq.w	8007042 <_dtoa_r+0x43a>
 8007256:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007258:	1e73      	subs	r3, r6, #1
 800725a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800725c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007260:	2b30      	cmp	r3, #48	@ 0x30
 8007262:	d0f8      	beq.n	8007256 <_dtoa_r+0x64e>
 8007264:	9f04      	ldr	r7, [sp, #16]
 8007266:	e73f      	b.n	80070e8 <_dtoa_r+0x4e0>
 8007268:	4b29      	ldr	r3, [pc, #164]	@ (8007310 <_dtoa_r+0x708>)
 800726a:	f7f9 f9e9 	bl	8000640 <__aeabi_dmul>
 800726e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007272:	e7bc      	b.n	80071ee <_dtoa_r+0x5e6>
 8007274:	d10c      	bne.n	8007290 <_dtoa_r+0x688>
 8007276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800727a:	2200      	movs	r2, #0
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <_dtoa_r+0x70c>)
 800727e:	f7f9 f9df 	bl	8000640 <__aeabi_dmul>
 8007282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007286:	f7f9 fc61 	bl	8000b4c <__aeabi_dcmpge>
 800728a:	2800      	cmp	r0, #0
 800728c:	f000 815b 	beq.w	8007546 <_dtoa_r+0x93e>
 8007290:	2400      	movs	r4, #0
 8007292:	4625      	mov	r5, r4
 8007294:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007296:	4656      	mov	r6, sl
 8007298:	43db      	mvns	r3, r3
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	2700      	movs	r7, #0
 800729e:	4621      	mov	r1, r4
 80072a0:	4658      	mov	r0, fp
 80072a2:	f000 fbb7 	bl	8007a14 <_Bfree>
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	d0dc      	beq.n	8007264 <_dtoa_r+0x65c>
 80072aa:	b12f      	cbz	r7, 80072b8 <_dtoa_r+0x6b0>
 80072ac:	42af      	cmp	r7, r5
 80072ae:	d003      	beq.n	80072b8 <_dtoa_r+0x6b0>
 80072b0:	4639      	mov	r1, r7
 80072b2:	4658      	mov	r0, fp
 80072b4:	f000 fbae 	bl	8007a14 <_Bfree>
 80072b8:	4629      	mov	r1, r5
 80072ba:	4658      	mov	r0, fp
 80072bc:	f000 fbaa 	bl	8007a14 <_Bfree>
 80072c0:	e7d0      	b.n	8007264 <_dtoa_r+0x65c>
 80072c2:	9704      	str	r7, [sp, #16]
 80072c4:	4633      	mov	r3, r6
 80072c6:	461e      	mov	r6, r3
 80072c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072cc:	2a39      	cmp	r2, #57	@ 0x39
 80072ce:	d107      	bne.n	80072e0 <_dtoa_r+0x6d8>
 80072d0:	459a      	cmp	sl, r3
 80072d2:	d1f8      	bne.n	80072c6 <_dtoa_r+0x6be>
 80072d4:	9a04      	ldr	r2, [sp, #16]
 80072d6:	3201      	adds	r2, #1
 80072d8:	9204      	str	r2, [sp, #16]
 80072da:	2230      	movs	r2, #48	@ 0x30
 80072dc:	f88a 2000 	strb.w	r2, [sl]
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	3201      	adds	r2, #1
 80072e4:	701a      	strb	r2, [r3, #0]
 80072e6:	e7bd      	b.n	8007264 <_dtoa_r+0x65c>
 80072e8:	2200      	movs	r2, #0
 80072ea:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <_dtoa_r+0x708>)
 80072ec:	f7f9 f9a8 	bl	8000640 <__aeabi_dmul>
 80072f0:	2200      	movs	r2, #0
 80072f2:	2300      	movs	r3, #0
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	f7f9 fc0a 	bl	8000b10 <__aeabi_dcmpeq>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f43f aebc 	beq.w	800707a <_dtoa_r+0x472>
 8007302:	e6f1      	b.n	80070e8 <_dtoa_r+0x4e0>
 8007304:	08009568 	.word	0x08009568
 8007308:	3fe00000 	.word	0x3fe00000
 800730c:	3ff00000 	.word	0x3ff00000
 8007310:	40240000 	.word	0x40240000
 8007314:	40140000 	.word	0x40140000
 8007318:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800731a:	2a00      	cmp	r2, #0
 800731c:	f000 80db 	beq.w	80074d6 <_dtoa_r+0x8ce>
 8007320:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007322:	2a01      	cmp	r2, #1
 8007324:	f300 80bf 	bgt.w	80074a6 <_dtoa_r+0x89e>
 8007328:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800732a:	2a00      	cmp	r2, #0
 800732c:	f000 80b7 	beq.w	800749e <_dtoa_r+0x896>
 8007330:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007334:	4646      	mov	r6, r8
 8007336:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800733a:	2101      	movs	r1, #1
 800733c:	441a      	add	r2, r3
 800733e:	4658      	mov	r0, fp
 8007340:	4498      	add	r8, r3
 8007342:	9209      	str	r2, [sp, #36]	@ 0x24
 8007344:	f000 fc1a 	bl	8007b7c <__i2b>
 8007348:	4605      	mov	r5, r0
 800734a:	b15e      	cbz	r6, 8007364 <_dtoa_r+0x75c>
 800734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	dd08      	ble.n	8007364 <_dtoa_r+0x75c>
 8007352:	42b3      	cmp	r3, r6
 8007354:	bfa8      	it	ge
 8007356:	4633      	movge	r3, r6
 8007358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735a:	eba8 0803 	sub.w	r8, r8, r3
 800735e:	1af6      	subs	r6, r6, r3
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	9309      	str	r3, [sp, #36]	@ 0x24
 8007364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007366:	b1f3      	cbz	r3, 80073a6 <_dtoa_r+0x79e>
 8007368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 80b7 	beq.w	80074de <_dtoa_r+0x8d6>
 8007370:	b18c      	cbz	r4, 8007396 <_dtoa_r+0x78e>
 8007372:	4629      	mov	r1, r5
 8007374:	4622      	mov	r2, r4
 8007376:	4658      	mov	r0, fp
 8007378:	f000 fcbe 	bl	8007cf8 <__pow5mult>
 800737c:	464a      	mov	r2, r9
 800737e:	4601      	mov	r1, r0
 8007380:	4605      	mov	r5, r0
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fc10 	bl	8007ba8 <__multiply>
 8007388:	4649      	mov	r1, r9
 800738a:	9004      	str	r0, [sp, #16]
 800738c:	4658      	mov	r0, fp
 800738e:	f000 fb41 	bl	8007a14 <_Bfree>
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	4699      	mov	r9, r3
 8007396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007398:	1b1a      	subs	r2, r3, r4
 800739a:	d004      	beq.n	80073a6 <_dtoa_r+0x79e>
 800739c:	4649      	mov	r1, r9
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 fcaa 	bl	8007cf8 <__pow5mult>
 80073a4:	4681      	mov	r9, r0
 80073a6:	2101      	movs	r1, #1
 80073a8:	4658      	mov	r0, fp
 80073aa:	f000 fbe7 	bl	8007b7c <__i2b>
 80073ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073b0:	4604      	mov	r4, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 81c9 	beq.w	800774a <_dtoa_r+0xb42>
 80073b8:	461a      	mov	r2, r3
 80073ba:	4601      	mov	r1, r0
 80073bc:	4658      	mov	r0, fp
 80073be:	f000 fc9b 	bl	8007cf8 <__pow5mult>
 80073c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073c4:	4604      	mov	r4, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	f300 808f 	bgt.w	80074ea <_dtoa_r+0x8e2>
 80073cc:	9b02      	ldr	r3, [sp, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 8087 	bne.w	80074e2 <_dtoa_r+0x8da>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 8083 	bne.w	80074e6 <_dtoa_r+0x8de>
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073e6:	0d1b      	lsrs	r3, r3, #20
 80073e8:	051b      	lsls	r3, r3, #20
 80073ea:	b12b      	cbz	r3, 80073f8 <_dtoa_r+0x7f0>
 80073ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ee:	f108 0801 	add.w	r8, r8, #1
 80073f2:	3301      	adds	r3, #1
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f6:	2301      	movs	r3, #1
 80073f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 81aa 	beq.w	8007756 <_dtoa_r+0xb4e>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007408:	6918      	ldr	r0, [r3, #16]
 800740a:	f000 fb6b 	bl	8007ae4 <__hi0bits>
 800740e:	f1c0 0020 	rsb	r0, r0, #32
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	4418      	add	r0, r3
 8007416:	f010 001f 	ands.w	r0, r0, #31
 800741a:	d071      	beq.n	8007500 <_dtoa_r+0x8f8>
 800741c:	f1c0 0320 	rsb	r3, r0, #32
 8007420:	2b04      	cmp	r3, #4
 8007422:	dd65      	ble.n	80074f0 <_dtoa_r+0x8e8>
 8007424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007426:	f1c0 001c 	rsb	r0, r0, #28
 800742a:	4403      	add	r3, r0
 800742c:	4480      	add	r8, r0
 800742e:	4406      	add	r6, r0
 8007430:	9309      	str	r3, [sp, #36]	@ 0x24
 8007432:	f1b8 0f00 	cmp.w	r8, #0
 8007436:	dd05      	ble.n	8007444 <_dtoa_r+0x83c>
 8007438:	4649      	mov	r1, r9
 800743a:	4642      	mov	r2, r8
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fcb5 	bl	8007dac <__lshift>
 8007442:	4681      	mov	r9, r0
 8007444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd05      	ble.n	8007456 <_dtoa_r+0x84e>
 800744a:	4621      	mov	r1, r4
 800744c:	461a      	mov	r2, r3
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fcac 	bl	8007dac <__lshift>
 8007454:	4604      	mov	r4, r0
 8007456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d053      	beq.n	8007504 <_dtoa_r+0x8fc>
 800745c:	4621      	mov	r1, r4
 800745e:	4648      	mov	r0, r9
 8007460:	f000 fd10 	bl	8007e84 <__mcmp>
 8007464:	2800      	cmp	r0, #0
 8007466:	da4d      	bge.n	8007504 <_dtoa_r+0x8fc>
 8007468:	1e7b      	subs	r3, r7, #1
 800746a:	4649      	mov	r1, r9
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	220a      	movs	r2, #10
 8007470:	2300      	movs	r3, #0
 8007472:	4658      	mov	r0, fp
 8007474:	f000 faf0 	bl	8007a58 <__multadd>
 8007478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800747a:	4681      	mov	r9, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 816c 	beq.w	800775a <_dtoa_r+0xb52>
 8007482:	2300      	movs	r3, #0
 8007484:	4629      	mov	r1, r5
 8007486:	220a      	movs	r2, #10
 8007488:	4658      	mov	r0, fp
 800748a:	f000 fae5 	bl	8007a58 <__multadd>
 800748e:	9b08      	ldr	r3, [sp, #32]
 8007490:	4605      	mov	r5, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	dc61      	bgt.n	800755a <_dtoa_r+0x952>
 8007496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007498:	2b02      	cmp	r3, #2
 800749a:	dc3b      	bgt.n	8007514 <_dtoa_r+0x90c>
 800749c:	e05d      	b.n	800755a <_dtoa_r+0x952>
 800749e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074a4:	e746      	b.n	8007334 <_dtoa_r+0x72c>
 80074a6:	9b07      	ldr	r3, [sp, #28]
 80074a8:	1e5c      	subs	r4, r3, #1
 80074aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	bfbf      	itttt	lt
 80074b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80074b4:	1ae3      	sublt	r3, r4, r3
 80074b6:	18d2      	addlt	r2, r2, r3
 80074b8:	bfa8      	it	ge
 80074ba:	1b1c      	subge	r4, r3, r4
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	bfbe      	ittt	lt
 80074c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80074c4:	2400      	movlt	r4, #0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfb5      	itete	lt
 80074ca:	eba8 0603 	sublt.w	r6, r8, r3
 80074ce:	4646      	movge	r6, r8
 80074d0:	2300      	movlt	r3, #0
 80074d2:	9b07      	ldrge	r3, [sp, #28]
 80074d4:	e730      	b.n	8007338 <_dtoa_r+0x730>
 80074d6:	4646      	mov	r6, r8
 80074d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074dc:	e735      	b.n	800734a <_dtoa_r+0x742>
 80074de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074e0:	e75c      	b.n	800739c <_dtoa_r+0x794>
 80074e2:	2300      	movs	r3, #0
 80074e4:	e788      	b.n	80073f8 <_dtoa_r+0x7f0>
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	e786      	b.n	80073f8 <_dtoa_r+0x7f0>
 80074ea:	2300      	movs	r3, #0
 80074ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ee:	e788      	b.n	8007402 <_dtoa_r+0x7fa>
 80074f0:	d09f      	beq.n	8007432 <_dtoa_r+0x82a>
 80074f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f4:	331c      	adds	r3, #28
 80074f6:	441a      	add	r2, r3
 80074f8:	4498      	add	r8, r3
 80074fa:	441e      	add	r6, r3
 80074fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80074fe:	e798      	b.n	8007432 <_dtoa_r+0x82a>
 8007500:	4603      	mov	r3, r0
 8007502:	e7f6      	b.n	80074f2 <_dtoa_r+0x8ea>
 8007504:	9b07      	ldr	r3, [sp, #28]
 8007506:	9704      	str	r7, [sp, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dc20      	bgt.n	800754e <_dtoa_r+0x946>
 800750c:	9308      	str	r3, [sp, #32]
 800750e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007510:	2b02      	cmp	r3, #2
 8007512:	dd1e      	ble.n	8007552 <_dtoa_r+0x94a>
 8007514:	9b08      	ldr	r3, [sp, #32]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f aebc 	bne.w	8007294 <_dtoa_r+0x68c>
 800751c:	4621      	mov	r1, r4
 800751e:	2205      	movs	r2, #5
 8007520:	4658      	mov	r0, fp
 8007522:	f000 fa99 	bl	8007a58 <__multadd>
 8007526:	4601      	mov	r1, r0
 8007528:	4604      	mov	r4, r0
 800752a:	4648      	mov	r0, r9
 800752c:	f000 fcaa 	bl	8007e84 <__mcmp>
 8007530:	2800      	cmp	r0, #0
 8007532:	f77f aeaf 	ble.w	8007294 <_dtoa_r+0x68c>
 8007536:	2331      	movs	r3, #49	@ 0x31
 8007538:	4656      	mov	r6, sl
 800753a:	f806 3b01 	strb.w	r3, [r6], #1
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	3301      	adds	r3, #1
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	e6aa      	b.n	800729c <_dtoa_r+0x694>
 8007546:	9c07      	ldr	r4, [sp, #28]
 8007548:	9704      	str	r7, [sp, #16]
 800754a:	4625      	mov	r5, r4
 800754c:	e7f3      	b.n	8007536 <_dtoa_r+0x92e>
 800754e:	9b07      	ldr	r3, [sp, #28]
 8007550:	9308      	str	r3, [sp, #32]
 8007552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8104 	beq.w	8007762 <_dtoa_r+0xb5a>
 800755a:	2e00      	cmp	r6, #0
 800755c:	dd05      	ble.n	800756a <_dtoa_r+0x962>
 800755e:	4629      	mov	r1, r5
 8007560:	4632      	mov	r2, r6
 8007562:	4658      	mov	r0, fp
 8007564:	f000 fc22 	bl	8007dac <__lshift>
 8007568:	4605      	mov	r5, r0
 800756a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800756c:	2b00      	cmp	r3, #0
 800756e:	d05a      	beq.n	8007626 <_dtoa_r+0xa1e>
 8007570:	4658      	mov	r0, fp
 8007572:	6869      	ldr	r1, [r5, #4]
 8007574:	f000 fa0e 	bl	8007994 <_Balloc>
 8007578:	4606      	mov	r6, r0
 800757a:	b928      	cbnz	r0, 8007588 <_dtoa_r+0x980>
 800757c:	4602      	mov	r2, r0
 800757e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007582:	4b83      	ldr	r3, [pc, #524]	@ (8007790 <_dtoa_r+0xb88>)
 8007584:	f7ff bb54 	b.w	8006c30 <_dtoa_r+0x28>
 8007588:	692a      	ldr	r2, [r5, #16]
 800758a:	f105 010c 	add.w	r1, r5, #12
 800758e:	3202      	adds	r2, #2
 8007590:	0092      	lsls	r2, r2, #2
 8007592:	300c      	adds	r0, #12
 8007594:	f001 fa00 	bl	8008998 <memcpy>
 8007598:	2201      	movs	r2, #1
 800759a:	4631      	mov	r1, r6
 800759c:	4658      	mov	r0, fp
 800759e:	f000 fc05 	bl	8007dac <__lshift>
 80075a2:	462f      	mov	r7, r5
 80075a4:	4605      	mov	r5, r0
 80075a6:	f10a 0301 	add.w	r3, sl, #1
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	4453      	add	r3, sl
 80075b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075b2:	9b02      	ldr	r3, [sp, #8]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	4621      	mov	r1, r4
 80075be:	3b01      	subs	r3, #1
 80075c0:	4648      	mov	r0, r9
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	f7ff fa95 	bl	8006af2 <quorem>
 80075c8:	4639      	mov	r1, r7
 80075ca:	9008      	str	r0, [sp, #32]
 80075cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075d0:	4648      	mov	r0, r9
 80075d2:	f000 fc57 	bl	8007e84 <__mcmp>
 80075d6:	462a      	mov	r2, r5
 80075d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80075da:	4621      	mov	r1, r4
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fc6d 	bl	8007ebc <__mdiff>
 80075e2:	68c2      	ldr	r2, [r0, #12]
 80075e4:	4606      	mov	r6, r0
 80075e6:	bb02      	cbnz	r2, 800762a <_dtoa_r+0xa22>
 80075e8:	4601      	mov	r1, r0
 80075ea:	4648      	mov	r0, r9
 80075ec:	f000 fc4a 	bl	8007e84 <__mcmp>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4631      	mov	r1, r6
 80075f4:	4658      	mov	r0, fp
 80075f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80075f8:	f000 fa0c 	bl	8007a14 <_Bfree>
 80075fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007600:	9e07      	ldr	r6, [sp, #28]
 8007602:	ea43 0102 	orr.w	r1, r3, r2
 8007606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007608:	4319      	orrs	r1, r3
 800760a:	d110      	bne.n	800762e <_dtoa_r+0xa26>
 800760c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007610:	d029      	beq.n	8007666 <_dtoa_r+0xa5e>
 8007612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd02      	ble.n	800761e <_dtoa_r+0xa16>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800761e:	9b02      	ldr	r3, [sp, #8]
 8007620:	f883 8000 	strb.w	r8, [r3]
 8007624:	e63b      	b.n	800729e <_dtoa_r+0x696>
 8007626:	4628      	mov	r0, r5
 8007628:	e7bb      	b.n	80075a2 <_dtoa_r+0x99a>
 800762a:	2201      	movs	r2, #1
 800762c:	e7e1      	b.n	80075f2 <_dtoa_r+0x9ea>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	db04      	blt.n	800763e <_dtoa_r+0xa36>
 8007634:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007636:	430b      	orrs	r3, r1
 8007638:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800763a:	430b      	orrs	r3, r1
 800763c:	d120      	bne.n	8007680 <_dtoa_r+0xa78>
 800763e:	2a00      	cmp	r2, #0
 8007640:	dded      	ble.n	800761e <_dtoa_r+0xa16>
 8007642:	4649      	mov	r1, r9
 8007644:	2201      	movs	r2, #1
 8007646:	4658      	mov	r0, fp
 8007648:	f000 fbb0 	bl	8007dac <__lshift>
 800764c:	4621      	mov	r1, r4
 800764e:	4681      	mov	r9, r0
 8007650:	f000 fc18 	bl	8007e84 <__mcmp>
 8007654:	2800      	cmp	r0, #0
 8007656:	dc03      	bgt.n	8007660 <_dtoa_r+0xa58>
 8007658:	d1e1      	bne.n	800761e <_dtoa_r+0xa16>
 800765a:	f018 0f01 	tst.w	r8, #1
 800765e:	d0de      	beq.n	800761e <_dtoa_r+0xa16>
 8007660:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007664:	d1d8      	bne.n	8007618 <_dtoa_r+0xa10>
 8007666:	2339      	movs	r3, #57	@ 0x39
 8007668:	9a02      	ldr	r2, [sp, #8]
 800766a:	7013      	strb	r3, [r2, #0]
 800766c:	4633      	mov	r3, r6
 800766e:	461e      	mov	r6, r3
 8007670:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007674:	3b01      	subs	r3, #1
 8007676:	2a39      	cmp	r2, #57	@ 0x39
 8007678:	d052      	beq.n	8007720 <_dtoa_r+0xb18>
 800767a:	3201      	adds	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	e60e      	b.n	800729e <_dtoa_r+0x696>
 8007680:	2a00      	cmp	r2, #0
 8007682:	dd07      	ble.n	8007694 <_dtoa_r+0xa8c>
 8007684:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007688:	d0ed      	beq.n	8007666 <_dtoa_r+0xa5e>
 800768a:	9a02      	ldr	r2, [sp, #8]
 800768c:	f108 0301 	add.w	r3, r8, #1
 8007690:	7013      	strb	r3, [r2, #0]
 8007692:	e604      	b.n	800729e <_dtoa_r+0x696>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	9a07      	ldr	r2, [sp, #28]
 8007698:	f803 8c01 	strb.w	r8, [r3, #-1]
 800769c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800769e:	4293      	cmp	r3, r2
 80076a0:	d028      	beq.n	80076f4 <_dtoa_r+0xaec>
 80076a2:	4649      	mov	r1, r9
 80076a4:	2300      	movs	r3, #0
 80076a6:	220a      	movs	r2, #10
 80076a8:	4658      	mov	r0, fp
 80076aa:	f000 f9d5 	bl	8007a58 <__multadd>
 80076ae:	42af      	cmp	r7, r5
 80076b0:	4681      	mov	r9, r0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	f04f 020a 	mov.w	r2, #10
 80076ba:	4639      	mov	r1, r7
 80076bc:	4658      	mov	r0, fp
 80076be:	d107      	bne.n	80076d0 <_dtoa_r+0xac8>
 80076c0:	f000 f9ca 	bl	8007a58 <__multadd>
 80076c4:	4607      	mov	r7, r0
 80076c6:	4605      	mov	r5, r0
 80076c8:	9b07      	ldr	r3, [sp, #28]
 80076ca:	3301      	adds	r3, #1
 80076cc:	9307      	str	r3, [sp, #28]
 80076ce:	e774      	b.n	80075ba <_dtoa_r+0x9b2>
 80076d0:	f000 f9c2 	bl	8007a58 <__multadd>
 80076d4:	4629      	mov	r1, r5
 80076d6:	4607      	mov	r7, r0
 80076d8:	2300      	movs	r3, #0
 80076da:	220a      	movs	r2, #10
 80076dc:	4658      	mov	r0, fp
 80076de:	f000 f9bb 	bl	8007a58 <__multadd>
 80076e2:	4605      	mov	r5, r0
 80076e4:	e7f0      	b.n	80076c8 <_dtoa_r+0xac0>
 80076e6:	9b08      	ldr	r3, [sp, #32]
 80076e8:	2700      	movs	r7, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfcc      	ite	gt
 80076ee:	461e      	movgt	r6, r3
 80076f0:	2601      	movle	r6, #1
 80076f2:	4456      	add	r6, sl
 80076f4:	4649      	mov	r1, r9
 80076f6:	2201      	movs	r2, #1
 80076f8:	4658      	mov	r0, fp
 80076fa:	f000 fb57 	bl	8007dac <__lshift>
 80076fe:	4621      	mov	r1, r4
 8007700:	4681      	mov	r9, r0
 8007702:	f000 fbbf 	bl	8007e84 <__mcmp>
 8007706:	2800      	cmp	r0, #0
 8007708:	dcb0      	bgt.n	800766c <_dtoa_r+0xa64>
 800770a:	d102      	bne.n	8007712 <_dtoa_r+0xb0a>
 800770c:	f018 0f01 	tst.w	r8, #1
 8007710:	d1ac      	bne.n	800766c <_dtoa_r+0xa64>
 8007712:	4633      	mov	r3, r6
 8007714:	461e      	mov	r6, r3
 8007716:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800771a:	2a30      	cmp	r2, #48	@ 0x30
 800771c:	d0fa      	beq.n	8007714 <_dtoa_r+0xb0c>
 800771e:	e5be      	b.n	800729e <_dtoa_r+0x696>
 8007720:	459a      	cmp	sl, r3
 8007722:	d1a4      	bne.n	800766e <_dtoa_r+0xa66>
 8007724:	9b04      	ldr	r3, [sp, #16]
 8007726:	3301      	adds	r3, #1
 8007728:	9304      	str	r3, [sp, #16]
 800772a:	2331      	movs	r3, #49	@ 0x31
 800772c:	f88a 3000 	strb.w	r3, [sl]
 8007730:	e5b5      	b.n	800729e <_dtoa_r+0x696>
 8007732:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007734:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007794 <_dtoa_r+0xb8c>
 8007738:	b11b      	cbz	r3, 8007742 <_dtoa_r+0xb3a>
 800773a:	f10a 0308 	add.w	r3, sl, #8
 800773e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	4650      	mov	r0, sl
 8007744:	b017      	add	sp, #92	@ 0x5c
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800774c:	2b01      	cmp	r3, #1
 800774e:	f77f ae3d 	ble.w	80073cc <_dtoa_r+0x7c4>
 8007752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007754:	930a      	str	r3, [sp, #40]	@ 0x28
 8007756:	2001      	movs	r0, #1
 8007758:	e65b      	b.n	8007412 <_dtoa_r+0x80a>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f77f aed6 	ble.w	800750e <_dtoa_r+0x906>
 8007762:	4656      	mov	r6, sl
 8007764:	4621      	mov	r1, r4
 8007766:	4648      	mov	r0, r9
 8007768:	f7ff f9c3 	bl	8006af2 <quorem>
 800776c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007770:	9b08      	ldr	r3, [sp, #32]
 8007772:	f806 8b01 	strb.w	r8, [r6], #1
 8007776:	eba6 020a 	sub.w	r2, r6, sl
 800777a:	4293      	cmp	r3, r2
 800777c:	ddb3      	ble.n	80076e6 <_dtoa_r+0xade>
 800777e:	4649      	mov	r1, r9
 8007780:	2300      	movs	r3, #0
 8007782:	220a      	movs	r2, #10
 8007784:	4658      	mov	r0, fp
 8007786:	f000 f967 	bl	8007a58 <__multadd>
 800778a:	4681      	mov	r9, r0
 800778c:	e7ea      	b.n	8007764 <_dtoa_r+0xb5c>
 800778e:	bf00      	nop
 8007790:	080094ca 	.word	0x080094ca
 8007794:	0800944e 	.word	0x0800944e

08007798 <_free_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4605      	mov	r5, r0
 800779c:	2900      	cmp	r1, #0
 800779e:	d040      	beq.n	8007822 <_free_r+0x8a>
 80077a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a4:	1f0c      	subs	r4, r1, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfb8      	it	lt
 80077aa:	18e4      	addlt	r4, r4, r3
 80077ac:	f000 f8e6 	bl	800797c <__malloc_lock>
 80077b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007824 <_free_r+0x8c>)
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	b933      	cbnz	r3, 80077c4 <_free_r+0x2c>
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	6014      	str	r4, [r2, #0]
 80077ba:	4628      	mov	r0, r5
 80077bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077c0:	f000 b8e2 	b.w	8007988 <__malloc_unlock>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d908      	bls.n	80077da <_free_r+0x42>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	1821      	adds	r1, r4, r0
 80077cc:	428b      	cmp	r3, r1
 80077ce:	bf01      	itttt	eq
 80077d0:	6819      	ldreq	r1, [r3, #0]
 80077d2:	685b      	ldreq	r3, [r3, #4]
 80077d4:	1809      	addeq	r1, r1, r0
 80077d6:	6021      	streq	r1, [r4, #0]
 80077d8:	e7ed      	b.n	80077b6 <_free_r+0x1e>
 80077da:	461a      	mov	r2, r3
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	b10b      	cbz	r3, 80077e4 <_free_r+0x4c>
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	d9fa      	bls.n	80077da <_free_r+0x42>
 80077e4:	6811      	ldr	r1, [r2, #0]
 80077e6:	1850      	adds	r0, r2, r1
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d10b      	bne.n	8007804 <_free_r+0x6c>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	4401      	add	r1, r0
 80077f0:	1850      	adds	r0, r2, r1
 80077f2:	4283      	cmp	r3, r0
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	d1e0      	bne.n	80077ba <_free_r+0x22>
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4408      	add	r0, r1
 80077fe:	6010      	str	r0, [r2, #0]
 8007800:	6053      	str	r3, [r2, #4]
 8007802:	e7da      	b.n	80077ba <_free_r+0x22>
 8007804:	d902      	bls.n	800780c <_free_r+0x74>
 8007806:	230c      	movs	r3, #12
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	e7d6      	b.n	80077ba <_free_r+0x22>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	1821      	adds	r1, r4, r0
 8007810:	428b      	cmp	r3, r1
 8007812:	bf01      	itttt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	1809      	addeq	r1, r1, r0
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	6063      	str	r3, [r4, #4]
 800781e:	6054      	str	r4, [r2, #4]
 8007820:	e7cb      	b.n	80077ba <_free_r+0x22>
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20002140 	.word	0x20002140

08007828 <malloc>:
 8007828:	4b02      	ldr	r3, [pc, #8]	@ (8007834 <malloc+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f000 b825 	b.w	800787c <_malloc_r>
 8007832:	bf00      	nop
 8007834:	20000020 	.word	0x20000020

08007838 <sbrk_aligned>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	4e0f      	ldr	r6, [pc, #60]	@ (8007878 <sbrk_aligned+0x40>)
 800783c:	460c      	mov	r4, r1
 800783e:	6831      	ldr	r1, [r6, #0]
 8007840:	4605      	mov	r5, r0
 8007842:	b911      	cbnz	r1, 800784a <sbrk_aligned+0x12>
 8007844:	f001 f898 	bl	8008978 <_sbrk_r>
 8007848:	6030      	str	r0, [r6, #0]
 800784a:	4621      	mov	r1, r4
 800784c:	4628      	mov	r0, r5
 800784e:	f001 f893 	bl	8008978 <_sbrk_r>
 8007852:	1c43      	adds	r3, r0, #1
 8007854:	d103      	bne.n	800785e <sbrk_aligned+0x26>
 8007856:	f04f 34ff 	mov.w	r4, #4294967295
 800785a:	4620      	mov	r0, r4
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	1cc4      	adds	r4, r0, #3
 8007860:	f024 0403 	bic.w	r4, r4, #3
 8007864:	42a0      	cmp	r0, r4
 8007866:	d0f8      	beq.n	800785a <sbrk_aligned+0x22>
 8007868:	1a21      	subs	r1, r4, r0
 800786a:	4628      	mov	r0, r5
 800786c:	f001 f884 	bl	8008978 <_sbrk_r>
 8007870:	3001      	adds	r0, #1
 8007872:	d1f2      	bne.n	800785a <sbrk_aligned+0x22>
 8007874:	e7ef      	b.n	8007856 <sbrk_aligned+0x1e>
 8007876:	bf00      	nop
 8007878:	2000213c 	.word	0x2000213c

0800787c <_malloc_r>:
 800787c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007880:	1ccd      	adds	r5, r1, #3
 8007882:	f025 0503 	bic.w	r5, r5, #3
 8007886:	3508      	adds	r5, #8
 8007888:	2d0c      	cmp	r5, #12
 800788a:	bf38      	it	cc
 800788c:	250c      	movcc	r5, #12
 800788e:	2d00      	cmp	r5, #0
 8007890:	4606      	mov	r6, r0
 8007892:	db01      	blt.n	8007898 <_malloc_r+0x1c>
 8007894:	42a9      	cmp	r1, r5
 8007896:	d904      	bls.n	80078a2 <_malloc_r+0x26>
 8007898:	230c      	movs	r3, #12
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	2000      	movs	r0, #0
 800789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007978 <_malloc_r+0xfc>
 80078a6:	f000 f869 	bl	800797c <__malloc_lock>
 80078aa:	f8d8 3000 	ldr.w	r3, [r8]
 80078ae:	461c      	mov	r4, r3
 80078b0:	bb44      	cbnz	r4, 8007904 <_malloc_r+0x88>
 80078b2:	4629      	mov	r1, r5
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff ffbf 	bl	8007838 <sbrk_aligned>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	4604      	mov	r4, r0
 80078be:	d158      	bne.n	8007972 <_malloc_r+0xf6>
 80078c0:	f8d8 4000 	ldr.w	r4, [r8]
 80078c4:	4627      	mov	r7, r4
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	d143      	bne.n	8007952 <_malloc_r+0xd6>
 80078ca:	2c00      	cmp	r4, #0
 80078cc:	d04b      	beq.n	8007966 <_malloc_r+0xea>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	4639      	mov	r1, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	eb04 0903 	add.w	r9, r4, r3
 80078d8:	f001 f84e 	bl	8008978 <_sbrk_r>
 80078dc:	4581      	cmp	r9, r0
 80078de:	d142      	bne.n	8007966 <_malloc_r+0xea>
 80078e0:	6821      	ldr	r1, [r4, #0]
 80078e2:	4630      	mov	r0, r6
 80078e4:	1a6d      	subs	r5, r5, r1
 80078e6:	4629      	mov	r1, r5
 80078e8:	f7ff ffa6 	bl	8007838 <sbrk_aligned>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d03a      	beq.n	8007966 <_malloc_r+0xea>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	442b      	add	r3, r5
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	f8d8 3000 	ldr.w	r3, [r8]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	bb62      	cbnz	r2, 8007958 <_malloc_r+0xdc>
 80078fe:	f8c8 7000 	str.w	r7, [r8]
 8007902:	e00f      	b.n	8007924 <_malloc_r+0xa8>
 8007904:	6822      	ldr	r2, [r4, #0]
 8007906:	1b52      	subs	r2, r2, r5
 8007908:	d420      	bmi.n	800794c <_malloc_r+0xd0>
 800790a:	2a0b      	cmp	r2, #11
 800790c:	d917      	bls.n	800793e <_malloc_r+0xc2>
 800790e:	1961      	adds	r1, r4, r5
 8007910:	42a3      	cmp	r3, r4
 8007912:	6025      	str	r5, [r4, #0]
 8007914:	bf18      	it	ne
 8007916:	6059      	strne	r1, [r3, #4]
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	bf08      	it	eq
 800791c:	f8c8 1000 	streq.w	r1, [r8]
 8007920:	5162      	str	r2, [r4, r5]
 8007922:	604b      	str	r3, [r1, #4]
 8007924:	4630      	mov	r0, r6
 8007926:	f000 f82f 	bl	8007988 <__malloc_unlock>
 800792a:	f104 000b 	add.w	r0, r4, #11
 800792e:	1d23      	adds	r3, r4, #4
 8007930:	f020 0007 	bic.w	r0, r0, #7
 8007934:	1ac2      	subs	r2, r0, r3
 8007936:	bf1c      	itt	ne
 8007938:	1a1b      	subne	r3, r3, r0
 800793a:	50a3      	strne	r3, [r4, r2]
 800793c:	e7af      	b.n	800789e <_malloc_r+0x22>
 800793e:	6862      	ldr	r2, [r4, #4]
 8007940:	42a3      	cmp	r3, r4
 8007942:	bf0c      	ite	eq
 8007944:	f8c8 2000 	streq.w	r2, [r8]
 8007948:	605a      	strne	r2, [r3, #4]
 800794a:	e7eb      	b.n	8007924 <_malloc_r+0xa8>
 800794c:	4623      	mov	r3, r4
 800794e:	6864      	ldr	r4, [r4, #4]
 8007950:	e7ae      	b.n	80078b0 <_malloc_r+0x34>
 8007952:	463c      	mov	r4, r7
 8007954:	687f      	ldr	r7, [r7, #4]
 8007956:	e7b6      	b.n	80078c6 <_malloc_r+0x4a>
 8007958:	461a      	mov	r2, r3
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	42a3      	cmp	r3, r4
 800795e:	d1fb      	bne.n	8007958 <_malloc_r+0xdc>
 8007960:	2300      	movs	r3, #0
 8007962:	6053      	str	r3, [r2, #4]
 8007964:	e7de      	b.n	8007924 <_malloc_r+0xa8>
 8007966:	230c      	movs	r3, #12
 8007968:	4630      	mov	r0, r6
 800796a:	6033      	str	r3, [r6, #0]
 800796c:	f000 f80c 	bl	8007988 <__malloc_unlock>
 8007970:	e794      	b.n	800789c <_malloc_r+0x20>
 8007972:	6005      	str	r5, [r0, #0]
 8007974:	e7d6      	b.n	8007924 <_malloc_r+0xa8>
 8007976:	bf00      	nop
 8007978:	20002140 	.word	0x20002140

0800797c <__malloc_lock>:
 800797c:	4801      	ldr	r0, [pc, #4]	@ (8007984 <__malloc_lock+0x8>)
 800797e:	f7ff b8a8 	b.w	8006ad2 <__retarget_lock_acquire_recursive>
 8007982:	bf00      	nop
 8007984:	20002138 	.word	0x20002138

08007988 <__malloc_unlock>:
 8007988:	4801      	ldr	r0, [pc, #4]	@ (8007990 <__malloc_unlock+0x8>)
 800798a:	f7ff b8a3 	b.w	8006ad4 <__retarget_lock_release_recursive>
 800798e:	bf00      	nop
 8007990:	20002138 	.word	0x20002138

08007994 <_Balloc>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	69c6      	ldr	r6, [r0, #28]
 8007998:	4604      	mov	r4, r0
 800799a:	460d      	mov	r5, r1
 800799c:	b976      	cbnz	r6, 80079bc <_Balloc+0x28>
 800799e:	2010      	movs	r0, #16
 80079a0:	f7ff ff42 	bl	8007828 <malloc>
 80079a4:	4602      	mov	r2, r0
 80079a6:	61e0      	str	r0, [r4, #28]
 80079a8:	b920      	cbnz	r0, 80079b4 <_Balloc+0x20>
 80079aa:	216b      	movs	r1, #107	@ 0x6b
 80079ac:	4b17      	ldr	r3, [pc, #92]	@ (8007a0c <_Balloc+0x78>)
 80079ae:	4818      	ldr	r0, [pc, #96]	@ (8007a10 <_Balloc+0x7c>)
 80079b0:	f001 f800 	bl	80089b4 <__assert_func>
 80079b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079b8:	6006      	str	r6, [r0, #0]
 80079ba:	60c6      	str	r6, [r0, #12]
 80079bc:	69e6      	ldr	r6, [r4, #28]
 80079be:	68f3      	ldr	r3, [r6, #12]
 80079c0:	b183      	cbz	r3, 80079e4 <_Balloc+0x50>
 80079c2:	69e3      	ldr	r3, [r4, #28]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ca:	b9b8      	cbnz	r0, 80079fc <_Balloc+0x68>
 80079cc:	2101      	movs	r1, #1
 80079ce:	fa01 f605 	lsl.w	r6, r1, r5
 80079d2:	1d72      	adds	r2, r6, #5
 80079d4:	4620      	mov	r0, r4
 80079d6:	0092      	lsls	r2, r2, #2
 80079d8:	f001 f80a 	bl	80089f0 <_calloc_r>
 80079dc:	b160      	cbz	r0, 80079f8 <_Balloc+0x64>
 80079de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079e2:	e00e      	b.n	8007a02 <_Balloc+0x6e>
 80079e4:	2221      	movs	r2, #33	@ 0x21
 80079e6:	2104      	movs	r1, #4
 80079e8:	4620      	mov	r0, r4
 80079ea:	f001 f801 	bl	80089f0 <_calloc_r>
 80079ee:	69e3      	ldr	r3, [r4, #28]
 80079f0:	60f0      	str	r0, [r6, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e4      	bne.n	80079c2 <_Balloc+0x2e>
 80079f8:	2000      	movs	r0, #0
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	6802      	ldr	r2, [r0, #0]
 80079fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a02:	2300      	movs	r3, #0
 8007a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a08:	e7f7      	b.n	80079fa <_Balloc+0x66>
 8007a0a:	bf00      	nop
 8007a0c:	0800945b 	.word	0x0800945b
 8007a10:	080094db 	.word	0x080094db

08007a14 <_Bfree>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	69c6      	ldr	r6, [r0, #28]
 8007a18:	4605      	mov	r5, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	b976      	cbnz	r6, 8007a3c <_Bfree+0x28>
 8007a1e:	2010      	movs	r0, #16
 8007a20:	f7ff ff02 	bl	8007828 <malloc>
 8007a24:	4602      	mov	r2, r0
 8007a26:	61e8      	str	r0, [r5, #28]
 8007a28:	b920      	cbnz	r0, 8007a34 <_Bfree+0x20>
 8007a2a:	218f      	movs	r1, #143	@ 0x8f
 8007a2c:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <_Bfree+0x3c>)
 8007a2e:	4809      	ldr	r0, [pc, #36]	@ (8007a54 <_Bfree+0x40>)
 8007a30:	f000 ffc0 	bl	80089b4 <__assert_func>
 8007a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a38:	6006      	str	r6, [r0, #0]
 8007a3a:	60c6      	str	r6, [r0, #12]
 8007a3c:	b13c      	cbz	r4, 8007a4e <_Bfree+0x3a>
 8007a3e:	69eb      	ldr	r3, [r5, #28]
 8007a40:	6862      	ldr	r2, [r4, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a48:	6021      	str	r1, [r4, #0]
 8007a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	0800945b 	.word	0x0800945b
 8007a54:	080094db 	.word	0x080094db

08007a58 <__multadd>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	461e      	mov	r6, r3
 8007a62:	2000      	movs	r0, #0
 8007a64:	690d      	ldr	r5, [r1, #16]
 8007a66:	f101 0c14 	add.w	ip, r1, #20
 8007a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a6e:	3001      	adds	r0, #1
 8007a70:	b299      	uxth	r1, r3
 8007a72:	fb02 6101 	mla	r1, r2, r1, r6
 8007a76:	0c1e      	lsrs	r6, r3, #16
 8007a78:	0c0b      	lsrs	r3, r1, #16
 8007a7a:	fb02 3306 	mla	r3, r2, r6, r3
 8007a7e:	b289      	uxth	r1, r1
 8007a80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a84:	4285      	cmp	r5, r0
 8007a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a8e:	dcec      	bgt.n	8007a6a <__multadd+0x12>
 8007a90:	b30e      	cbz	r6, 8007ad6 <__multadd+0x7e>
 8007a92:	68a3      	ldr	r3, [r4, #8]
 8007a94:	42ab      	cmp	r3, r5
 8007a96:	dc19      	bgt.n	8007acc <__multadd+0x74>
 8007a98:	6861      	ldr	r1, [r4, #4]
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	3101      	adds	r1, #1
 8007a9e:	f7ff ff79 	bl	8007994 <_Balloc>
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	b928      	cbnz	r0, 8007ab2 <__multadd+0x5a>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	21ba      	movs	r1, #186	@ 0xba
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007adc <__multadd+0x84>)
 8007aac:	480c      	ldr	r0, [pc, #48]	@ (8007ae0 <__multadd+0x88>)
 8007aae:	f000 ff81 	bl	80089b4 <__assert_func>
 8007ab2:	6922      	ldr	r2, [r4, #16]
 8007ab4:	f104 010c 	add.w	r1, r4, #12
 8007ab8:	3202      	adds	r2, #2
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	300c      	adds	r0, #12
 8007abe:	f000 ff6b 	bl	8008998 <memcpy>
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff ffa5 	bl	8007a14 <_Bfree>
 8007aca:	4644      	mov	r4, r8
 8007acc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	615e      	str	r6, [r3, #20]
 8007ad4:	6125      	str	r5, [r4, #16]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	080094ca 	.word	0x080094ca
 8007ae0:	080094db 	.word	0x080094db

08007ae4 <__hi0bits>:
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007aea:	bf3a      	itte	cc
 8007aec:	0403      	lslcc	r3, r0, #16
 8007aee:	2010      	movcc	r0, #16
 8007af0:	2000      	movcs	r0, #0
 8007af2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007af6:	bf3c      	itt	cc
 8007af8:	021b      	lslcc	r3, r3, #8
 8007afa:	3008      	addcc	r0, #8
 8007afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b00:	bf3c      	itt	cc
 8007b02:	011b      	lslcc	r3, r3, #4
 8007b04:	3004      	addcc	r0, #4
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0a:	bf3c      	itt	cc
 8007b0c:	009b      	lslcc	r3, r3, #2
 8007b0e:	3002      	addcc	r0, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db05      	blt.n	8007b20 <__hi0bits+0x3c>
 8007b14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b18:	f100 0001 	add.w	r0, r0, #1
 8007b1c:	bf08      	it	eq
 8007b1e:	2020      	moveq	r0, #32
 8007b20:	4770      	bx	lr

08007b22 <__lo0bits>:
 8007b22:	6803      	ldr	r3, [r0, #0]
 8007b24:	4602      	mov	r2, r0
 8007b26:	f013 0007 	ands.w	r0, r3, #7
 8007b2a:	d00b      	beq.n	8007b44 <__lo0bits+0x22>
 8007b2c:	07d9      	lsls	r1, r3, #31
 8007b2e:	d421      	bmi.n	8007b74 <__lo0bits+0x52>
 8007b30:	0798      	lsls	r0, r3, #30
 8007b32:	bf49      	itett	mi
 8007b34:	085b      	lsrmi	r3, r3, #1
 8007b36:	089b      	lsrpl	r3, r3, #2
 8007b38:	2001      	movmi	r0, #1
 8007b3a:	6013      	strmi	r3, [r2, #0]
 8007b3c:	bf5c      	itt	pl
 8007b3e:	2002      	movpl	r0, #2
 8007b40:	6013      	strpl	r3, [r2, #0]
 8007b42:	4770      	bx	lr
 8007b44:	b299      	uxth	r1, r3
 8007b46:	b909      	cbnz	r1, 8007b4c <__lo0bits+0x2a>
 8007b48:	2010      	movs	r0, #16
 8007b4a:	0c1b      	lsrs	r3, r3, #16
 8007b4c:	b2d9      	uxtb	r1, r3
 8007b4e:	b909      	cbnz	r1, 8007b54 <__lo0bits+0x32>
 8007b50:	3008      	adds	r0, #8
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	0719      	lsls	r1, r3, #28
 8007b56:	bf04      	itt	eq
 8007b58:	091b      	lsreq	r3, r3, #4
 8007b5a:	3004      	addeq	r0, #4
 8007b5c:	0799      	lsls	r1, r3, #30
 8007b5e:	bf04      	itt	eq
 8007b60:	089b      	lsreq	r3, r3, #2
 8007b62:	3002      	addeq	r0, #2
 8007b64:	07d9      	lsls	r1, r3, #31
 8007b66:	d403      	bmi.n	8007b70 <__lo0bits+0x4e>
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	f100 0001 	add.w	r0, r0, #1
 8007b6e:	d003      	beq.n	8007b78 <__lo0bits+0x56>
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	4770      	bx	lr
 8007b74:	2000      	movs	r0, #0
 8007b76:	4770      	bx	lr
 8007b78:	2020      	movs	r0, #32
 8007b7a:	4770      	bx	lr

08007b7c <__i2b>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	460c      	mov	r4, r1
 8007b80:	2101      	movs	r1, #1
 8007b82:	f7ff ff07 	bl	8007994 <_Balloc>
 8007b86:	4602      	mov	r2, r0
 8007b88:	b928      	cbnz	r0, 8007b96 <__i2b+0x1a>
 8007b8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b8e:	4b04      	ldr	r3, [pc, #16]	@ (8007ba0 <__i2b+0x24>)
 8007b90:	4804      	ldr	r0, [pc, #16]	@ (8007ba4 <__i2b+0x28>)
 8007b92:	f000 ff0f 	bl	80089b4 <__assert_func>
 8007b96:	2301      	movs	r3, #1
 8007b98:	6144      	str	r4, [r0, #20]
 8007b9a:	6103      	str	r3, [r0, #16]
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	bf00      	nop
 8007ba0:	080094ca 	.word	0x080094ca
 8007ba4:	080094db 	.word	0x080094db

08007ba8 <__multiply>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	4614      	mov	r4, r2
 8007bae:	690a      	ldr	r2, [r1, #16]
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	bfa2      	ittt	ge
 8007bb8:	4623      	movge	r3, r4
 8007bba:	460c      	movge	r4, r1
 8007bbc:	461f      	movge	r7, r3
 8007bbe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bc2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	eb0a 0609 	add.w	r6, sl, r9
 8007bce:	42b3      	cmp	r3, r6
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	bfb8      	it	lt
 8007bd4:	3101      	addlt	r1, #1
 8007bd6:	f7ff fedd 	bl	8007994 <_Balloc>
 8007bda:	b930      	cbnz	r0, 8007bea <__multiply+0x42>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007be2:	4b43      	ldr	r3, [pc, #268]	@ (8007cf0 <__multiply+0x148>)
 8007be4:	4843      	ldr	r0, [pc, #268]	@ (8007cf4 <__multiply+0x14c>)
 8007be6:	f000 fee5 	bl	80089b4 <__assert_func>
 8007bea:	f100 0514 	add.w	r5, r0, #20
 8007bee:	462b      	mov	r3, r5
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bf6:	4543      	cmp	r3, r8
 8007bf8:	d321      	bcc.n	8007c3e <__multiply+0x96>
 8007bfa:	f107 0114 	add.w	r1, r7, #20
 8007bfe:	f104 0214 	add.w	r2, r4, #20
 8007c02:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c06:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	1b13      	subs	r3, r2, r4
 8007c0e:	3b15      	subs	r3, #21
 8007c10:	f023 0303 	bic.w	r3, r3, #3
 8007c14:	3304      	adds	r3, #4
 8007c16:	f104 0715 	add.w	r7, r4, #21
 8007c1a:	42ba      	cmp	r2, r7
 8007c1c:	bf38      	it	cc
 8007c1e:	2304      	movcc	r3, #4
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	9b02      	ldr	r3, [sp, #8]
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	428b      	cmp	r3, r1
 8007c28:	d80c      	bhi.n	8007c44 <__multiply+0x9c>
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	dd03      	ble.n	8007c36 <__multiply+0x8e>
 8007c2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d05a      	beq.n	8007cec <__multiply+0x144>
 8007c36:	6106      	str	r6, [r0, #16]
 8007c38:	b005      	add	sp, #20
 8007c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3e:	f843 2b04 	str.w	r2, [r3], #4
 8007c42:	e7d8      	b.n	8007bf6 <__multiply+0x4e>
 8007c44:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c48:	f1ba 0f00 	cmp.w	sl, #0
 8007c4c:	d023      	beq.n	8007c96 <__multiply+0xee>
 8007c4e:	46a9      	mov	r9, r5
 8007c50:	f04f 0c00 	mov.w	ip, #0
 8007c54:	f104 0e14 	add.w	lr, r4, #20
 8007c58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c5c:	f8d9 3000 	ldr.w	r3, [r9]
 8007c60:	fa1f fb87 	uxth.w	fp, r7
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c6a:	4463      	add	r3, ip
 8007c6c:	f8d9 c000 	ldr.w	ip, [r9]
 8007c70:	0c3f      	lsrs	r7, r7, #16
 8007c72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c76:	fb0a c707 	mla	r7, sl, r7, ip
 8007c7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c84:	4572      	cmp	r2, lr
 8007c86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c8a:	f849 3b04 	str.w	r3, [r9], #4
 8007c8e:	d8e3      	bhi.n	8007c58 <__multiply+0xb0>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f845 c003 	str.w	ip, [r5, r3]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	3104      	adds	r1, #4
 8007c9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ca2:	d021      	beq.n	8007ce8 <__multiply+0x140>
 8007ca4:	46ae      	mov	lr, r5
 8007ca6:	f04f 0a00 	mov.w	sl, #0
 8007caa:	682b      	ldr	r3, [r5, #0]
 8007cac:	f104 0c14 	add.w	ip, r4, #20
 8007cb0:	f8bc b000 	ldrh.w	fp, [ip]
 8007cb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	fb09 770b 	mla	r7, r9, fp, r7
 8007cbe:	4457      	add	r7, sl
 8007cc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cc4:	f84e 3b04 	str.w	r3, [lr], #4
 8007cc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cd0:	f8be 3000 	ldrh.w	r3, [lr]
 8007cd4:	4562      	cmp	r2, ip
 8007cd6:	fb09 330a 	mla	r3, r9, sl, r3
 8007cda:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce2:	d8e5      	bhi.n	8007cb0 <__multiply+0x108>
 8007ce4:	9f01      	ldr	r7, [sp, #4]
 8007ce6:	51eb      	str	r3, [r5, r7]
 8007ce8:	3504      	adds	r5, #4
 8007cea:	e79a      	b.n	8007c22 <__multiply+0x7a>
 8007cec:	3e01      	subs	r6, #1
 8007cee:	e79c      	b.n	8007c2a <__multiply+0x82>
 8007cf0:	080094ca 	.word	0x080094ca
 8007cf4:	080094db 	.word	0x080094db

08007cf8 <__pow5mult>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4615      	mov	r5, r2
 8007cfe:	f012 0203 	ands.w	r2, r2, #3
 8007d02:	4607      	mov	r7, r0
 8007d04:	460e      	mov	r6, r1
 8007d06:	d007      	beq.n	8007d18 <__pow5mult+0x20>
 8007d08:	4c25      	ldr	r4, [pc, #148]	@ (8007da0 <__pow5mult+0xa8>)
 8007d0a:	3a01      	subs	r2, #1
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d12:	f7ff fea1 	bl	8007a58 <__multadd>
 8007d16:	4606      	mov	r6, r0
 8007d18:	10ad      	asrs	r5, r5, #2
 8007d1a:	d03d      	beq.n	8007d98 <__pow5mult+0xa0>
 8007d1c:	69fc      	ldr	r4, [r7, #28]
 8007d1e:	b97c      	cbnz	r4, 8007d40 <__pow5mult+0x48>
 8007d20:	2010      	movs	r0, #16
 8007d22:	f7ff fd81 	bl	8007828 <malloc>
 8007d26:	4602      	mov	r2, r0
 8007d28:	61f8      	str	r0, [r7, #28]
 8007d2a:	b928      	cbnz	r0, 8007d38 <__pow5mult+0x40>
 8007d2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d30:	4b1c      	ldr	r3, [pc, #112]	@ (8007da4 <__pow5mult+0xac>)
 8007d32:	481d      	ldr	r0, [pc, #116]	@ (8007da8 <__pow5mult+0xb0>)
 8007d34:	f000 fe3e 	bl	80089b4 <__assert_func>
 8007d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d3c:	6004      	str	r4, [r0, #0]
 8007d3e:	60c4      	str	r4, [r0, #12]
 8007d40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d48:	b94c      	cbnz	r4, 8007d5e <__pow5mult+0x66>
 8007d4a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f7ff ff14 	bl	8007b7c <__i2b>
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d5c:	6003      	str	r3, [r0, #0]
 8007d5e:	f04f 0900 	mov.w	r9, #0
 8007d62:	07eb      	lsls	r3, r5, #31
 8007d64:	d50a      	bpl.n	8007d7c <__pow5mult+0x84>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f7ff ff1c 	bl	8007ba8 <__multiply>
 8007d70:	4680      	mov	r8, r0
 8007d72:	4631      	mov	r1, r6
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff fe4d 	bl	8007a14 <_Bfree>
 8007d7a:	4646      	mov	r6, r8
 8007d7c:	106d      	asrs	r5, r5, #1
 8007d7e:	d00b      	beq.n	8007d98 <__pow5mult+0xa0>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	b938      	cbnz	r0, 8007d94 <__pow5mult+0x9c>
 8007d84:	4622      	mov	r2, r4
 8007d86:	4621      	mov	r1, r4
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ff0d 	bl	8007ba8 <__multiply>
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f8c0 9000 	str.w	r9, [r0]
 8007d94:	4604      	mov	r4, r0
 8007d96:	e7e4      	b.n	8007d62 <__pow5mult+0x6a>
 8007d98:	4630      	mov	r0, r6
 8007d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9e:	bf00      	nop
 8007da0:	08009534 	.word	0x08009534
 8007da4:	0800945b 	.word	0x0800945b
 8007da8:	080094db 	.word	0x080094db

08007dac <__lshift>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	460c      	mov	r4, r1
 8007db2:	4607      	mov	r7, r0
 8007db4:	4691      	mov	r9, r2
 8007db6:	6923      	ldr	r3, [r4, #16]
 8007db8:	6849      	ldr	r1, [r1, #4]
 8007dba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dbe:	68a3      	ldr	r3, [r4, #8]
 8007dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dc4:	f108 0601 	add.w	r6, r8, #1
 8007dc8:	42b3      	cmp	r3, r6
 8007dca:	db0b      	blt.n	8007de4 <__lshift+0x38>
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff fde1 	bl	8007994 <_Balloc>
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	b948      	cbnz	r0, 8007dea <__lshift+0x3e>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <__lshift+0xd0>)
 8007dde:	4828      	ldr	r0, [pc, #160]	@ (8007e80 <__lshift+0xd4>)
 8007de0:	f000 fde8 	bl	80089b4 <__assert_func>
 8007de4:	3101      	adds	r1, #1
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	e7ee      	b.n	8007dc8 <__lshift+0x1c>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f100 0114 	add.w	r1, r0, #20
 8007df0:	f100 0210 	add.w	r2, r0, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	4553      	cmp	r3, sl
 8007df8:	db33      	blt.n	8007e62 <__lshift+0xb6>
 8007dfa:	6920      	ldr	r0, [r4, #16]
 8007dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e00:	f104 0314 	add.w	r3, r4, #20
 8007e04:	f019 091f 	ands.w	r9, r9, #31
 8007e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e10:	d02b      	beq.n	8007e6a <__lshift+0xbe>
 8007e12:	468a      	mov	sl, r1
 8007e14:	2200      	movs	r2, #0
 8007e16:	f1c9 0e20 	rsb	lr, r9, #32
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e20:	4310      	orrs	r0, r2
 8007e22:	f84a 0b04 	str.w	r0, [sl], #4
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	459c      	cmp	ip, r3
 8007e2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e30:	d8f3      	bhi.n	8007e1a <__lshift+0x6e>
 8007e32:	ebac 0304 	sub.w	r3, ip, r4
 8007e36:	3b15      	subs	r3, #21
 8007e38:	f023 0303 	bic.w	r3, r3, #3
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	f104 0015 	add.w	r0, r4, #21
 8007e42:	4584      	cmp	ip, r0
 8007e44:	bf38      	it	cc
 8007e46:	2304      	movcc	r3, #4
 8007e48:	50ca      	str	r2, [r1, r3]
 8007e4a:	b10a      	cbz	r2, 8007e50 <__lshift+0xa4>
 8007e4c:	f108 0602 	add.w	r6, r8, #2
 8007e50:	3e01      	subs	r6, #1
 8007e52:	4638      	mov	r0, r7
 8007e54:	4621      	mov	r1, r4
 8007e56:	612e      	str	r6, [r5, #16]
 8007e58:	f7ff fddc 	bl	8007a14 <_Bfree>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e66:	3301      	adds	r3, #1
 8007e68:	e7c5      	b.n	8007df6 <__lshift+0x4a>
 8007e6a:	3904      	subs	r1, #4
 8007e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e70:	459c      	cmp	ip, r3
 8007e72:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e76:	d8f9      	bhi.n	8007e6c <__lshift+0xc0>
 8007e78:	e7ea      	b.n	8007e50 <__lshift+0xa4>
 8007e7a:	bf00      	nop
 8007e7c:	080094ca 	.word	0x080094ca
 8007e80:	080094db 	.word	0x080094db

08007e84 <__mcmp>:
 8007e84:	4603      	mov	r3, r0
 8007e86:	690a      	ldr	r2, [r1, #16]
 8007e88:	6900      	ldr	r0, [r0, #16]
 8007e8a:	b530      	push	{r4, r5, lr}
 8007e8c:	1a80      	subs	r0, r0, r2
 8007e8e:	d10e      	bne.n	8007eae <__mcmp+0x2a>
 8007e90:	3314      	adds	r3, #20
 8007e92:	3114      	adds	r1, #20
 8007e94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ea4:	4295      	cmp	r5, r2
 8007ea6:	d003      	beq.n	8007eb0 <__mcmp+0x2c>
 8007ea8:	d205      	bcs.n	8007eb6 <__mcmp+0x32>
 8007eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8007eae:	bd30      	pop	{r4, r5, pc}
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d3f3      	bcc.n	8007e9c <__mcmp+0x18>
 8007eb4:	e7fb      	b.n	8007eae <__mcmp+0x2a>
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	e7f9      	b.n	8007eae <__mcmp+0x2a>
	...

08007ebc <__mdiff>:
 8007ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	4689      	mov	r9, r1
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	4614      	mov	r4, r2
 8007eca:	f7ff ffdb 	bl	8007e84 <__mcmp>
 8007ece:	1e05      	subs	r5, r0, #0
 8007ed0:	d112      	bne.n	8007ef8 <__mdiff+0x3c>
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff fd5d 	bl	8007994 <_Balloc>
 8007eda:	4602      	mov	r2, r0
 8007edc:	b928      	cbnz	r0, 8007eea <__mdiff+0x2e>
 8007ede:	f240 2137 	movw	r1, #567	@ 0x237
 8007ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8007fdc <__mdiff+0x120>)
 8007ee4:	483e      	ldr	r0, [pc, #248]	@ (8007fe0 <__mdiff+0x124>)
 8007ee6:	f000 fd65 	bl	80089b4 <__assert_func>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	bfbc      	itt	lt
 8007efa:	464b      	movlt	r3, r9
 8007efc:	46a1      	movlt	r9, r4
 8007efe:	4630      	mov	r0, r6
 8007f00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f04:	bfba      	itte	lt
 8007f06:	461c      	movlt	r4, r3
 8007f08:	2501      	movlt	r5, #1
 8007f0a:	2500      	movge	r5, #0
 8007f0c:	f7ff fd42 	bl	8007994 <_Balloc>
 8007f10:	4602      	mov	r2, r0
 8007f12:	b918      	cbnz	r0, 8007f1c <__mdiff+0x60>
 8007f14:	f240 2145 	movw	r1, #581	@ 0x245
 8007f18:	4b30      	ldr	r3, [pc, #192]	@ (8007fdc <__mdiff+0x120>)
 8007f1a:	e7e3      	b.n	8007ee4 <__mdiff+0x28>
 8007f1c:	f100 0b14 	add.w	fp, r0, #20
 8007f20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f24:	f109 0310 	add.w	r3, r9, #16
 8007f28:	60c5      	str	r5, [r0, #12]
 8007f2a:	f04f 0c00 	mov.w	ip, #0
 8007f2e:	f109 0514 	add.w	r5, r9, #20
 8007f32:	46d9      	mov	r9, fp
 8007f34:	6926      	ldr	r6, [r4, #16]
 8007f36:	f104 0e14 	add.w	lr, r4, #20
 8007f3a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f4e:	b281      	uxth	r1, r0
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	fa1f f38a 	uxth.w	r3, sl
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	0c00      	lsrs	r0, r0, #16
 8007f5a:	4463      	add	r3, ip
 8007f5c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f60:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f6a:	4576      	cmp	r6, lr
 8007f6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f70:	f849 3b04 	str.w	r3, [r9], #4
 8007f74:	d8e6      	bhi.n	8007f44 <__mdiff+0x88>
 8007f76:	1b33      	subs	r3, r6, r4
 8007f78:	3b15      	subs	r3, #21
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	3415      	adds	r4, #21
 8007f80:	3304      	adds	r3, #4
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	bf38      	it	cc
 8007f86:	2304      	movcc	r3, #4
 8007f88:	441d      	add	r5, r3
 8007f8a:	445b      	add	r3, fp
 8007f8c:	461e      	mov	r6, r3
 8007f8e:	462c      	mov	r4, r5
 8007f90:	4544      	cmp	r4, r8
 8007f92:	d30e      	bcc.n	8007fb2 <__mdiff+0xf6>
 8007f94:	f108 0103 	add.w	r1, r8, #3
 8007f98:	1b49      	subs	r1, r1, r5
 8007f9a:	f021 0103 	bic.w	r1, r1, #3
 8007f9e:	3d03      	subs	r5, #3
 8007fa0:	45a8      	cmp	r8, r5
 8007fa2:	bf38      	it	cc
 8007fa4:	2100      	movcc	r1, #0
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fac:	b199      	cbz	r1, 8007fd6 <__mdiff+0x11a>
 8007fae:	6117      	str	r7, [r2, #16]
 8007fb0:	e79e      	b.n	8007ef0 <__mdiff+0x34>
 8007fb2:	46e6      	mov	lr, ip
 8007fb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fb8:	fa1f fc81 	uxth.w	ip, r1
 8007fbc:	44f4      	add	ip, lr
 8007fbe:	0c08      	lsrs	r0, r1, #16
 8007fc0:	4471      	add	r1, lr
 8007fc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fd0:	f846 1b04 	str.w	r1, [r6], #4
 8007fd4:	e7dc      	b.n	8007f90 <__mdiff+0xd4>
 8007fd6:	3f01      	subs	r7, #1
 8007fd8:	e7e6      	b.n	8007fa8 <__mdiff+0xec>
 8007fda:	bf00      	nop
 8007fdc:	080094ca 	.word	0x080094ca
 8007fe0:	080094db 	.word	0x080094db

08007fe4 <__d2b>:
 8007fe4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007fe8:	2101      	movs	r1, #1
 8007fea:	4690      	mov	r8, r2
 8007fec:	4699      	mov	r9, r3
 8007fee:	9e08      	ldr	r6, [sp, #32]
 8007ff0:	f7ff fcd0 	bl	8007994 <_Balloc>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	b930      	cbnz	r0, 8008006 <__d2b+0x22>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ffe:	4b23      	ldr	r3, [pc, #140]	@ (800808c <__d2b+0xa8>)
 8008000:	4823      	ldr	r0, [pc, #140]	@ (8008090 <__d2b+0xac>)
 8008002:	f000 fcd7 	bl	80089b4 <__assert_func>
 8008006:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800800a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800800e:	b10d      	cbz	r5, 8008014 <__d2b+0x30>
 8008010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	f1b8 0300 	subs.w	r3, r8, #0
 800801a:	d024      	beq.n	8008066 <__d2b+0x82>
 800801c:	4668      	mov	r0, sp
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	f7ff fd7f 	bl	8007b22 <__lo0bits>
 8008024:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008028:	b1d8      	cbz	r0, 8008062 <__d2b+0x7e>
 800802a:	f1c0 0320 	rsb	r3, r0, #32
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	430b      	orrs	r3, r1
 8008034:	40c2      	lsrs	r2, r0
 8008036:	6163      	str	r3, [r4, #20]
 8008038:	9201      	str	r2, [sp, #4]
 800803a:	9b01      	ldr	r3, [sp, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf0c      	ite	eq
 8008040:	2201      	moveq	r2, #1
 8008042:	2202      	movne	r2, #2
 8008044:	61a3      	str	r3, [r4, #24]
 8008046:	6122      	str	r2, [r4, #16]
 8008048:	b1ad      	cbz	r5, 8008076 <__d2b+0x92>
 800804a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800804e:	4405      	add	r5, r0
 8008050:	6035      	str	r5, [r6, #0]
 8008052:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	6018      	str	r0, [r3, #0]
 800805a:	4620      	mov	r0, r4
 800805c:	b002      	add	sp, #8
 800805e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008062:	6161      	str	r1, [r4, #20]
 8008064:	e7e9      	b.n	800803a <__d2b+0x56>
 8008066:	a801      	add	r0, sp, #4
 8008068:	f7ff fd5b 	bl	8007b22 <__lo0bits>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	6163      	str	r3, [r4, #20]
 8008072:	3020      	adds	r0, #32
 8008074:	e7e7      	b.n	8008046 <__d2b+0x62>
 8008076:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800807a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800807e:	6030      	str	r0, [r6, #0]
 8008080:	6918      	ldr	r0, [r3, #16]
 8008082:	f7ff fd2f 	bl	8007ae4 <__hi0bits>
 8008086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800808a:	e7e4      	b.n	8008056 <__d2b+0x72>
 800808c:	080094ca 	.word	0x080094ca
 8008090:	080094db 	.word	0x080094db

08008094 <__ssputs_r>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	461f      	mov	r7, r3
 800809a:	688e      	ldr	r6, [r1, #8]
 800809c:	4682      	mov	sl, r0
 800809e:	42be      	cmp	r6, r7
 80080a0:	460c      	mov	r4, r1
 80080a2:	4690      	mov	r8, r2
 80080a4:	680b      	ldr	r3, [r1, #0]
 80080a6:	d82d      	bhi.n	8008104 <__ssputs_r+0x70>
 80080a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080b0:	d026      	beq.n	8008100 <__ssputs_r+0x6c>
 80080b2:	6965      	ldr	r5, [r4, #20]
 80080b4:	6909      	ldr	r1, [r1, #16]
 80080b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ba:	eba3 0901 	sub.w	r9, r3, r1
 80080be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080c2:	1c7b      	adds	r3, r7, #1
 80080c4:	444b      	add	r3, r9
 80080c6:	106d      	asrs	r5, r5, #1
 80080c8:	429d      	cmp	r5, r3
 80080ca:	bf38      	it	cc
 80080cc:	461d      	movcc	r5, r3
 80080ce:	0553      	lsls	r3, r2, #21
 80080d0:	d527      	bpl.n	8008122 <__ssputs_r+0x8e>
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7ff fbd2 	bl	800787c <_malloc_r>
 80080d8:	4606      	mov	r6, r0
 80080da:	b360      	cbz	r0, 8008136 <__ssputs_r+0xa2>
 80080dc:	464a      	mov	r2, r9
 80080de:	6921      	ldr	r1, [r4, #16]
 80080e0:	f000 fc5a 	bl	8008998 <memcpy>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ee:	81a3      	strh	r3, [r4, #12]
 80080f0:	6126      	str	r6, [r4, #16]
 80080f2:	444e      	add	r6, r9
 80080f4:	6026      	str	r6, [r4, #0]
 80080f6:	463e      	mov	r6, r7
 80080f8:	6165      	str	r5, [r4, #20]
 80080fa:	eba5 0509 	sub.w	r5, r5, r9
 80080fe:	60a5      	str	r5, [r4, #8]
 8008100:	42be      	cmp	r6, r7
 8008102:	d900      	bls.n	8008106 <__ssputs_r+0x72>
 8008104:	463e      	mov	r6, r7
 8008106:	4632      	mov	r2, r6
 8008108:	4641      	mov	r1, r8
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	f000 fbf8 	bl	8008900 <memmove>
 8008110:	2000      	movs	r0, #0
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	60a3      	str	r3, [r4, #8]
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	4433      	add	r3, r6
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	462a      	mov	r2, r5
 8008124:	f000 fc8a 	bl	8008a3c <_realloc_r>
 8008128:	4606      	mov	r6, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1e0      	bne.n	80080f0 <__ssputs_r+0x5c>
 800812e:	4650      	mov	r0, sl
 8008130:	6921      	ldr	r1, [r4, #16]
 8008132:	f7ff fb31 	bl	8007798 <_free_r>
 8008136:	230c      	movs	r3, #12
 8008138:	f8ca 3000 	str.w	r3, [sl]
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f04f 30ff 	mov.w	r0, #4294967295
 8008142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	e7e9      	b.n	800811e <__ssputs_r+0x8a>
	...

0800814c <_svfiprintf_r>:
 800814c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008150:	4698      	mov	r8, r3
 8008152:	898b      	ldrh	r3, [r1, #12]
 8008154:	4607      	mov	r7, r0
 8008156:	061b      	lsls	r3, r3, #24
 8008158:	460d      	mov	r5, r1
 800815a:	4614      	mov	r4, r2
 800815c:	b09d      	sub	sp, #116	@ 0x74
 800815e:	d510      	bpl.n	8008182 <_svfiprintf_r+0x36>
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b973      	cbnz	r3, 8008182 <_svfiprintf_r+0x36>
 8008164:	2140      	movs	r1, #64	@ 0x40
 8008166:	f7ff fb89 	bl	800787c <_malloc_r>
 800816a:	6028      	str	r0, [r5, #0]
 800816c:	6128      	str	r0, [r5, #16]
 800816e:	b930      	cbnz	r0, 800817e <_svfiprintf_r+0x32>
 8008170:	230c      	movs	r3, #12
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	b01d      	add	sp, #116	@ 0x74
 800817a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817e:	2340      	movs	r3, #64	@ 0x40
 8008180:	616b      	str	r3, [r5, #20]
 8008182:	2300      	movs	r3, #0
 8008184:	9309      	str	r3, [sp, #36]	@ 0x24
 8008186:	2320      	movs	r3, #32
 8008188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800818c:	2330      	movs	r3, #48	@ 0x30
 800818e:	f04f 0901 	mov.w	r9, #1
 8008192:	f8cd 800c 	str.w	r8, [sp, #12]
 8008196:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008330 <_svfiprintf_r+0x1e4>
 800819a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819e:	4623      	mov	r3, r4
 80081a0:	469a      	mov	sl, r3
 80081a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a6:	b10a      	cbz	r2, 80081ac <_svfiprintf_r+0x60>
 80081a8:	2a25      	cmp	r2, #37	@ 0x25
 80081aa:	d1f9      	bne.n	80081a0 <_svfiprintf_r+0x54>
 80081ac:	ebba 0b04 	subs.w	fp, sl, r4
 80081b0:	d00b      	beq.n	80081ca <_svfiprintf_r+0x7e>
 80081b2:	465b      	mov	r3, fp
 80081b4:	4622      	mov	r2, r4
 80081b6:	4629      	mov	r1, r5
 80081b8:	4638      	mov	r0, r7
 80081ba:	f7ff ff6b 	bl	8008094 <__ssputs_r>
 80081be:	3001      	adds	r0, #1
 80081c0:	f000 80a7 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c6:	445a      	add	r2, fp
 80081c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ca:	f89a 3000 	ldrb.w	r3, [sl]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 809f 	beq.w	8008312 <_svfiprintf_r+0x1c6>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081de:	f10a 0a01 	add.w	sl, sl, #1
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80081ec:	4654      	mov	r4, sl
 80081ee:	2205      	movs	r2, #5
 80081f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f4:	484e      	ldr	r0, [pc, #312]	@ (8008330 <_svfiprintf_r+0x1e4>)
 80081f6:	f7fe fc6e 	bl	8006ad6 <memchr>
 80081fa:	9a04      	ldr	r2, [sp, #16]
 80081fc:	b9d8      	cbnz	r0, 8008236 <_svfiprintf_r+0xea>
 80081fe:	06d0      	lsls	r0, r2, #27
 8008200:	bf44      	itt	mi
 8008202:	2320      	movmi	r3, #32
 8008204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008208:	0711      	lsls	r1, r2, #28
 800820a:	bf44      	itt	mi
 800820c:	232b      	movmi	r3, #43	@ 0x2b
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b2a      	cmp	r3, #42	@ 0x2a
 8008218:	d015      	beq.n	8008246 <_svfiprintf_r+0xfa>
 800821a:	4654      	mov	r4, sl
 800821c:	2000      	movs	r0, #0
 800821e:	f04f 0c0a 	mov.w	ip, #10
 8008222:	9a07      	ldr	r2, [sp, #28]
 8008224:	4621      	mov	r1, r4
 8008226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822a:	3b30      	subs	r3, #48	@ 0x30
 800822c:	2b09      	cmp	r3, #9
 800822e:	d94b      	bls.n	80082c8 <_svfiprintf_r+0x17c>
 8008230:	b1b0      	cbz	r0, 8008260 <_svfiprintf_r+0x114>
 8008232:	9207      	str	r2, [sp, #28]
 8008234:	e014      	b.n	8008260 <_svfiprintf_r+0x114>
 8008236:	eba0 0308 	sub.w	r3, r0, r8
 800823a:	fa09 f303 	lsl.w	r3, r9, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	46a2      	mov	sl, r4
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	e7d2      	b.n	80081ec <_svfiprintf_r+0xa0>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d19      	adds	r1, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9103      	str	r1, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbb      	ittet	lt
 8008252:	425b      	neglt	r3, r3
 8008254:	f042 0202 	orrlt.w	r2, r2, #2
 8008258:	9307      	strge	r3, [sp, #28]
 800825a:	9307      	strlt	r3, [sp, #28]
 800825c:	bfb8      	it	lt
 800825e:	9204      	strlt	r2, [sp, #16]
 8008260:	7823      	ldrb	r3, [r4, #0]
 8008262:	2b2e      	cmp	r3, #46	@ 0x2e
 8008264:	d10a      	bne.n	800827c <_svfiprintf_r+0x130>
 8008266:	7863      	ldrb	r3, [r4, #1]
 8008268:	2b2a      	cmp	r3, #42	@ 0x2a
 800826a:	d132      	bne.n	80082d2 <_svfiprintf_r+0x186>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	3402      	adds	r4, #2
 8008270:	1d1a      	adds	r2, r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	9203      	str	r2, [sp, #12]
 8008276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008334 <_svfiprintf_r+0x1e8>
 8008280:	2203      	movs	r2, #3
 8008282:	4650      	mov	r0, sl
 8008284:	7821      	ldrb	r1, [r4, #0]
 8008286:	f7fe fc26 	bl	8006ad6 <memchr>
 800828a:	b138      	cbz	r0, 800829c <_svfiprintf_r+0x150>
 800828c:	2240      	movs	r2, #64	@ 0x40
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	eba0 000a 	sub.w	r0, r0, sl
 8008294:	4082      	lsls	r2, r0
 8008296:	4313      	orrs	r3, r2
 8008298:	3401      	adds	r4, #1
 800829a:	9304      	str	r3, [sp, #16]
 800829c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a0:	2206      	movs	r2, #6
 80082a2:	4825      	ldr	r0, [pc, #148]	@ (8008338 <_svfiprintf_r+0x1ec>)
 80082a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082a8:	f7fe fc15 	bl	8006ad6 <memchr>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	d036      	beq.n	800831e <_svfiprintf_r+0x1d2>
 80082b0:	4b22      	ldr	r3, [pc, #136]	@ (800833c <_svfiprintf_r+0x1f0>)
 80082b2:	bb1b      	cbnz	r3, 80082fc <_svfiprintf_r+0x1b0>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	3307      	adds	r3, #7
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	3308      	adds	r3, #8
 80082be:	9303      	str	r3, [sp, #12]
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	4433      	add	r3, r6
 80082c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c6:	e76a      	b.n	800819e <_svfiprintf_r+0x52>
 80082c8:	460c      	mov	r4, r1
 80082ca:	2001      	movs	r0, #1
 80082cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d0:	e7a8      	b.n	8008224 <_svfiprintf_r+0xd8>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f04f 0c0a 	mov.w	ip, #10
 80082d8:	4619      	mov	r1, r3
 80082da:	3401      	adds	r4, #1
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	4620      	mov	r0, r4
 80082e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e4:	3a30      	subs	r2, #48	@ 0x30
 80082e6:	2a09      	cmp	r2, #9
 80082e8:	d903      	bls.n	80082f2 <_svfiprintf_r+0x1a6>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0c6      	beq.n	800827c <_svfiprintf_r+0x130>
 80082ee:	9105      	str	r1, [sp, #20]
 80082f0:	e7c4      	b.n	800827c <_svfiprintf_r+0x130>
 80082f2:	4604      	mov	r4, r0
 80082f4:	2301      	movs	r3, #1
 80082f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fa:	e7f0      	b.n	80082de <_svfiprintf_r+0x192>
 80082fc:	ab03      	add	r3, sp, #12
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	462a      	mov	r2, r5
 8008302:	4638      	mov	r0, r7
 8008304:	4b0e      	ldr	r3, [pc, #56]	@ (8008340 <_svfiprintf_r+0x1f4>)
 8008306:	a904      	add	r1, sp, #16
 8008308:	f7fd fdb4 	bl	8005e74 <_printf_float>
 800830c:	1c42      	adds	r2, r0, #1
 800830e:	4606      	mov	r6, r0
 8008310:	d1d6      	bne.n	80082c0 <_svfiprintf_r+0x174>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	065b      	lsls	r3, r3, #25
 8008316:	f53f af2d 	bmi.w	8008174 <_svfiprintf_r+0x28>
 800831a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800831c:	e72c      	b.n	8008178 <_svfiprintf_r+0x2c>
 800831e:	ab03      	add	r3, sp, #12
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	462a      	mov	r2, r5
 8008324:	4638      	mov	r0, r7
 8008326:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <_svfiprintf_r+0x1f4>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	f7fe f841 	bl	80063b0 <_printf_i>
 800832e:	e7ed      	b.n	800830c <_svfiprintf_r+0x1c0>
 8008330:	08009630 	.word	0x08009630
 8008334:	08009636 	.word	0x08009636
 8008338:	0800963a 	.word	0x0800963a
 800833c:	08005e75 	.word	0x08005e75
 8008340:	08008095 	.word	0x08008095

08008344 <__sfputc_r>:
 8008344:	6893      	ldr	r3, [r2, #8]
 8008346:	b410      	push	{r4}
 8008348:	3b01      	subs	r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	6093      	str	r3, [r2, #8]
 800834e:	da07      	bge.n	8008360 <__sfputc_r+0x1c>
 8008350:	6994      	ldr	r4, [r2, #24]
 8008352:	42a3      	cmp	r3, r4
 8008354:	db01      	blt.n	800835a <__sfputc_r+0x16>
 8008356:	290a      	cmp	r1, #10
 8008358:	d102      	bne.n	8008360 <__sfputc_r+0x1c>
 800835a:	bc10      	pop	{r4}
 800835c:	f000 ba3b 	b.w	80087d6 <__swbuf_r>
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	1c58      	adds	r0, r3, #1
 8008364:	6010      	str	r0, [r2, #0]
 8008366:	7019      	strb	r1, [r3, #0]
 8008368:	4608      	mov	r0, r1
 800836a:	bc10      	pop	{r4}
 800836c:	4770      	bx	lr

0800836e <__sfputs_r>:
 800836e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008370:	4606      	mov	r6, r0
 8008372:	460f      	mov	r7, r1
 8008374:	4614      	mov	r4, r2
 8008376:	18d5      	adds	r5, r2, r3
 8008378:	42ac      	cmp	r4, r5
 800837a:	d101      	bne.n	8008380 <__sfputs_r+0x12>
 800837c:	2000      	movs	r0, #0
 800837e:	e007      	b.n	8008390 <__sfputs_r+0x22>
 8008380:	463a      	mov	r2, r7
 8008382:	4630      	mov	r0, r6
 8008384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008388:	f7ff ffdc 	bl	8008344 <__sfputc_r>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d1f3      	bne.n	8008378 <__sfputs_r+0xa>
 8008390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008394 <_vfiprintf_r>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460d      	mov	r5, r1
 800839a:	4614      	mov	r4, r2
 800839c:	4698      	mov	r8, r3
 800839e:	4606      	mov	r6, r0
 80083a0:	b09d      	sub	sp, #116	@ 0x74
 80083a2:	b118      	cbz	r0, 80083ac <_vfiprintf_r+0x18>
 80083a4:	6a03      	ldr	r3, [r0, #32]
 80083a6:	b90b      	cbnz	r3, 80083ac <_vfiprintf_r+0x18>
 80083a8:	f7fe f9ae 	bl	8006708 <__sinit>
 80083ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	d405      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	059a      	lsls	r2, r3, #22
 80083b6:	d402      	bmi.n	80083be <_vfiprintf_r+0x2a>
 80083b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ba:	f7fe fb8a 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	071b      	lsls	r3, r3, #28
 80083c2:	d501      	bpl.n	80083c8 <_vfiprintf_r+0x34>
 80083c4:	692b      	ldr	r3, [r5, #16]
 80083c6:	b99b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x5c>
 80083c8:	4629      	mov	r1, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	f000 fa42 	bl	8008854 <__swsetup_r>
 80083d0:	b170      	cbz	r0, 80083f0 <_vfiprintf_r+0x5c>
 80083d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d4:	07dc      	lsls	r4, r3, #31
 80083d6:	d504      	bpl.n	80083e2 <_vfiprintf_r+0x4e>
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	b01d      	add	sp, #116	@ 0x74
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	0598      	lsls	r0, r3, #22
 80083e6:	d4f7      	bmi.n	80083d8 <_vfiprintf_r+0x44>
 80083e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ea:	f7fe fb73 	bl	8006ad4 <__retarget_lock_release_recursive>
 80083ee:	e7f3      	b.n	80083d8 <_vfiprintf_r+0x44>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	2320      	movs	r3, #32
 80083f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083fa:	2330      	movs	r3, #48	@ 0x30
 80083fc:	f04f 0901 	mov.w	r9, #1
 8008400:	f8cd 800c 	str.w	r8, [sp, #12]
 8008404:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80085b0 <_vfiprintf_r+0x21c>
 8008408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800840c:	4623      	mov	r3, r4
 800840e:	469a      	mov	sl, r3
 8008410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008414:	b10a      	cbz	r2, 800841a <_vfiprintf_r+0x86>
 8008416:	2a25      	cmp	r2, #37	@ 0x25
 8008418:	d1f9      	bne.n	800840e <_vfiprintf_r+0x7a>
 800841a:	ebba 0b04 	subs.w	fp, sl, r4
 800841e:	d00b      	beq.n	8008438 <_vfiprintf_r+0xa4>
 8008420:	465b      	mov	r3, fp
 8008422:	4622      	mov	r2, r4
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffa1 	bl	800836e <__sfputs_r>
 800842c:	3001      	adds	r0, #1
 800842e:	f000 80a7 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008434:	445a      	add	r2, fp
 8008436:	9209      	str	r2, [sp, #36]	@ 0x24
 8008438:	f89a 3000 	ldrb.w	r3, [sl]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 809f 	beq.w	8008580 <_vfiprintf_r+0x1ec>
 8008442:	2300      	movs	r3, #0
 8008444:	f04f 32ff 	mov.w	r2, #4294967295
 8008448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008458:	931a      	str	r3, [sp, #104]	@ 0x68
 800845a:	4654      	mov	r4, sl
 800845c:	2205      	movs	r2, #5
 800845e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008462:	4853      	ldr	r0, [pc, #332]	@ (80085b0 <_vfiprintf_r+0x21c>)
 8008464:	f7fe fb37 	bl	8006ad6 <memchr>
 8008468:	9a04      	ldr	r2, [sp, #16]
 800846a:	b9d8      	cbnz	r0, 80084a4 <_vfiprintf_r+0x110>
 800846c:	06d1      	lsls	r1, r2, #27
 800846e:	bf44      	itt	mi
 8008470:	2320      	movmi	r3, #32
 8008472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008476:	0713      	lsls	r3, r2, #28
 8008478:	bf44      	itt	mi
 800847a:	232b      	movmi	r3, #43	@ 0x2b
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008480:	f89a 3000 	ldrb.w	r3, [sl]
 8008484:	2b2a      	cmp	r3, #42	@ 0x2a
 8008486:	d015      	beq.n	80084b4 <_vfiprintf_r+0x120>
 8008488:	4654      	mov	r4, sl
 800848a:	2000      	movs	r0, #0
 800848c:	f04f 0c0a 	mov.w	ip, #10
 8008490:	9a07      	ldr	r2, [sp, #28]
 8008492:	4621      	mov	r1, r4
 8008494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008498:	3b30      	subs	r3, #48	@ 0x30
 800849a:	2b09      	cmp	r3, #9
 800849c:	d94b      	bls.n	8008536 <_vfiprintf_r+0x1a2>
 800849e:	b1b0      	cbz	r0, 80084ce <_vfiprintf_r+0x13a>
 80084a0:	9207      	str	r2, [sp, #28]
 80084a2:	e014      	b.n	80084ce <_vfiprintf_r+0x13a>
 80084a4:	eba0 0308 	sub.w	r3, r0, r8
 80084a8:	fa09 f303 	lsl.w	r3, r9, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	46a2      	mov	sl, r4
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	e7d2      	b.n	800845a <_vfiprintf_r+0xc6>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1d19      	adds	r1, r3, #4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbb      	ittet	lt
 80084c0:	425b      	neglt	r3, r3
 80084c2:	f042 0202 	orrlt.w	r2, r2, #2
 80084c6:	9307      	strge	r3, [sp, #28]
 80084c8:	9307      	strlt	r3, [sp, #28]
 80084ca:	bfb8      	it	lt
 80084cc:	9204      	strlt	r2, [sp, #16]
 80084ce:	7823      	ldrb	r3, [r4, #0]
 80084d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80084d2:	d10a      	bne.n	80084ea <_vfiprintf_r+0x156>
 80084d4:	7863      	ldrb	r3, [r4, #1]
 80084d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084d8:	d132      	bne.n	8008540 <_vfiprintf_r+0x1ac>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	3402      	adds	r4, #2
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	9203      	str	r2, [sp, #12]
 80084e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80085b4 <_vfiprintf_r+0x220>
 80084ee:	2203      	movs	r2, #3
 80084f0:	4650      	mov	r0, sl
 80084f2:	7821      	ldrb	r1, [r4, #0]
 80084f4:	f7fe faef 	bl	8006ad6 <memchr>
 80084f8:	b138      	cbz	r0, 800850a <_vfiprintf_r+0x176>
 80084fa:	2240      	movs	r2, #64	@ 0x40
 80084fc:	9b04      	ldr	r3, [sp, #16]
 80084fe:	eba0 000a 	sub.w	r0, r0, sl
 8008502:	4082      	lsls	r2, r0
 8008504:	4313      	orrs	r3, r2
 8008506:	3401      	adds	r4, #1
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850e:	2206      	movs	r2, #6
 8008510:	4829      	ldr	r0, [pc, #164]	@ (80085b8 <_vfiprintf_r+0x224>)
 8008512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008516:	f7fe fade 	bl	8006ad6 <memchr>
 800851a:	2800      	cmp	r0, #0
 800851c:	d03f      	beq.n	800859e <_vfiprintf_r+0x20a>
 800851e:	4b27      	ldr	r3, [pc, #156]	@ (80085bc <_vfiprintf_r+0x228>)
 8008520:	bb1b      	cbnz	r3, 800856a <_vfiprintf_r+0x1d6>
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	3307      	adds	r3, #7
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	3308      	adds	r3, #8
 800852c:	9303      	str	r3, [sp, #12]
 800852e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008530:	443b      	add	r3, r7
 8008532:	9309      	str	r3, [sp, #36]	@ 0x24
 8008534:	e76a      	b.n	800840c <_vfiprintf_r+0x78>
 8008536:	460c      	mov	r4, r1
 8008538:	2001      	movs	r0, #1
 800853a:	fb0c 3202 	mla	r2, ip, r2, r3
 800853e:	e7a8      	b.n	8008492 <_vfiprintf_r+0xfe>
 8008540:	2300      	movs	r3, #0
 8008542:	f04f 0c0a 	mov.w	ip, #10
 8008546:	4619      	mov	r1, r3
 8008548:	3401      	adds	r4, #1
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	4620      	mov	r0, r4
 800854e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008552:	3a30      	subs	r2, #48	@ 0x30
 8008554:	2a09      	cmp	r2, #9
 8008556:	d903      	bls.n	8008560 <_vfiprintf_r+0x1cc>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0c6      	beq.n	80084ea <_vfiprintf_r+0x156>
 800855c:	9105      	str	r1, [sp, #20]
 800855e:	e7c4      	b.n	80084ea <_vfiprintf_r+0x156>
 8008560:	4604      	mov	r4, r0
 8008562:	2301      	movs	r3, #1
 8008564:	fb0c 2101 	mla	r1, ip, r1, r2
 8008568:	e7f0      	b.n	800854c <_vfiprintf_r+0x1b8>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4630      	mov	r0, r6
 8008572:	4b13      	ldr	r3, [pc, #76]	@ (80085c0 <_vfiprintf_r+0x22c>)
 8008574:	a904      	add	r1, sp, #16
 8008576:	f7fd fc7d 	bl	8005e74 <_printf_float>
 800857a:	4607      	mov	r7, r0
 800857c:	1c78      	adds	r0, r7, #1
 800857e:	d1d6      	bne.n	800852e <_vfiprintf_r+0x19a>
 8008580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008582:	07d9      	lsls	r1, r3, #31
 8008584:	d405      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	059a      	lsls	r2, r3, #22
 800858a:	d402      	bmi.n	8008592 <_vfiprintf_r+0x1fe>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7fe faa1 	bl	8006ad4 <__retarget_lock_release_recursive>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	065b      	lsls	r3, r3, #25
 8008596:	f53f af1f 	bmi.w	80083d8 <_vfiprintf_r+0x44>
 800859a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800859c:	e71e      	b.n	80083dc <_vfiprintf_r+0x48>
 800859e:	ab03      	add	r3, sp, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	462a      	mov	r2, r5
 80085a4:	4630      	mov	r0, r6
 80085a6:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <_vfiprintf_r+0x22c>)
 80085a8:	a904      	add	r1, sp, #16
 80085aa:	f7fd ff01 	bl	80063b0 <_printf_i>
 80085ae:	e7e4      	b.n	800857a <_vfiprintf_r+0x1e6>
 80085b0:	08009630 	.word	0x08009630
 80085b4:	08009636 	.word	0x08009636
 80085b8:	0800963a 	.word	0x0800963a
 80085bc:	08005e75 	.word	0x08005e75
 80085c0:	0800836f 	.word	0x0800836f

080085c4 <__sflush_r>:
 80085c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	0716      	lsls	r6, r2, #28
 80085cc:	4605      	mov	r5, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	d454      	bmi.n	800867c <__sflush_r+0xb8>
 80085d2:	684b      	ldr	r3, [r1, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dc02      	bgt.n	80085de <__sflush_r+0x1a>
 80085d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd48      	ble.n	8008670 <__sflush_r+0xac>
 80085de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	d045      	beq.n	8008670 <__sflush_r+0xac>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085ea:	682f      	ldr	r7, [r5, #0]
 80085ec:	6a21      	ldr	r1, [r4, #32]
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	d030      	beq.n	8008654 <__sflush_r+0x90>
 80085f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	0759      	lsls	r1, r3, #29
 80085f8:	d505      	bpl.n	8008606 <__sflush_r+0x42>
 80085fa:	6863      	ldr	r3, [r4, #4]
 80085fc:	1ad2      	subs	r2, r2, r3
 80085fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008600:	b10b      	cbz	r3, 8008606 <__sflush_r+0x42>
 8008602:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008604:	1ad2      	subs	r2, r2, r3
 8008606:	2300      	movs	r3, #0
 8008608:	4628      	mov	r0, r5
 800860a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800860c:	6a21      	ldr	r1, [r4, #32]
 800860e:	47b0      	blx	r6
 8008610:	1c43      	adds	r3, r0, #1
 8008612:	89a3      	ldrh	r3, [r4, #12]
 8008614:	d106      	bne.n	8008624 <__sflush_r+0x60>
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	291d      	cmp	r1, #29
 800861a:	d82b      	bhi.n	8008674 <__sflush_r+0xb0>
 800861c:	4a28      	ldr	r2, [pc, #160]	@ (80086c0 <__sflush_r+0xfc>)
 800861e:	410a      	asrs	r2, r1
 8008620:	07d6      	lsls	r6, r2, #31
 8008622:	d427      	bmi.n	8008674 <__sflush_r+0xb0>
 8008624:	2200      	movs	r2, #0
 8008626:	6062      	str	r2, [r4, #4]
 8008628:	6922      	ldr	r2, [r4, #16]
 800862a:	04d9      	lsls	r1, r3, #19
 800862c:	6022      	str	r2, [r4, #0]
 800862e:	d504      	bpl.n	800863a <__sflush_r+0x76>
 8008630:	1c42      	adds	r2, r0, #1
 8008632:	d101      	bne.n	8008638 <__sflush_r+0x74>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	b903      	cbnz	r3, 800863a <__sflush_r+0x76>
 8008638:	6560      	str	r0, [r4, #84]	@ 0x54
 800863a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800863c:	602f      	str	r7, [r5, #0]
 800863e:	b1b9      	cbz	r1, 8008670 <__sflush_r+0xac>
 8008640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008644:	4299      	cmp	r1, r3
 8008646:	d002      	beq.n	800864e <__sflush_r+0x8a>
 8008648:	4628      	mov	r0, r5
 800864a:	f7ff f8a5 	bl	8007798 <_free_r>
 800864e:	2300      	movs	r3, #0
 8008650:	6363      	str	r3, [r4, #52]	@ 0x34
 8008652:	e00d      	b.n	8008670 <__sflush_r+0xac>
 8008654:	2301      	movs	r3, #1
 8008656:	4628      	mov	r0, r5
 8008658:	47b0      	blx	r6
 800865a:	4602      	mov	r2, r0
 800865c:	1c50      	adds	r0, r2, #1
 800865e:	d1c9      	bne.n	80085f4 <__sflush_r+0x30>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0c6      	beq.n	80085f4 <__sflush_r+0x30>
 8008666:	2b1d      	cmp	r3, #29
 8008668:	d001      	beq.n	800866e <__sflush_r+0xaa>
 800866a:	2b16      	cmp	r3, #22
 800866c:	d11d      	bne.n	80086aa <__sflush_r+0xe6>
 800866e:	602f      	str	r7, [r5, #0]
 8008670:	2000      	movs	r0, #0
 8008672:	e021      	b.n	80086b8 <__sflush_r+0xf4>
 8008674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008678:	b21b      	sxth	r3, r3
 800867a:	e01a      	b.n	80086b2 <__sflush_r+0xee>
 800867c:	690f      	ldr	r7, [r1, #16]
 800867e:	2f00      	cmp	r7, #0
 8008680:	d0f6      	beq.n	8008670 <__sflush_r+0xac>
 8008682:	0793      	lsls	r3, r2, #30
 8008684:	bf18      	it	ne
 8008686:	2300      	movne	r3, #0
 8008688:	680e      	ldr	r6, [r1, #0]
 800868a:	bf08      	it	eq
 800868c:	694b      	ldreq	r3, [r1, #20]
 800868e:	1bf6      	subs	r6, r6, r7
 8008690:	600f      	str	r7, [r1, #0]
 8008692:	608b      	str	r3, [r1, #8]
 8008694:	2e00      	cmp	r6, #0
 8008696:	ddeb      	ble.n	8008670 <__sflush_r+0xac>
 8008698:	4633      	mov	r3, r6
 800869a:	463a      	mov	r2, r7
 800869c:	4628      	mov	r0, r5
 800869e:	6a21      	ldr	r1, [r4, #32]
 80086a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80086a4:	47e0      	blx	ip
 80086a6:	2800      	cmp	r0, #0
 80086a8:	dc07      	bgt.n	80086ba <__sflush_r+0xf6>
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b2:	f04f 30ff 	mov.w	r0, #4294967295
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ba:	4407      	add	r7, r0
 80086bc:	1a36      	subs	r6, r6, r0
 80086be:	e7e9      	b.n	8008694 <__sflush_r+0xd0>
 80086c0:	dfbffffe 	.word	0xdfbffffe

080086c4 <_fflush_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	690b      	ldr	r3, [r1, #16]
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	b913      	cbnz	r3, 80086d4 <_fflush_r+0x10>
 80086ce:	2500      	movs	r5, #0
 80086d0:	4628      	mov	r0, r5
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	b118      	cbz	r0, 80086de <_fflush_r+0x1a>
 80086d6:	6a03      	ldr	r3, [r0, #32]
 80086d8:	b90b      	cbnz	r3, 80086de <_fflush_r+0x1a>
 80086da:	f7fe f815 	bl	8006708 <__sinit>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f3      	beq.n	80086ce <_fflush_r+0xa>
 80086e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086e8:	07d0      	lsls	r0, r2, #31
 80086ea:	d404      	bmi.n	80086f6 <_fflush_r+0x32>
 80086ec:	0599      	lsls	r1, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_fflush_r+0x32>
 80086f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f2:	f7fe f9ee 	bl	8006ad2 <__retarget_lock_acquire_recursive>
 80086f6:	4628      	mov	r0, r5
 80086f8:	4621      	mov	r1, r4
 80086fa:	f7ff ff63 	bl	80085c4 <__sflush_r>
 80086fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008700:	4605      	mov	r5, r0
 8008702:	07da      	lsls	r2, r3, #31
 8008704:	d4e4      	bmi.n	80086d0 <_fflush_r+0xc>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	059b      	lsls	r3, r3, #22
 800870a:	d4e1      	bmi.n	80086d0 <_fflush_r+0xc>
 800870c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800870e:	f7fe f9e1 	bl	8006ad4 <__retarget_lock_release_recursive>
 8008712:	e7dd      	b.n	80086d0 <_fflush_r+0xc>

08008714 <__swhatbuf_r>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	4615      	mov	r5, r2
 800871e:	2900      	cmp	r1, #0
 8008720:	461e      	mov	r6, r3
 8008722:	b096      	sub	sp, #88	@ 0x58
 8008724:	da0c      	bge.n	8008740 <__swhatbuf_r+0x2c>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	2100      	movs	r1, #0
 800872a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800872e:	bf14      	ite	ne
 8008730:	2340      	movne	r3, #64	@ 0x40
 8008732:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008736:	2000      	movs	r0, #0
 8008738:	6031      	str	r1, [r6, #0]
 800873a:	602b      	str	r3, [r5, #0]
 800873c:	b016      	add	sp, #88	@ 0x58
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	466a      	mov	r2, sp
 8008742:	f000 f8f7 	bl	8008934 <_fstat_r>
 8008746:	2800      	cmp	r0, #0
 8008748:	dbed      	blt.n	8008726 <__swhatbuf_r+0x12>
 800874a:	9901      	ldr	r1, [sp, #4]
 800874c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008750:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008754:	4259      	negs	r1, r3
 8008756:	4159      	adcs	r1, r3
 8008758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800875c:	e7eb      	b.n	8008736 <__swhatbuf_r+0x22>

0800875e <__smakebuf_r>:
 800875e:	898b      	ldrh	r3, [r1, #12]
 8008760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008762:	079d      	lsls	r5, r3, #30
 8008764:	4606      	mov	r6, r0
 8008766:	460c      	mov	r4, r1
 8008768:	d507      	bpl.n	800877a <__smakebuf_r+0x1c>
 800876a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	2301      	movs	r3, #1
 8008774:	6163      	str	r3, [r4, #20]
 8008776:	b003      	add	sp, #12
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877a:	466a      	mov	r2, sp
 800877c:	ab01      	add	r3, sp, #4
 800877e:	f7ff ffc9 	bl	8008714 <__swhatbuf_r>
 8008782:	9f00      	ldr	r7, [sp, #0]
 8008784:	4605      	mov	r5, r0
 8008786:	4639      	mov	r1, r7
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff f877 	bl	800787c <_malloc_r>
 800878e:	b948      	cbnz	r0, 80087a4 <__smakebuf_r+0x46>
 8008790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008794:	059a      	lsls	r2, r3, #22
 8008796:	d4ee      	bmi.n	8008776 <__smakebuf_r+0x18>
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	f043 0302 	orr.w	r3, r3, #2
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	e7e2      	b.n	800876a <__smakebuf_r+0xc>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	6020      	str	r0, [r4, #0]
 80087b4:	b15b      	cbz	r3, 80087ce <__smakebuf_r+0x70>
 80087b6:	4630      	mov	r0, r6
 80087b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087bc:	f000 f8cc 	bl	8008958 <_isatty_r>
 80087c0:	b128      	cbz	r0, 80087ce <__smakebuf_r+0x70>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f023 0303 	bic.w	r3, r3, #3
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	431d      	orrs	r5, r3
 80087d2:	81a5      	strh	r5, [r4, #12]
 80087d4:	e7cf      	b.n	8008776 <__smakebuf_r+0x18>

080087d6 <__swbuf_r>:
 80087d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d8:	460e      	mov	r6, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	4605      	mov	r5, r0
 80087de:	b118      	cbz	r0, 80087e8 <__swbuf_r+0x12>
 80087e0:	6a03      	ldr	r3, [r0, #32]
 80087e2:	b90b      	cbnz	r3, 80087e8 <__swbuf_r+0x12>
 80087e4:	f7fd ff90 	bl	8006708 <__sinit>
 80087e8:	69a3      	ldr	r3, [r4, #24]
 80087ea:	60a3      	str	r3, [r4, #8]
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	071a      	lsls	r2, r3, #28
 80087f0:	d501      	bpl.n	80087f6 <__swbuf_r+0x20>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b943      	cbnz	r3, 8008808 <__swbuf_r+0x32>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f82b 	bl	8008854 <__swsetup_r>
 80087fe:	b118      	cbz	r0, 8008808 <__swbuf_r+0x32>
 8008800:	f04f 37ff 	mov.w	r7, #4294967295
 8008804:	4638      	mov	r0, r7
 8008806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6922      	ldr	r2, [r4, #16]
 800880c:	b2f6      	uxtb	r6, r6
 800880e:	1a98      	subs	r0, r3, r2
 8008810:	6963      	ldr	r3, [r4, #20]
 8008812:	4637      	mov	r7, r6
 8008814:	4283      	cmp	r3, r0
 8008816:	dc05      	bgt.n	8008824 <__swbuf_r+0x4e>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f7ff ff52 	bl	80086c4 <_fflush_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1ed      	bne.n	8008800 <__swbuf_r+0x2a>
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	701e      	strb	r6, [r3, #0]
 8008832:	6962      	ldr	r2, [r4, #20]
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	429a      	cmp	r2, r3
 8008838:	d004      	beq.n	8008844 <__swbuf_r+0x6e>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	07db      	lsls	r3, r3, #31
 800883e:	d5e1      	bpl.n	8008804 <__swbuf_r+0x2e>
 8008840:	2e0a      	cmp	r6, #10
 8008842:	d1df      	bne.n	8008804 <__swbuf_r+0x2e>
 8008844:	4621      	mov	r1, r4
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff ff3c 	bl	80086c4 <_fflush_r>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0d9      	beq.n	8008804 <__swbuf_r+0x2e>
 8008850:	e7d6      	b.n	8008800 <__swbuf_r+0x2a>
	...

08008854 <__swsetup_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4b29      	ldr	r3, [pc, #164]	@ (80088fc <__swsetup_r+0xa8>)
 8008858:	4605      	mov	r5, r0
 800885a:	6818      	ldr	r0, [r3, #0]
 800885c:	460c      	mov	r4, r1
 800885e:	b118      	cbz	r0, 8008868 <__swsetup_r+0x14>
 8008860:	6a03      	ldr	r3, [r0, #32]
 8008862:	b90b      	cbnz	r3, 8008868 <__swsetup_r+0x14>
 8008864:	f7fd ff50 	bl	8006708 <__sinit>
 8008868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	d422      	bmi.n	80088b6 <__swsetup_r+0x62>
 8008870:	06da      	lsls	r2, r3, #27
 8008872:	d407      	bmi.n	8008884 <__swsetup_r+0x30>
 8008874:	2209      	movs	r2, #9
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	e033      	b.n	80088ec <__swsetup_r+0x98>
 8008884:	0758      	lsls	r0, r3, #29
 8008886:	d512      	bpl.n	80088ae <__swsetup_r+0x5a>
 8008888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800888a:	b141      	cbz	r1, 800889e <__swsetup_r+0x4a>
 800888c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <__swsetup_r+0x46>
 8008894:	4628      	mov	r0, r5
 8008896:	f7fe ff7f 	bl	8007798 <_free_r>
 800889a:	2300      	movs	r3, #0
 800889c:	6363      	str	r3, [r4, #52]	@ 0x34
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	2300      	movs	r3, #0
 80088a8:	6063      	str	r3, [r4, #4]
 80088aa:	6923      	ldr	r3, [r4, #16]
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f043 0308 	orr.w	r3, r3, #8
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	b94b      	cbnz	r3, 80088ce <__swsetup_r+0x7a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c4:	d003      	beq.n	80088ce <__swsetup_r+0x7a>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff ff48 	bl	800875e <__smakebuf_r>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f013 0201 	ands.w	r2, r3, #1
 80088d6:	d00a      	beq.n	80088ee <__swsetup_r+0x9a>
 80088d8:	2200      	movs	r2, #0
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6962      	ldr	r2, [r4, #20]
 80088de:	4252      	negs	r2, r2
 80088e0:	61a2      	str	r2, [r4, #24]
 80088e2:	6922      	ldr	r2, [r4, #16]
 80088e4:	b942      	cbnz	r2, 80088f8 <__swsetup_r+0xa4>
 80088e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088ea:	d1c5      	bne.n	8008878 <__swsetup_r+0x24>
 80088ec:	bd38      	pop	{r3, r4, r5, pc}
 80088ee:	0799      	lsls	r1, r3, #30
 80088f0:	bf58      	it	pl
 80088f2:	6962      	ldrpl	r2, [r4, #20]
 80088f4:	60a2      	str	r2, [r4, #8]
 80088f6:	e7f4      	b.n	80088e2 <__swsetup_r+0x8e>
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7f7      	b.n	80088ec <__swsetup_r+0x98>
 80088fc:	20000020 	.word	0x20000020

08008900 <memmove>:
 8008900:	4288      	cmp	r0, r1
 8008902:	b510      	push	{r4, lr}
 8008904:	eb01 0402 	add.w	r4, r1, r2
 8008908:	d902      	bls.n	8008910 <memmove+0x10>
 800890a:	4284      	cmp	r4, r0
 800890c:	4623      	mov	r3, r4
 800890e:	d807      	bhi.n	8008920 <memmove+0x20>
 8008910:	1e43      	subs	r3, r0, #1
 8008912:	42a1      	cmp	r1, r4
 8008914:	d008      	beq.n	8008928 <memmove+0x28>
 8008916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800891a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800891e:	e7f8      	b.n	8008912 <memmove+0x12>
 8008920:	4601      	mov	r1, r0
 8008922:	4402      	add	r2, r0
 8008924:	428a      	cmp	r2, r1
 8008926:	d100      	bne.n	800892a <memmove+0x2a>
 8008928:	bd10      	pop	{r4, pc}
 800892a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800892e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008932:	e7f7      	b.n	8008924 <memmove+0x24>

08008934 <_fstat_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	2300      	movs	r3, #0
 8008938:	4d06      	ldr	r5, [pc, #24]	@ (8008954 <_fstat_r+0x20>)
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f9 fe57 	bl	80025f4 <_fstat>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_fstat_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_fstat_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20002134 	.word	0x20002134

08008958 <_isatty_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	2300      	movs	r3, #0
 800895c:	4d05      	ldr	r5, [pc, #20]	@ (8008974 <_isatty_r+0x1c>)
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f9 fe55 	bl	8002612 <_isatty>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_isatty_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_isatty_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	20002134 	.word	0x20002134

08008978 <_sbrk_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	2300      	movs	r3, #0
 800897c:	4d05      	ldr	r5, [pc, #20]	@ (8008994 <_sbrk_r+0x1c>)
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f9 fe5c 	bl	8002640 <_sbrk>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_sbrk_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_sbrk_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20002134 	.word	0x20002134

08008998 <memcpy>:
 8008998:	440a      	add	r2, r1
 800899a:	4291      	cmp	r1, r2
 800899c:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a0:	d100      	bne.n	80089a4 <memcpy+0xc>
 80089a2:	4770      	bx	lr
 80089a4:	b510      	push	{r4, lr}
 80089a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089aa:	4291      	cmp	r1, r2
 80089ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089b0:	d1f9      	bne.n	80089a6 <memcpy+0xe>
 80089b2:	bd10      	pop	{r4, pc}

080089b4 <__assert_func>:
 80089b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089b6:	4614      	mov	r4, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <__assert_func+0x2c>)
 80089bc:	4605      	mov	r5, r0
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68d8      	ldr	r0, [r3, #12]
 80089c2:	b954      	cbnz	r4, 80089da <__assert_func+0x26>
 80089c4:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <__assert_func+0x30>)
 80089c6:	461c      	mov	r4, r3
 80089c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089cc:	9100      	str	r1, [sp, #0]
 80089ce:	462b      	mov	r3, r5
 80089d0:	4905      	ldr	r1, [pc, #20]	@ (80089e8 <__assert_func+0x34>)
 80089d2:	f000 f86f 	bl	8008ab4 <fiprintf>
 80089d6:	f000 f87f 	bl	8008ad8 <abort>
 80089da:	4b04      	ldr	r3, [pc, #16]	@ (80089ec <__assert_func+0x38>)
 80089dc:	e7f4      	b.n	80089c8 <__assert_func+0x14>
 80089de:	bf00      	nop
 80089e0:	20000020 	.word	0x20000020
 80089e4:	08009686 	.word	0x08009686
 80089e8:	08009658 	.word	0x08009658
 80089ec:	0800964b 	.word	0x0800964b

080089f0 <_calloc_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	fba1 5402 	umull	r5, r4, r1, r2
 80089f6:	b93c      	cbnz	r4, 8008a08 <_calloc_r+0x18>
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7fe ff3f 	bl	800787c <_malloc_r>
 80089fe:	4606      	mov	r6, r0
 8008a00:	b928      	cbnz	r0, 8008a0e <_calloc_r+0x1e>
 8008a02:	2600      	movs	r6, #0
 8008a04:	4630      	mov	r0, r6
 8008a06:	bd70      	pop	{r4, r5, r6, pc}
 8008a08:	220c      	movs	r2, #12
 8008a0a:	6002      	str	r2, [r0, #0]
 8008a0c:	e7f9      	b.n	8008a02 <_calloc_r+0x12>
 8008a0e:	462a      	mov	r2, r5
 8008a10:	4621      	mov	r1, r4
 8008a12:	f7fd ffe0 	bl	80069d6 <memset>
 8008a16:	e7f5      	b.n	8008a04 <_calloc_r+0x14>

08008a18 <__ascii_mbtowc>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	b901      	cbnz	r1, 8008a1e <__ascii_mbtowc+0x6>
 8008a1c:	a901      	add	r1, sp, #4
 8008a1e:	b142      	cbz	r2, 8008a32 <__ascii_mbtowc+0x1a>
 8008a20:	b14b      	cbz	r3, 8008a36 <__ascii_mbtowc+0x1e>
 8008a22:	7813      	ldrb	r3, [r2, #0]
 8008a24:	600b      	str	r3, [r1, #0]
 8008a26:	7812      	ldrb	r2, [r2, #0]
 8008a28:	1e10      	subs	r0, r2, #0
 8008a2a:	bf18      	it	ne
 8008a2c:	2001      	movne	r0, #1
 8008a2e:	b002      	add	sp, #8
 8008a30:	4770      	bx	lr
 8008a32:	4610      	mov	r0, r2
 8008a34:	e7fb      	b.n	8008a2e <__ascii_mbtowc+0x16>
 8008a36:	f06f 0001 	mvn.w	r0, #1
 8008a3a:	e7f8      	b.n	8008a2e <__ascii_mbtowc+0x16>

08008a3c <_realloc_r>:
 8008a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a40:	4680      	mov	r8, r0
 8008a42:	4615      	mov	r5, r2
 8008a44:	460c      	mov	r4, r1
 8008a46:	b921      	cbnz	r1, 8008a52 <_realloc_r+0x16>
 8008a48:	4611      	mov	r1, r2
 8008a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4e:	f7fe bf15 	b.w	800787c <_malloc_r>
 8008a52:	b92a      	cbnz	r2, 8008a60 <_realloc_r+0x24>
 8008a54:	f7fe fea0 	bl	8007798 <_free_r>
 8008a58:	2400      	movs	r4, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	f000 f841 	bl	8008ae6 <_malloc_usable_size_r>
 8008a64:	4285      	cmp	r5, r0
 8008a66:	4606      	mov	r6, r0
 8008a68:	d802      	bhi.n	8008a70 <_realloc_r+0x34>
 8008a6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a6e:	d8f4      	bhi.n	8008a5a <_realloc_r+0x1e>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4640      	mov	r0, r8
 8008a74:	f7fe ff02 	bl	800787c <_malloc_r>
 8008a78:	4607      	mov	r7, r0
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0ec      	beq.n	8008a58 <_realloc_r+0x1c>
 8008a7e:	42b5      	cmp	r5, r6
 8008a80:	462a      	mov	r2, r5
 8008a82:	4621      	mov	r1, r4
 8008a84:	bf28      	it	cs
 8008a86:	4632      	movcs	r2, r6
 8008a88:	f7ff ff86 	bl	8008998 <memcpy>
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7fe fe82 	bl	8007798 <_free_r>
 8008a94:	463c      	mov	r4, r7
 8008a96:	e7e0      	b.n	8008a5a <_realloc_r+0x1e>

08008a98 <__ascii_wctomb>:
 8008a98:	4603      	mov	r3, r0
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	b141      	cbz	r1, 8008ab0 <__ascii_wctomb+0x18>
 8008a9e:	2aff      	cmp	r2, #255	@ 0xff
 8008aa0:	d904      	bls.n	8008aac <__ascii_wctomb+0x14>
 8008aa2:	228a      	movs	r2, #138	@ 0x8a
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	4770      	bx	lr
 8008aac:	2001      	movs	r0, #1
 8008aae:	700a      	strb	r2, [r1, #0]
 8008ab0:	4770      	bx	lr
	...

08008ab4 <fiprintf>:
 8008ab4:	b40e      	push	{r1, r2, r3}
 8008ab6:	b503      	push	{r0, r1, lr}
 8008ab8:	4601      	mov	r1, r0
 8008aba:	ab03      	add	r3, sp, #12
 8008abc:	4805      	ldr	r0, [pc, #20]	@ (8008ad4 <fiprintf+0x20>)
 8008abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac2:	6800      	ldr	r0, [r0, #0]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f7ff fc65 	bl	8008394 <_vfiprintf_r>
 8008aca:	b002      	add	sp, #8
 8008acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad0:	b003      	add	sp, #12
 8008ad2:	4770      	bx	lr
 8008ad4:	20000020 	.word	0x20000020

08008ad8 <abort>:
 8008ad8:	2006      	movs	r0, #6
 8008ada:	b508      	push	{r3, lr}
 8008adc:	f000 f834 	bl	8008b48 <raise>
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	f7f9 fd38 	bl	8002556 <_exit>

08008ae6 <_malloc_usable_size_r>:
 8008ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aea:	1f18      	subs	r0, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bfbc      	itt	lt
 8008af0:	580b      	ldrlt	r3, [r1, r0]
 8008af2:	18c0      	addlt	r0, r0, r3
 8008af4:	4770      	bx	lr

08008af6 <_raise_r>:
 8008af6:	291f      	cmp	r1, #31
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4605      	mov	r5, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	d904      	bls.n	8008b0a <_raise_r+0x14>
 8008b00:	2316      	movs	r3, #22
 8008b02:	6003      	str	r3, [r0, #0]
 8008b04:	f04f 30ff 	mov.w	r0, #4294967295
 8008b08:	bd38      	pop	{r3, r4, r5, pc}
 8008b0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b0c:	b112      	cbz	r2, 8008b14 <_raise_r+0x1e>
 8008b0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b12:	b94b      	cbnz	r3, 8008b28 <_raise_r+0x32>
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f831 	bl	8008b7c <_getpid_r>
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4628      	mov	r0, r5
 8008b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b24:	f000 b818 	b.w	8008b58 <_kill_r>
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d00a      	beq.n	8008b42 <_raise_r+0x4c>
 8008b2c:	1c59      	adds	r1, r3, #1
 8008b2e:	d103      	bne.n	8008b38 <_raise_r+0x42>
 8008b30:	2316      	movs	r3, #22
 8008b32:	6003      	str	r3, [r0, #0]
 8008b34:	2001      	movs	r0, #1
 8008b36:	e7e7      	b.n	8008b08 <_raise_r+0x12>
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b40:	4798      	blx	r3
 8008b42:	2000      	movs	r0, #0
 8008b44:	e7e0      	b.n	8008b08 <_raise_r+0x12>
	...

08008b48 <raise>:
 8008b48:	4b02      	ldr	r3, [pc, #8]	@ (8008b54 <raise+0xc>)
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f7ff bfd2 	b.w	8008af6 <_raise_r>
 8008b52:	bf00      	nop
 8008b54:	20000020 	.word	0x20000020

08008b58 <_kill_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4d06      	ldr	r5, [pc, #24]	@ (8008b78 <_kill_r+0x20>)
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	4611      	mov	r1, r2
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	f7f9 fce6 	bl	8002536 <_kill>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d102      	bne.n	8008b74 <_kill_r+0x1c>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	b103      	cbz	r3, 8008b74 <_kill_r+0x1c>
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	20002134 	.word	0x20002134

08008b7c <_getpid_r>:
 8008b7c:	f7f9 bcd4 	b.w	8002528 <_getpid>

08008b80 <sqrt>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4606      	mov	r6, r0
 8008b84:	460f      	mov	r7, r1
 8008b86:	f000 f81f 	bl	8008bc8 <__ieee754_sqrt>
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	463b      	mov	r3, r7
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 ffed 	bl	8000b74 <__aeabi_dcmpun>
 8008b9a:	b990      	cbnz	r0, 8008bc2 <sqrt+0x42>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffbe 	bl	8000b24 <__aeabi_dcmplt>
 8008ba8:	b158      	cbz	r0, 8008bc2 <sqrt+0x42>
 8008baa:	f7fd ff67 	bl	8006a7c <__errno>
 8008bae:	2321      	movs	r3, #33	@ 0x21
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6003      	str	r3, [r0, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	4619      	mov	r1, r3
 8008bba:	f7f7 fe6b 	bl	8000894 <__aeabi_ddiv>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bc8 <__ieee754_sqrt>:
 8008bc8:	4a67      	ldr	r2, [pc, #412]	@ (8008d68 <__ieee754_sqrt+0x1a0>)
 8008bca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bce:	438a      	bics	r2, r1
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	460f      	mov	r7, r1
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	d10e      	bne.n	8008bf8 <__ieee754_sqrt+0x30>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	f7f7 fd30 	bl	8000640 <__aeabi_dmul>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4630      	mov	r0, r6
 8008be6:	4639      	mov	r1, r7
 8008be8:	f7f7 fb74 	bl	80002d4 <__adddf3>
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	dc0c      	bgt.n	8008c16 <__ieee754_sqrt+0x4e>
 8008bfc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008c00:	4302      	orrs	r2, r0
 8008c02:	d0f5      	beq.n	8008bf0 <__ieee754_sqrt+0x28>
 8008c04:	b189      	cbz	r1, 8008c2a <__ieee754_sqrt+0x62>
 8008c06:	4602      	mov	r2, r0
 8008c08:	f7f7 fb62 	bl	80002d0 <__aeabi_dsub>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	f7f7 fe40 	bl	8000894 <__aeabi_ddiv>
 8008c14:	e7ea      	b.n	8008bec <__ieee754_sqrt+0x24>
 8008c16:	150a      	asrs	r2, r1, #20
 8008c18:	d115      	bne.n	8008c46 <__ieee754_sqrt+0x7e>
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	e009      	b.n	8008c32 <__ieee754_sqrt+0x6a>
 8008c1e:	0ae3      	lsrs	r3, r4, #11
 8008c20:	3a15      	subs	r2, #21
 8008c22:	0564      	lsls	r4, r4, #21
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0fa      	beq.n	8008c1e <__ieee754_sqrt+0x56>
 8008c28:	e7f7      	b.n	8008c1a <__ieee754_sqrt+0x52>
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	e7fa      	b.n	8008c24 <__ieee754_sqrt+0x5c>
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	3101      	adds	r1, #1
 8008c32:	02d8      	lsls	r0, r3, #11
 8008c34:	d5fb      	bpl.n	8008c2e <__ieee754_sqrt+0x66>
 8008c36:	1e48      	subs	r0, r1, #1
 8008c38:	1a12      	subs	r2, r2, r0
 8008c3a:	f1c1 0020 	rsb	r0, r1, #32
 8008c3e:	fa24 f000 	lsr.w	r0, r4, r0
 8008c42:	4303      	orrs	r3, r0
 8008c44:	408c      	lsls	r4, r1
 8008c46:	2600      	movs	r6, #0
 8008c48:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008c4c:	2116      	movs	r1, #22
 8008c4e:	07d2      	lsls	r2, r2, #31
 8008c50:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008c54:	4632      	mov	r2, r6
 8008c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c5e:	bf5c      	itt	pl
 8008c60:	005b      	lslpl	r3, r3, #1
 8008c62:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c6a:	bf58      	it	pl
 8008c6c:	0064      	lslpl	r4, r4, #1
 8008c6e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008c72:	107f      	asrs	r7, r7, #1
 8008c74:	0064      	lsls	r4, r4, #1
 8008c76:	1815      	adds	r5, r2, r0
 8008c78:	429d      	cmp	r5, r3
 8008c7a:	bfde      	ittt	le
 8008c7c:	182a      	addle	r2, r5, r0
 8008c7e:	1b5b      	suble	r3, r3, r5
 8008c80:	1836      	addle	r6, r6, r0
 8008c82:	0fe5      	lsrs	r5, r4, #31
 8008c84:	3901      	subs	r1, #1
 8008c86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008c8a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008c8e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008c92:	d1f0      	bne.n	8008c76 <__ieee754_sqrt+0xae>
 8008c94:	460d      	mov	r5, r1
 8008c96:	f04f 0a20 	mov.w	sl, #32
 8008c9a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	eb01 0c00 	add.w	ip, r1, r0
 8008ca4:	db02      	blt.n	8008cac <__ieee754_sqrt+0xe4>
 8008ca6:	d113      	bne.n	8008cd0 <__ieee754_sqrt+0x108>
 8008ca8:	45a4      	cmp	ip, r4
 8008caa:	d811      	bhi.n	8008cd0 <__ieee754_sqrt+0x108>
 8008cac:	f1bc 0f00 	cmp.w	ip, #0
 8008cb0:	eb0c 0100 	add.w	r1, ip, r0
 8008cb4:	da42      	bge.n	8008d3c <__ieee754_sqrt+0x174>
 8008cb6:	2900      	cmp	r1, #0
 8008cb8:	db40      	blt.n	8008d3c <__ieee754_sqrt+0x174>
 8008cba:	f102 0e01 	add.w	lr, r2, #1
 8008cbe:	1a9b      	subs	r3, r3, r2
 8008cc0:	4672      	mov	r2, lr
 8008cc2:	45a4      	cmp	ip, r4
 8008cc4:	bf88      	it	hi
 8008cc6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008cca:	eba4 040c 	sub.w	r4, r4, ip
 8008cce:	4405      	add	r5, r0
 8008cd0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008cd4:	f1ba 0a01 	subs.w	sl, sl, #1
 8008cd8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008cdc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008ce0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008ce4:	d1db      	bne.n	8008c9e <__ieee754_sqrt+0xd6>
 8008ce6:	431c      	orrs	r4, r3
 8008ce8:	d01a      	beq.n	8008d20 <__ieee754_sqrt+0x158>
 8008cea:	4c20      	ldr	r4, [pc, #128]	@ (8008d6c <__ieee754_sqrt+0x1a4>)
 8008cec:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008d70 <__ieee754_sqrt+0x1a8>
 8008cf0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008cf4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008cf8:	f7f7 faea 	bl	80002d0 <__aeabi_dsub>
 8008cfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	f7f7 ff16 	bl	8000b38 <__aeabi_dcmple>
 8008d0c:	b140      	cbz	r0, 8008d20 <__ieee754_sqrt+0x158>
 8008d0e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008d12:	e9db 2300 	ldrd	r2, r3, [fp]
 8008d16:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008d1a:	d111      	bne.n	8008d40 <__ieee754_sqrt+0x178>
 8008d1c:	4655      	mov	r5, sl
 8008d1e:	3601      	adds	r6, #1
 8008d20:	1072      	asrs	r2, r6, #1
 8008d22:	086b      	lsrs	r3, r5, #1
 8008d24:	07f1      	lsls	r1, r6, #31
 8008d26:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008d2a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008d2e:	bf48      	it	mi
 8008d30:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008d34:	4618      	mov	r0, r3
 8008d36:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008d3a:	e757      	b.n	8008bec <__ieee754_sqrt+0x24>
 8008d3c:	4696      	mov	lr, r2
 8008d3e:	e7be      	b.n	8008cbe <__ieee754_sqrt+0xf6>
 8008d40:	f7f7 fac8 	bl	80002d4 <__adddf3>
 8008d44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 fee8 	bl	8000b24 <__aeabi_dcmplt>
 8008d54:	b120      	cbz	r0, 8008d60 <__ieee754_sqrt+0x198>
 8008d56:	1ca8      	adds	r0, r5, #2
 8008d58:	bf08      	it	eq
 8008d5a:	3601      	addeq	r6, #1
 8008d5c:	3502      	adds	r5, #2
 8008d5e:	e7df      	b.n	8008d20 <__ieee754_sqrt+0x158>
 8008d60:	1c6b      	adds	r3, r5, #1
 8008d62:	f023 0501 	bic.w	r5, r3, #1
 8008d66:	e7db      	b.n	8008d20 <__ieee754_sqrt+0x158>
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	200001e8 	.word	0x200001e8
 8008d70:	200001e0 	.word	0x200001e0

08008d74 <_init>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	bf00      	nop
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr

08008d80 <_fini>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr
