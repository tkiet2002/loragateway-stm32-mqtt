
MACH_TRUNG_TAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002968  0800cc20  0800cc20  0000dc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f588  0800f588  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f588  0800f588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f590  0800f590  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f590  0800f590  00010590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f594  0800f594  00010594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800f598  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  200001f0  0800f788  000111f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800f788  00011780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d40  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002962  00000000  00000000  00023f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc0  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018942  00000000  00000000  00028818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145d6  00000000  00000000  0004115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094288  00000000  00000000  00055730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e99b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  000e99fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000ef5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc04 	.word	0x0800cc04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800cc04 	.word	0x0800cc04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	486d      	ldr	r0, [pc, #436]	@ (80010a8 <ILI9488_Init+0x1c0>)
 8000ef2:	f005 fec3 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f005 f804 	bl	8005f04 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2104      	movs	r1, #4
 8000f00:	4869      	ldr	r0, [pc, #420]	@ (80010a8 <ILI9488_Init+0x1c0>)
 8000f02:	f005 febb 	bl	8006c7c <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000f06:	4b69      	ldr	r3, [pc, #420]	@ (80010ac <ILI9488_Init+0x1c4>)
 8000f08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f0c:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000f0e:	4b68      	ldr	r3, [pc, #416]	@ (80010b0 <ILI9488_Init+0x1c8>)
 8000f10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000f14:	801a      	strh	r2, [r3, #0]
//	ILI9488WriteReg( 0x11);
//  	HAL_Delay(120);
//	ILI9488WriteReg( 0x29);


	lcd_write_command(0xE0); //P-Gamma
 8000f16:	20e0      	movs	r0, #224	@ 0xe0
 8000f18:	f000 fa3a 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fadf 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x13);
 8000f22:	2013      	movs	r0, #19
 8000f24:	f000 fadc 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x18);
 8000f28:	2018      	movs	r0, #24
 8000f2a:	f000 fad9 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x04);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 fad6 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000f34:	200f      	movs	r0, #15
 8000f36:	f000 fad3 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f000 fad0 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x3A);
 8000f40:	203a      	movs	r0, #58	@ 0x3a
 8000f42:	f000 facd 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x56);
 8000f46:	2056      	movs	r0, #86	@ 0x56
 8000f48:	f000 faca 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x4D);
 8000f4c:	204d      	movs	r0, #77	@ 0x4d
 8000f4e:	f000 fac7 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x03);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 fac4 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0A);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f000 fac1 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f5e:	2006      	movs	r0, #6
 8000f60:	f000 fabe 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x30);
 8000f64:	2030      	movs	r0, #48	@ 0x30
 8000f66:	f000 fabb 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x3E);
 8000f6a:	203e      	movs	r0, #62	@ 0x3e
 8000f6c:	f000 fab8 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000f70:	200f      	movs	r0, #15
 8000f72:	f000 fab5 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0XE1); //N-Gamma
 8000f76:	20e1      	movs	r0, #225	@ 0xe1
 8000f78:	f000 fa0a 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 faaf 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x13);
 8000f82:	2013      	movs	r0, #19
 8000f84:	f000 faac 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x18);
 8000f88:	2018      	movs	r0, #24
 8000f8a:	f000 faa9 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x01);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f000 faa6 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x11);
 8000f94:	2011      	movs	r0, #17
 8000f96:	f000 faa3 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f000 faa0 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x38);
 8000fa0:	2038      	movs	r0, #56	@ 0x38
 8000fa2:	f000 fa9d 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x34);
 8000fa6:	2034      	movs	r0, #52	@ 0x34
 8000fa8:	f000 fa9a 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x4D);
 8000fac:	204d      	movs	r0, #77	@ 0x4d
 8000fae:	f000 fa97 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x06);
 8000fb2:	2006      	movs	r0, #6
 8000fb4:	f000 fa94 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0D);
 8000fb8:	200d      	movs	r0, #13
 8000fba:	f000 fa91 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0B);
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	f000 fa8e 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x31);
 8000fc4:	2031      	movs	r0, #49	@ 0x31
 8000fc6:	f000 fa8b 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x37);
 8000fca:	2037      	movs	r0, #55	@ 0x37
 8000fcc:	f000 fa88 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x0F);
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f000 fa85 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC0);
 8000fd6:	20c0      	movs	r0, #192	@ 0xc0
 8000fd8:	f000 f9da 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x18);
 8000fdc:	2018      	movs	r0, #24
 8000fde:	f000 fa7f 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x16);
 8000fe2:	2016      	movs	r0, #22
 8000fe4:	f000 fa7c 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC1);
 8000fe8:	20c1      	movs	r0, #193	@ 0xc1
 8000fea:	f000 f9d1 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x45);
 8000fee:	2045      	movs	r0, #69	@ 0x45
 8000ff0:	f000 fa76 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xC5); //VCOM
 8000ff4:	20c5      	movs	r0, #197	@ 0xc5
 8000ff6:	f000 f9cb 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fa70 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x63);
 8001000:	2063      	movs	r0, #99	@ 0x63
 8001002:	f000 fa6d 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x01);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 fa6a 	bl	80014e0 <lcd_write_data>

	lcd_write_command(0x36); //RAM address mode
 800100c:	2036      	movs	r0, #54	@ 0x36
 800100e:	f000 f9bf 	bl	8001390 <lcd_write_command>
	//0xF8 and 0x3C are landscape mode. 0x5C and 0x9C for portrait mode.
//	if(LANDSCAPE)
		lcd_write_data(0xF8);
 8001012:	20f8      	movs	r0, #248	@ 0xf8
 8001014:	f000 fa64 	bl	80014e0 <lcd_write_data>
//	else
//		lcd_write_data(0x5C);

	lcd_write_command(0x3A); //Interface Mode Control
 8001018:	203a      	movs	r0, #58	@ 0x3a
 800101a:	f000 f9b9 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x66); //16-bit serial mode
 800101e:	2066      	movs	r0, #102	@ 0x66
 8001020:	f000 fa5e 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB0); //Interface Mode Control
 8001024:	20b0      	movs	r0, #176	@ 0xb0
 8001026:	f000 f9b3 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x80); //SDO not in use
 800102a:	2080      	movs	r0, #128	@ 0x80
 800102c:	f000 fa58 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB1); //Frame rate 70HZ
 8001030:	20b1      	movs	r0, #177	@ 0xb1
 8001032:	f000 f9ad 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00); //
 8001036:	2000      	movs	r0, #0
 8001038:	f000 fa52 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x10);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 fa4f 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xB4);
 8001042:	20b4      	movs	r0, #180	@ 0xb4
 8001044:	f000 f9a4 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x02);
 8001048:	2002      	movs	r0, #2
 800104a:	f000 fa49 	bl	80014e0 <lcd_write_data>

	lcd_write_command(0xB6); //RGB/MCU Interface Control
 800104e:	20b6      	movs	r0, #182	@ 0xb6
 8001050:	f000 f99e 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x02);
 8001054:	2002      	movs	r0, #2
 8001056:	f000 fa43 	bl	80014e0 <lcd_write_data>
	//lcd_write_data(0x22);

	lcd_write_command(0xE9);
 800105a:	20e9      	movs	r0, #233	@ 0xe9
 800105c:	f000 f998 	bl	8001390 <lcd_write_command>
	lcd_write_data(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 fa3d 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0xF7);
 8001066:	20f7      	movs	r0, #247	@ 0xf7
 8001068:	f000 f992 	bl	8001390 <lcd_write_command>
	lcd_write_data(0xA9);
 800106c:	20a9      	movs	r0, #169	@ 0xa9
 800106e:	f000 fa37 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x51);
 8001072:	2051      	movs	r0, #81	@ 0x51
 8001074:	f000 fa34 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x2C);
 8001078:	202c      	movs	r0, #44	@ 0x2c
 800107a:	f000 fa31 	bl	80014e0 <lcd_write_data>
	lcd_write_data(0x82);
 800107e:	2082      	movs	r0, #130	@ 0x82
 8001080:	f000 fa2e 	bl	80014e0 <lcd_write_data>
	lcd_write_command(0x11);
 8001084:	2011      	movs	r0, #17
 8001086:	f000 f983 	bl	8001390 <lcd_write_command>
	HAL_Delay(120);
 800108a:	2078      	movs	r0, #120	@ 0x78
 800108c:	f004 ff3a 	bl	8005f04 <HAL_Delay>
	lcd_write_command(0x21);
 8001090:	2021      	movs	r0, #33	@ 0x21
 8001092:	f000 f97d 	bl	8001390 <lcd_write_command>


	HAL_Delay(120);
 8001096:	2078      	movs	r0, #120	@ 0x78
 8001098:	f004 ff34 	bl	8005f04 <HAL_Delay>
	lcd_write_command(0x29);
 800109c:	2029      	movs	r0, #41	@ 0x29
 800109e:	f000 f977 	bl	8001390 <lcd_write_command>


}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000020c 	.word	0x2000020c
 80010b0:	2000020e 	.word	0x2000020e

080010b4 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	4603      	mov	r3, r0
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 80010d2:	202a      	movs	r0, #42	@ 0x2a
 80010d4:	f000 f938 	bl	8001348 <writecommand>
	writedata(x0 >> 8);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 f9d9 	bl	8001498 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f9d4 	bl	8001498 <writedata>
	writedata(x1 >> 8);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f9cd 	bl	8001498 <writedata>
	writedata(x1 & 0xFF);     // XEND
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f9c8 	bl	8001498 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8001108:	202b      	movs	r0, #43	@ 0x2b
 800110a:	f000 f91d 	bl	8001348 <writecommand>
	writedata(y0 >> 8);
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9be 	bl	8001498 <writedata>
	writedata(y0 & 0xff);     // YSTART
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f9b9 	bl	8001498 <writedata>
	writedata(y1 >> 8);
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f9b2 	bl	8001498 <writedata>
	writedata(y1 & 0xff);     // YEND
 8001134:	883b      	ldrh	r3, [r7, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f9ad 	bl	8001498 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 800113e:	202c      	movs	r0, #44	@ 0x2c
 8001140:	f000 f902 	bl	8001348 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114a:	4806      	ldr	r0, [pc, #24]	@ (8001164 <setAddrWindow+0xb0>)
 800114c:	f005 fd96 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2102      	movs	r1, #2
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <setAddrWindow+0xb0>)
 8001156:	f005 fd91 	bl	8006c7c <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	40020400 	.word	0x40020400

08001168 <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8001186:	4b41      	ldr	r3, [pc, #260]	@ (800128c <fillRect+0x124>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001190:	429a      	cmp	r2, r3
 8001192:	da76      	bge.n	8001282 <fillRect+0x11a>
 8001194:	4b3e      	ldr	r3, [pc, #248]	@ (8001290 <fillRect+0x128>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	da6f      	bge.n	8001282 <fillRect+0x11a>
		return;
	if ((x + w - 1) >= _width)
 80011a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a37      	ldr	r2, [pc, #220]	@ (800128c <fillRect+0x124>)
 80011ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	dd07      	ble.n	80011c6 <fillRect+0x5e>
		w = _width - x;
 80011b6:	4b35      	ldr	r3, [pc, #212]	@ (800128c <fillRect+0x124>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 80011c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <fillRect+0x128>)
 80011d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dd07      	ble.n	80011ea <fillRect+0x82>
		h = _height - y;
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <fillRect+0x128>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 80011ea:	88f8      	ldrh	r0, [r7, #6]
 80011ec:	88b9      	ldrh	r1, [r7, #4]
 80011ee:	88fa      	ldrh	r2, [r7, #6]
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4413      	add	r3, r2
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29c      	uxth	r4, r3
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	883b      	ldrh	r3, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b01      	subs	r3, #1
 8001204:	b29b      	uxth	r3, r3
 8001206:	4622      	mov	r2, r4
 8001208:	f7ff ff54 	bl	80010b4 <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <fillRect+0x12c>)
 8001212:	f005 fd33 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121c:	481d      	ldr	r0, [pc, #116]	@ (8001294 <fillRect+0x12c>)
 800121e:	f005 fd2d 	bl	8006c7c <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 8001222:	883b      	ldrh	r3, [r7, #0]
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	e016      	b.n	8001256 <fillRect+0xee>
		for (x = w; x > 0; x--) {
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	e009      	b.n	8001242 <fillRect+0xda>

			write16BitColor(color);
 800122e:	8b3b      	ldrh	r3, [r7, #24]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f8d1 	bl	80013d8 <write16BitColor>
		for (x = w; x > 0; x--) {
 8001236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b01      	subs	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	80fb      	strh	r3, [r7, #6]
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dcf1      	bgt.n	800122e <fillRect+0xc6>
	for (y = h; y > 0; y--) {
 800124a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	80bb      	strh	r3, [r7, #4]
 8001256:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	dce4      	bgt.n	8001228 <fillRect+0xc0>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <fillRect+0x12c>)
 8001266:	f005 fd09 	bl	8006c7c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <fillRect+0x12c>)
 8001270:	f005 fd04 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <fillRect+0x12c>)
 800127c:	f005 fcfe 	bl	8006c7c <HAL_GPIO_WritePin>
 8001280:	e000      	b.n	8001284 <fillRect+0x11c>
		return;
 8001282:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	2000020c 	.word	0x2000020c
 8001290:	2000020e 	.word	0x2000020e
 8001294:	40020400 	.word	0x40020400

08001298 <setRotation>:
void setRotation(uint8_t r)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 80012a2:	2036      	movs	r0, #54	@ 0x36
 80012a4:	f000 f850 	bl	8001348 <writecommand>
	rotation = r % 4; // can't be higher than 3
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <setRotation+0xa4>)
 80012b2:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <setRotation+0xa4>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d83b      	bhi.n	8001334 <setRotation+0x9c>
 80012bc:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <setRotation+0x2c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	08001305 	.word	0x08001305
 80012d0:	0800131d 	.word	0x0800131d
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 80012d4:	2048      	movs	r0, #72	@ 0x48
 80012d6:	f000 f8df 	bl	8001498 <writedata>
		_width = ILI9488_TFTWIDTH;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <setRotation+0xa8>)
 80012dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012e0:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <setRotation+0xac>)
 80012e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012e8:	801a      	strh	r2, [r3, #0]
		break;
 80012ea:	e023      	b.n	8001334 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 80012ec:	2028      	movs	r0, #40	@ 0x28
 80012ee:	f000 f8d3 	bl	8001498 <writedata>
		_width = ILI9488_TFTHEIGHT;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <setRotation+0xa8>)
 80012f4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80012f8:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <setRotation+0xac>)
 80012fc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001300:	801a      	strh	r2, [r3, #0]
		break;
 8001302:	e017      	b.n	8001334 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001304:	2088      	movs	r0, #136	@ 0x88
 8001306:	f000 f8c7 	bl	8001498 <writedata>
		_width = ILI9488_TFTWIDTH;
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <setRotation+0xa8>)
 800130c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001310:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <setRotation+0xac>)
 8001314:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001318:	801a      	strh	r2, [r3, #0]
		break;
 800131a:	e00b      	b.n	8001334 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 800131c:	20e8      	movs	r0, #232	@ 0xe8
 800131e:	f000 f8bb 	bl	8001498 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <setRotation+0xa8>)
 8001324:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001328:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <setRotation+0xac>)
 800132c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001330:	801a      	strh	r2, [r3, #0]
		break;
 8001332:	bf00      	nop
	}

}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000210 	.word	0x20000210
 8001340:	2000020c 	.word	0x2000020c
 8001344:	2000020e 	.word	0x2000020e

08001348 <writecommand>:
{
	HAL_SPI_Transmit(&hspi2, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2102      	movs	r1, #2
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <writecommand+0x40>)
 8001358:	f005 fc90 	bl	8006c7c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <writecommand+0x40>)
 8001364:	f005 fc8a 	bl	8006c7c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 1);
 8001368:	1df9      	adds	r1, r7, #7
 800136a:	2301      	movs	r3, #1
 800136c:	2201      	movs	r2, #1
 800136e:	4807      	ldr	r0, [pc, #28]	@ (800138c <writecommand+0x44>)
 8001370:	f006 f9d7 	bl	8007722 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137a:	4803      	ldr	r0, [pc, #12]	@ (8001388 <writecommand+0x40>)
 800137c:	f005 fc7e 	bl	8006c7c <HAL_GPIO_WritePin>

}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400
 800138c:	2000026c 	.word	0x2000026c

08001390 <lcd_write_command>:


void lcd_write_command(uint8_t c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2102      	movs	r1, #2
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <lcd_write_command+0x40>)
 80013a0:	f005 fc6c 	bl	8006c7c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013aa:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <lcd_write_command+0x40>)
 80013ac:	f005 fc66 	bl	8006c7c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &c, 1, 1);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	2301      	movs	r3, #1
 80013b4:	2201      	movs	r2, #1
 80013b6:	4807      	ldr	r0, [pc, #28]	@ (80013d4 <lcd_write_command+0x44>)
 80013b8:	f006 f9b3 	bl	8007722 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c2:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <lcd_write_command+0x40>)
 80013c4:	f005 fc5a 	bl	8006c7c <HAL_GPIO_WritePin>

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40020400 	.word	0x40020400
 80013d4:	2000026c 	.word	0x2000026c

080013d8 <write16BitColor>:


void write16BitColor(uint16_t color)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	0adb      	lsrs	r3, r3, #11
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	115b      	asrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	b2db      	uxtb	r3, r3
 8001404:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <write16BitColor+0xb4>)
 8001412:	fb82 1203 	smull	r1, r2, r2, r3
 8001416:	441a      	add	r2, r3
 8001418:	1112      	asrs	r2, r2, #4
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <write16BitColor+0xb8>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	441a      	add	r2, r3
 8001434:	1152      	asrs	r2, r2, #5
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	4a10      	ldr	r2, [pc, #64]	@ (800148c <write16BitColor+0xb4>)
 800144a:	fb82 1203 	smull	r1, r2, r2, r3
 800144e:	441a      	add	r2, r3
 8001450:	1112      	asrs	r2, r2, #4
 8001452:	17db      	asrs	r3, r3, #31
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi2, &r, 1, 1);
 800145a:	f107 010f 	add.w	r1, r7, #15
 800145e:	2301      	movs	r3, #1
 8001460:	2201      	movs	r2, #1
 8001462:	480c      	ldr	r0, [pc, #48]	@ (8001494 <write16BitColor+0xbc>)
 8001464:	f006 f95d 	bl	8007722 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &g, 1, 1);
 8001468:	f107 010e 	add.w	r1, r7, #14
 800146c:	2301      	movs	r3, #1
 800146e:	2201      	movs	r2, #1
 8001470:	4808      	ldr	r0, [pc, #32]	@ (8001494 <write16BitColor+0xbc>)
 8001472:	f006 f956 	bl	8007722 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &b, 1, 1);
 8001476:	f107 010d 	add.w	r1, r7, #13
 800147a:	2301      	movs	r3, #1
 800147c:	2201      	movs	r2, #1
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <write16BitColor+0xbc>)
 8001480:	f006 f94f 	bl	8007722 <HAL_SPI_Transmit>


}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	84210843 	.word	0x84210843
 8001490:	82082083 	.word	0x82082083
 8001494:	2000026c 	.word	0x2000026c

08001498 <writedata>:
void writedata(uint8_t d)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <writedata+0x40>)
 80014a8:	f005 fbe8 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b2:	4809      	ldr	r0, [pc, #36]	@ (80014d8 <writedata+0x40>)
 80014b4:	f005 fbe2 	bl	8006c7c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 1);
 80014b8:	1df9      	adds	r1, r7, #7
 80014ba:	2301      	movs	r3, #1
 80014bc:	2201      	movs	r2, #1
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <writedata+0x44>)
 80014c0:	f006 f92f 	bl	8007722 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <writedata+0x40>)
 80014cc:	f005 fbd6 	bl	8006c7c <HAL_GPIO_WritePin>

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020400 	.word	0x40020400
 80014dc:	2000026c 	.word	0x2000026c

080014e0 <lcd_write_data>:

void lcd_write_data(uint8_t d)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	480c      	ldr	r0, [pc, #48]	@ (8001520 <lcd_write_data+0x40>)
 80014f0:	f005 fbc4 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <lcd_write_data+0x40>)
 80014fc:	f005 fbbe 	bl	8006c7c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &d, 1, 1);
 8001500:	1df9      	adds	r1, r7, #7
 8001502:	2301      	movs	r3, #1
 8001504:	2201      	movs	r2, #1
 8001506:	4807      	ldr	r0, [pc, #28]	@ (8001524 <lcd_write_data+0x44>)
 8001508:	f006 f90b 	bl	8007722 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001512:	4803      	ldr	r0, [pc, #12]	@ (8001520 <lcd_write_data+0x40>)
 8001514:	f005 fbb2 	bl	8006c7c <HAL_GPIO_WritePin>

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40020400 	.word	0x40020400
 8001524:	2000026c 	.word	0x2000026c

08001528 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	b08d      	sub	sp, #52	@ 0x34
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	6039      	str	r1, [r7, #0]
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	466b      	mov	r3, sp
 8001538:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001546:	4293      	cmp	r3, r2
 8001548:	d802      	bhi.n	8001550 <ILI9341_Draw_Colour_Burst+0x28>
	{
		Buffer_Size = Size;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800154e:	e002      	b.n	8001556 <ILI9341_Draw_Colour_Burst+0x2e>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8001550:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2102      	movs	r1, #2
 800155a:	4869      	ldr	r0, [pc, #420]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 800155c:	f005 fb8e 	bl	8006c7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001566:	4866      	ldr	r0, [pc, #408]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001568:	f005 fb88 	bl	8006c7c <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	b29b      	uxth	r3, r3
 8001572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	115b      	asrs	r3, r3, #5
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  uint8_t b = Colour & 0x001F;
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	  r = (r * 255) / 31;
 8001590:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001594:	4613      	mov	r3, r2
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	4a5a      	ldr	r2, [pc, #360]	@ (8001704 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800159c:	fb82 1203 	smull	r1, r2, r2, r3
 80015a0:	441a      	add	r2, r3
 80015a2:	1112      	asrs	r2, r2, #4
 80015a4:	17db      	asrs	r3, r3, #31
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  g = (g * 255) / 63;
 80015ac:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80015b0:	4613      	mov	r3, r2
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	4a54      	ldr	r2, [pc, #336]	@ (8001708 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80015b8:	fb82 1203 	smull	r1, r2, r2, r3
 80015bc:	441a      	add	r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  b = (b * 255) / 31;
 80015c8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80015cc:	4613      	mov	r3, r2
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80015d4:	fb82 1203 	smull	r1, r2, r2, r3
 80015d8:	441a      	add	r2, r3
 80015da:	1112      	asrs	r2, r2, #4
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	unsigned char burst_buffer[Buffer_Size];
 80015e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015e6:	460b      	mov	r3, r1
 80015e8:	3b01      	subs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	2300      	movs	r3, #0
 80015ee:	4688      	mov	r8, r1
 80015f0:	4699      	mov	r9, r3
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001606:	2300      	movs	r3, #0
 8001608:	460c      	mov	r4, r1
 800160a:	461d      	mov	r5, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	00eb      	lsls	r3, r5, #3
 8001616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161a:	00e2      	lsls	r2, r4, #3
 800161c:	1dcb      	adds	r3, r1, #7
 800161e:	08db      	lsrs	r3, r3, #3
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	ebad 0d03 	sub.w	sp, sp, r3
 8001626:	466b      	mov	r3, sp
 8001628:	3300      	adds	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001630:	e014      	b.n	800165c <ILI9341_Draw_Colour_Burst+0x134>
	{
		burst_buffer[j] = r;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001636:	4413      	add	r3, r2
 8001638:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800163c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	3301      	adds	r3, #1
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8001648:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	3302      	adds	r3, #2
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8001654:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	3303      	adds	r3, #3
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800165c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800165e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	d3e6      	bcc.n	8001632 <ILI9341_Draw_Colour_Burst+0x10a>
	}

	uint32_t Sending_Size = Size * 3;
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001682:	fb01 f202 	mul.w	r2, r1, r2
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d018      	beq.n	80016c2 <ILI9341_Draw_Colour_Burst+0x19a>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	e011      	b.n	80016ba <ILI9341_Draw_Colour_Burst+0x192>
		{
			SPI2_TX_completed_flag = 0;
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi2, (unsigned char*) burst_buffer, Buffer_Size);
 800169c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169e:	b29b      	uxth	r3, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	481a      	ldr	r0, [pc, #104]	@ (8001710 <ILI9341_Draw_Colour_Burst+0x1e8>)
 80016a6:	f006 fc43 	bl	8007f30 <HAL_SPI_Transmit_DMA>
			while (SPI2_TX_completed_flag == 0);
 80016aa:	bf00      	nop
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0fb      	beq.n	80016ac <ILI9341_Draw_Colour_Burst+0x184>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	3301      	adds	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3e9      	bcc.n	8001696 <ILI9341_Draw_Colour_Burst+0x16e>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <ILI9341_Draw_Colour_Burst+0x1be>
	{
		SPI2_TX_completed_flag = 0;
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi2, (unsigned char*) burst_buffer, Remainder_from_block);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	69b9      	ldr	r1, [r7, #24]
 80016d6:	480e      	ldr	r0, [pc, #56]	@ (8001710 <ILI9341_Draw_Colour_Burst+0x1e8>)
 80016d8:	f006 fc2a 	bl	8007f30 <HAL_SPI_Transmit_DMA>
		while (SPI2_TX_completed_flag == 0);
 80016dc:	bf00      	nop
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <ILI9341_Draw_Colour_Burst+0x1e4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0fb      	beq.n	80016de <ILI9341_Draw_Colour_Burst+0x1b6>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <ILI9341_Draw_Colour_Burst+0x1d8>)
 80016ee:	f005 fac5 	bl	8006c7c <HAL_GPIO_WritePin>
 80016f2:	46b5      	mov	sp, r6
}
 80016f4:	bf00      	nop
 80016f6:	3734      	adds	r7, #52	@ 0x34
 80016f8:	46bd      	mov	sp, r7
 80016fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016fe:	bf00      	nop
 8001700:	40020400 	.word	0x40020400
 8001704:	84210843 	.word	0x84210843
 8001708:	82082083 	.word	0x82082083
 800170c:	2000000c 	.word	0x2000000c
 8001710:	2000026c 	.word	0x2000026c

08001714 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800171e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001722:	f240 12df 	movw	r2, #479	@ 0x1df
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fcc3 	bl	80010b4 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fef7 	bl	8001528 <ILI9341_Draw_Colour_Burst>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b08b      	sub	sp, #44	@ 0x2c
 8001746:	af02      	add	r7, sp, #8
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4603      	mov	r3, r0
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	460b      	mov	r3, r1
 8001752:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	777b      	strb	r3, [r7, #29]
 8001764:	2300      	movs	r3, #0
 8001766:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 800176c:	2300      	movs	r3, #0
 800176e:	763b      	strb	r3, [r7, #24]
 8001770:	e09b      	b.n	80018aa <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001772:	2300      	movs	r3, #0
 8001774:	767b      	strb	r3, [r7, #25]
 8001776:	e056      	b.n	8001826 <LCD_Char+0xe4>
		{
			if (bit == 0)
 8001778:	7f3b      	ldrb	r3, [r7, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	83fa      	strh	r2, [r7, #30]
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8001792:	7f7a      	ldrb	r2, [r7, #29]
 8001794:	7f3b      	ldrb	r3, [r7, #28]
 8001796:	4013      	ands	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <LCD_Char+0x64>
 800179e:	8b7b      	ldrh	r3, [r7, #26]
 80017a0:	3301      	adds	r3, #1
 80017a2:	837b      	strh	r3, [r7, #26]
 80017a4:	e039      	b.n	800181a <LCD_Char+0xd8>
			else if (set_pixels > 0)
 80017a6:	8b7b      	ldrh	r3, [r7, #26]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d036      	beq.n	800181a <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80017b2:	461a      	mov	r2, r3
 80017b4:	7e7b      	ldrb	r3, [r7, #25]
 80017b6:	441a      	add	r2, r3
 80017b8:	8b7b      	ldrh	r3, [r7, #26]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	fb12 f303 	smulbb	r3, r2, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b218      	sxth	r0, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017d8:	461a      	mov	r2, r3
 80017da:	7e3b      	ldrb	r3, [r7, #24]
 80017dc:	4413      	add	r3, r2
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	fb12 f303 	smulbb	r3, r2, r3
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	89bb      	ldrh	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b219      	sxth	r1, r3
 80017f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	8b7a      	ldrh	r2, [r7, #26]
 80017fc:	fb12 f303 	smulbb	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21a      	sxth	r2, r3
 8001804:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001808:	b21c      	sxth	r4, r3
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180c:	b29b      	uxth	r3, r3
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4623      	mov	r3, r4
 8001812:	f7ff fca9 	bl	8001168 <fillRect>
				set_pixels = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800181a:	7f3b      	ldrb	r3, [r7, #28]
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001820:	7e7b      	ldrb	r3, [r7, #25]
 8001822:	3301      	adds	r3, #1
 8001824:	767b      	strb	r3, [r7, #25]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	7e7a      	ldrb	r2, [r7, #25]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3a3      	bcc.n	8001778 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001830:	8b7b      	ldrh	r3, [r7, #26]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d036      	beq.n	80018a4 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800183c:	461a      	mov	r2, r3
 800183e:	7e7b      	ldrb	r3, [r7, #25]
 8001840:	441a      	add	r2, r3
 8001842:	8b7b      	ldrh	r3, [r7, #26]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800184c:	b29b      	uxth	r3, r3
 800184e:	fb12 f303 	smulbb	r3, r2, r3
 8001852:	b29a      	uxth	r2, r3
 8001854:	89fb      	ldrh	r3, [r7, #14]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	b218      	sxth	r0, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001862:	461a      	mov	r2, r3
 8001864:	7e3b      	ldrb	r3, [r7, #24]
 8001866:	4413      	add	r3, r2
 8001868:	b29a      	uxth	r2, r3
 800186a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800186e:	b29b      	uxth	r3, r3
 8001870:	fb12 f303 	smulbb	r3, r2, r3
 8001874:	b29a      	uxth	r2, r3
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	b219      	sxth	r1, r3
 800187e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001882:	b29b      	uxth	r3, r3
 8001884:	8b7a      	ldrh	r2, [r7, #26]
 8001886:	fb12 f303 	smulbb	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001892:	b21c      	sxth	r4, r3
 8001894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001896:	b29b      	uxth	r3, r3
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4623      	mov	r3, r4
 800189c:	f7ff fc64 	bl	8001168 <fillRect>
			set_pixels = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80018a4:	7e3b      	ldrb	r3, [r7, #24]
 80018a6:	3301      	adds	r3, #1
 80018a8:	763b      	strb	r3, [r7, #24]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	7e3a      	ldrb	r2, [r7, #24]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f4ff af5e 	bcc.w	8001772 <LCD_Char+0x30>
		}
	}
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	@ 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}

080018c0 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b08f      	sub	sp, #60	@ 0x3c
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4603      	mov	r3, r0
 80018cc:	81fb      	strh	r3, [r7, #14]
 80018ce:	460b      	mov	r3, r1
 80018d0:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 80018d6:	89bb      	ldrh	r3, [r7, #12]
 80018d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	220c      	movs	r2, #12
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 f943 	bl	800ab6e <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80018ec:	e056      	b.n	800199c <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80018ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if (c == '\n')
 80018fa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d10f      	bne.n	8001922 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8001906:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800190a:	461a      	mov	r2, r3
 800190c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001910:	b29b      	uxth	r3, r3
 8001912:	fb12 f303 	smulbb	r3, r2, r3
 8001916:	b29a      	uxth	r2, r3
 8001918:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001920:	e039      	b.n	8001996 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001922:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001926:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800192a:	429a      	cmp	r2, r3
 800192c:	d333      	bcc.n	8001996 <LCD_Font+0xd6>
 800192e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001932:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001936:	429a      	cmp	r2, r3
 8001938:	d82d      	bhi.n	8001996 <LCD_Font+0xd6>
 800193a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800193e:	2b0d      	cmp	r3, #13
 8001940:	d029      	beq.n	8001996 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001948:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800194c:	1a5b      	subs	r3, r3, r1
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	18d1      	adds	r1, r2, r3
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2208      	movs	r2, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f009 f908 	bl	800ab6e <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800195e:	f107 041c 	add.w	r4, r7, #28
 8001962:	f107 0214 	add.w	r2, r7, #20
 8001966:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800196a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800196e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4623      	mov	r3, r4
 800197a:	f7ff fee2 	bl	8001742 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800197e:	7e3b      	ldrb	r3, [r7, #24]
 8001980:	461a      	mov	r2, r3
 8001982:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001986:	b29b      	uxth	r3, r3
 8001988:	fb12 f303 	smulbb	r3, r2, r3
 800198c:	b29a      	uxth	r2, r3
 800198e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001998:	3301      	adds	r3, #1
 800199a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800199c:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f7fe fc6e 	bl	8000280 <strlen>
 80019a4:	4603      	mov	r3, r0
 80019a6:	429c      	cmp	r4, r3
 80019a8:	d3a1      	bcc.n	80018ee <LCD_Font+0x2e>
		}
	}
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3734      	adds	r7, #52	@ 0x34
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <LCD_Line>:
		}
	}
}

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	@ 0x2c
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4604      	mov	r4, r0
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	4603      	mov	r3, r0
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	807b      	strh	r3, [r7, #2]
 80019ce:	4613      	mov	r3, r2
 80019d0:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	425b      	neglt	r3, r3
 80019de:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80019e0:	883a      	ldrh	r2, [r7, #0]
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfb8      	it	lt
 80019ea:	425b      	neglt	r3, r3
 80019ec:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d201      	bcs.n	80019fa <LCD_Line+0x46>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e001      	b.n	80019fe <LCD_Line+0x4a>
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001a00:	88ba      	ldrh	r2, [r7, #4]
 8001a02:	883b      	ldrh	r3, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d201      	bcs.n	8001a0c <LCD_Line+0x58>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e001      	b.n	8001a10 <LCD_Line+0x5c>
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		fillRect(x1, y1, size, size, color24);
 8001a1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a30:	b21c      	sxth	r4, r3
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4623      	mov	r3, r4
 8001a3a:	f7ff fb95 	bl	8001168 <fillRect>
		if (x1 == x2 && y1 == y2)
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d103      	bne.n	8001a4e <LCD_Line+0x9a>
 8001a46:	88ba      	ldrh	r2, [r7, #4]
 8001a48:	883b      	ldrh	r3, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d01e      	beq.n	8001a8c <LCD_Line+0xd8>
		break;
		error2 = error * 2;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	425b      	negs	r3, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dd08      	ble.n	8001a70 <LCD_Line+0xbc>
		{
			error -= deltaY;
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dad2      	bge.n	8001a1e <LCD_Line+0x6a>
		{
			error += deltaX;
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	80bb      	strh	r3, [r7, #4]
		fillRect(x1, y1, size, size, color24);
 8001a8a:	e7c8      	b.n	8001a1e <LCD_Line+0x6a>
		break;
 8001a8c:	bf00      	nop
		}
	}
}
 8001a8e:	bf00      	nop
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}

08001a96 <LCD_Circle_Fill_Helper>:
	LCD_Circle_Helper(x + length - r - 1, y + width - r - 1, r, 4, size, color24);
	LCD_Circle_Helper(x + r, y + width - r - 1, r, 8, size, color24);
}

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8001a96:	b590      	push	{r4, r7, lr}
 8001a98:	b089      	sub	sp, #36	@ 0x24
 8001a9a:	af02      	add	r7, sp, #8
 8001a9c:	4604      	mov	r4, r0
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	80fb      	strh	r3, [r7, #6]
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	80bb      	strh	r3, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	f1c3 0301 	rsb	r3, r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	03d2      	lsls	r2, r2, #15
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001ad8:	e0ab      	b.n	8001c32 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0e      	blt.n	8001b00 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8001ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001aee:	8a7b      	ldrh	r3, [r7, #18]
 8001af0:	3302      	adds	r3, #2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001af6:	8afa      	ldrh	r2, [r7, #22]
 8001af8:	8a7b      	ldrh	r3, [r7, #18]
 8001afa:	4413      	add	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8001b00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3301      	adds	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8001b0c:	8abb      	ldrh	r3, [r7, #20]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8001b14:	8afa      	ldrh	r2, [r7, #22]
 8001b16:	8abb      	ldrh	r3, [r7, #20]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8001b1e:	787b      	ldrb	r3, [r7, #1]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d03f      	beq.n	8001ba8 <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	8a3b      	ldrh	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b298      	uxth	r0, r3
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	89fb      	ldrh	r3, [r7, #14]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b299      	uxth	r1, r3
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	8a3b      	ldrh	r3, [r7, #16]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29c      	uxth	r4, r3
 8001b40:	88ba      	ldrh	r2, [r7, #4]
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	4622      	mov	r2, r4
 8001b64:	f7ff ff26 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	88ba      	ldrh	r2, [r7, #4]
 8001b72:	8a3b      	ldrh	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	b299      	uxth	r1, r3
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29c      	uxth	r4, r3
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	8a3b      	ldrh	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	8a3b      	ldrh	r3, [r7, #16]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b94:	4413      	add	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	f7ff ff06 	bl	80019b4 <LCD_Line>
		}
		if (cornername & 0x2) {
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03f      	beq.n	8001c32 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	8a3b      	ldrh	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	b298      	uxth	r0, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	8a3b      	ldrh	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	b29c      	uxth	r4, r3
 8001bca:	88ba      	ldrh	r2, [r7, #4]
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	89fb      	ldrh	r3, [r7, #14]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001bde:	4413      	add	r3, r2
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	4622      	mov	r2, r4
 8001bee:	f7ff fee1 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	b298      	uxth	r0, r3
 8001bfa:	88ba      	ldrh	r2, [r7, #4]
 8001bfc:	8a3b      	ldrh	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b299      	uxth	r1, r3
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	b29c      	uxth	r4, r3
 8001c0a:	88ba      	ldrh	r2, [r7, #4]
 8001c0c:	8a3b      	ldrh	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	8a3b      	ldrh	r3, [r7, #16]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	f7ff fec1 	bl	80019b4 <LCD_Line>
	while (x < y) {
 8001c32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f6ff af4d 	blt.w	8001ada <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8001c4a:	b590      	push	{r4, r7, lr}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	4604      	mov	r4, r0
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	80bb      	strh	r3, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	803b      	strh	r3, [r7, #0]
	fillRect(x + r, y, length - 2 * r, width, color24);
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	8b3b      	ldrh	r3, [r7, #24]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b218      	sxth	r0, r3
 8001c72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c76:	8b3b      	ldrh	r3, [r7, #24]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	887a      	ldrh	r2, [r7, #2]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	4623      	mov	r3, r4
 8001c90:	f7ff fa6a 	bl	8001168 <fillRect>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	8b3b      	ldrh	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b218      	sxth	r0, r3
 8001ca8:	88ba      	ldrh	r2, [r7, #4]
 8001caa:	8b3b      	ldrh	r3, [r7, #24]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	b219      	sxth	r1, r3
 8001cb2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001cb6:	8b3b      	ldrh	r3, [r7, #24]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	883a      	ldrh	r2, [r7, #0]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	f7ff fee0 	bl	8001a96 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	8b3b      	ldrh	r3, [r7, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b218      	sxth	r0, r3
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	8b3b      	ldrh	r3, [r7, #24]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	b219      	sxth	r1, r3
 8001cea:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001cee:	8b3b      	ldrh	r3, [r7, #24]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	883a      	ldrh	r2, [r7, #0]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	4622      	mov	r2, r4
 8001d0a:	f7ff fec4 	bl	8001a96 <LCD_Circle_Fill_Helper>
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd90      	pop	{r4, r7, pc}
	...

08001d18 <Check_Uart_update>:

/***************************************************************************************
 ************* The function is used to check for the button status change **************
*****************************************************************************************/
void Check_Uart_update(uint8_t *RelayStatus_arr_ESP_Para, uint8_t *RelayStatus_arr_STM_Para)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	uint8_t idx_relay;
	while(Flag_Uart == true)
 8001d22:	e04d      	b.n	8001dc0 <Check_Uart_update+0xa8>
	{
		for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e047      	b.n	8001dba <Check_Uart_update+0xa2>
		{
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <Check_Uart_update+0xbc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24
			RelayStatus_arr_ESP_Para[idx_relay] = (Ctr_Dev & (1u << idx_relay)) ? RL_ON : RL_OFF;
 8001d32:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <Check_Uart_update+0xc0>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	440b      	add	r3, r1
 8001d46:	f002 0201 	and.w	r2, r2, #1
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
			if(RelayStatus_arr_ESP_Para[idx_relay] != RelayStatus_arr_STM_Para[idx_relay])
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d015      	beq.n	8001d8e <Check_Uart_update+0x76>
			{
				ReL_LoRa_Sen[idx_relay] = RelayStatus_arr_ESP_Para[idx_relay] | 0x80;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d70:	b2d1      	uxtb	r1, r2
 8001d72:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <Check_Uart_update+0xc4>)
 8001d74:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(idx_relay);
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fb01 	bl	8004380 <Send_Lora_UpdateRelay>
				if(StDisplay == CTRL_SCREEN_1)
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <Check_Uart_update+0xc8>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d103      	bne.n	8001d8e <Check_Uart_update+0x76>
				{
					Update_StatusBt(&RelayStatus_arr_ESP_Para[0], &RelayStatus_arr_STM_Para[0]);
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 facf 	bl	800232c <Update_StatusBt>
				}
			}
			RelayStatus_arr_STM_Para[idx_relay] = RelayStatus_arr_ESP_Para[idx_relay];
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	441a      	add	r2, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	440b      	add	r3, r1
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
			if(idx_relay >= 9)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d907      	bls.n	8001db4 <Check_Uart_update+0x9c>
			{
				Flag_Uart = false;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <Check_Uart_update+0xcc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, &byte_rx, 1);
 8001daa:	2201      	movs	r2, #1
 8001dac:	490e      	ldr	r1, [pc, #56]	@ (8001de8 <Check_Uart_update+0xd0>)
 8001dae:	480f      	ldr	r0, [pc, #60]	@ (8001dec <Check_Uart_update+0xd4>)
 8001db0:	f007 f965 	bl	800907e <HAL_UART_Receive_IT>
		for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d9b4      	bls.n	8001d2a <Check_Uart_update+0x12>
	while(Flag_Uart == true)
 8001dc0:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <Check_Uart_update+0xcc>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ac      	bne.n	8001d24 <Check_Uart_update+0xc>
			}
		}
	}
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	200003c4 	.word	0x200003c4
 8001dd8:	20000486 	.word	0x20000486
 8001ddc:	2000047c 	.word	0x2000047c
 8001de0:	2000046c 	.word	0x2000046c
 8001de4:	20000495 	.word	0x20000495
 8001de8:	20000610 	.word	0x20000610
 8001dec:	2000040c 	.word	0x2000040c

08001df0 <HAL_SPI_TxCpltCallback>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	SPI2_TX_completed_flag = 1;
 8001df8:	4b04      	ldr	r3, [pc, #16]	@ (8001e0c <HAL_SPI_TxCpltCallback+0x1c>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <Send_Uart1>:

void Send_Uart1(uint8_t *start_byte, uint8_t *Buffer, uint8_t *stop_bytes, uint8_t SizeofStartByte, uint8_t SizeofBuff)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart1, start_byte, SizeofStartByte, HAL_MAX_DELAY);
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	68f9      	ldr	r1, [r7, #12]
 8001e28:	480a      	ldr	r0, [pc, #40]	@ (8001e54 <Send_Uart1+0x44>)
 8001e2a:	f007 f89d 	bl	8008f68 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, Buffer, SizeofBuff, HAL_MAX_DELAY);
 8001e2e:	7e3b      	ldrb	r3, [r7, #24]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <Send_Uart1+0x44>)
 8001e3a:	f007 f895 	bl	8008f68 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, stop_bytes, 1, HAL_MAX_DELAY);
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	2201      	movs	r2, #1
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <Send_Uart1+0x44>)
 8001e48:	f007 f88e 	bl	8008f68 <HAL_UART_Transmit>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000040c 	.word	0x2000040c

08001e58 <isIrmsChanged>:

/***************************************************************************************
 ************* The function is used to check for the current value change **************
****************************************************************************************/
bool isIrmsChanged(float *currentData, float *lastData, bool *idx_updated)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b087      	sub	sp, #28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
    bool isChanged = false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	75fb      	strb	r3, [r7, #23]
    uint8_t idx_update_vl;

    for (idx_update_vl = 0; idx_update_vl < INDEX_VALUE; idx_update_vl++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75bb      	strb	r3, [r7, #22]
 8001e6c:	e043      	b.n	8001ef6 <isIrmsChanged+0x9e>
    {
        if ((lastData[idx_update_vl] - currentData[idx_update_vl] >= 0.25)
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4413      	add	r3, r2
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	da14      	bge.n	8001ec2 <isIrmsChanged+0x6a>
            || (currentData[idx_update_vl] - lastData[idx_update_vl] >= 0.25))
 8001e98:	7dbb      	ldrb	r3, [r7, #22]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	7dbb      	ldrb	r3, [r7, #22]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	4413      	add	r3, r2
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	db11      	blt.n	8001ee6 <isIrmsChanged+0x8e>
        {
            currentData[idx_update_vl] = lastData[idx_update_vl];
 8001ec2:	7dbb      	ldrb	r3, [r7, #22]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	441a      	add	r2, r3
 8001eca:	7dbb      	ldrb	r3, [r7, #22]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	601a      	str	r2, [r3, #0]
            idx_updated[idx_update_vl] = true;
 8001ed6:	7dbb      	ldrb	r3, [r7, #22]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
            isChanged = true;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
 8001ee4:	e004      	b.n	8001ef0 <isIrmsChanged+0x98>
        }
        else
        {
            idx_updated[idx_update_vl] = false;
 8001ee6:	7dbb      	ldrb	r3, [r7, #22]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    for (idx_update_vl = 0; idx_update_vl < INDEX_VALUE; idx_update_vl++)
 8001ef0:	7dbb      	ldrb	r3, [r7, #22]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	75bb      	strb	r3, [r7, #22]
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	2b09      	cmp	r3, #9
 8001efa:	d9b8      	bls.n	8001e6e <isIrmsChanged+0x16>
        }
    }
    return isChanged;
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <Default_Display>:
/***************************************************************************************
 	 ************* The function is used to display the current value **************
*****************************************************************************************/
void Default_Display() {
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b08f      	sub	sp, #60	@ 0x3c
 8001f10:	af02      	add	r7, sp, #8
	char buf[20];
	int col_width = 220, row_height = 50, start_x = 15, start_y = 5, line_thickness = 3;
 8001f12:	23dc      	movs	r3, #220	@ 0xdc
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f16:	2332      	movs	r3, #50	@ 0x32
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	2305      	movs	r3, #5
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2303      	movs	r3, #3
 8001f24:	61bb      	str	r3, [r7, #24]
	int i;
	ILI9341_Fill_Screen(WHITE);
 8001f26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f2a:	f7ff fbf3 	bl	8001714 <ILI9341_Fill_Screen>

	/* ---- Create table ---- */
	for (i = 0; i <= 5; i++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f32:	e01c      	b.n	8001f6e <Default_Display+0x62>
		fillRect(start_x, start_y + i * row_height, col_width * 2,
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	b218      	sxth	r0, r3
 8001f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	fb12 f303 	smulbb	r3, r2, r3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b219      	sxth	r1, r3
 8001f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b21a      	sxth	r2, r3
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	f241 0482 	movw	r4, #4226	@ 0x1082
 8001f62:	9400      	str	r4, [sp, #0]
 8001f64:	f7ff f900 	bl	8001168 <fillRect>
	for (i = 0; i <= 5; i++) {
 8001f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	dddf      	ble.n	8001f34 <Default_Display+0x28>
				line_thickness, GREY15);
	}
	for (i = 0; i <= 2; i++) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f78:	e023      	b.n	8001fc2 <Default_Display+0xb6>
		fillRect(start_x + i * col_width, start_y, line_thickness,
 8001f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	fb12 f303 	smulbb	r3, r2, r3
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b218      	sxth	r0, r3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	b219      	sxth	r1, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	b21c      	sxth	r4, r3
				row_height * 5 + line_thickness, GREY15);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	0092      	lsls	r2, r2, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	b29b      	uxth	r3, r3
		fillRect(start_x + i * col_width, start_y, line_thickness,
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	f241 0282 	movw	r2, #4226	@ 0x1082
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	f7ff f8d6 	bl	8001168 <fillRect>
	for (i = 0; i <= 2; i++) {
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	ddd8      	ble.n	8001f7a <Default_Display+0x6e>
	}

	/* ---- Print Current value ---- */
	for (i = 0; i < 5; i++) {
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fcc:	e185      	b.n	80022da <Default_Display+0x3ce>
		if(NodeStatus_arr[i] == 1)
 8001fce:	4a8f      	ldr	r2, [pc, #572]	@ (800220c <Default_Display+0x300>)
 8001fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d15c      	bne.n	8002094 <Default_Display+0x188>
		{
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	b218      	sxth	r0, r3
 8001fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	fb12 f303 	smulbb	r3, r2, r3
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8002008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800200a:	b29a      	uxth	r2, r3
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	b29b      	uxth	r3, r3
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8002018:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	b29a      	uxth	r2, r3
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	b29b      	uxth	r3, r3
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 800202a:	b21b      	sxth	r3, r3
 800202c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002030:	9200      	str	r2, [sp, #0]
 8002032:	4622      	mov	r2, r4
 8002034:	f7ff f898 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: %0.2fA", i + 1, irms1_arr[i]);
 8002038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203a:	1c5c      	adds	r4, r3, #1
 800203c:	4a74      	ldr	r2, [pc, #464]	@ (8002210 <Default_Display+0x304>)
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa86 	bl	8000558 <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	1d38      	adds	r0, r7, #4
 8002052:	e9cd 2300 	strd	r2, r3, [sp]
 8002056:	4622      	mov	r2, r4
 8002058:	496e      	ldr	r1, [pc, #440]	@ (8002214 <Default_Display+0x308>)
 800205a:	f008 fca5 	bl	800a9a8 <siprintf>
			LCD_Font(start_x + 12, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAGENTA);
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	b29b      	uxth	r3, r3
 8002062:	330c      	adds	r3, #12
 8002064:	b298      	uxth	r0, r3
 8002066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002068:	b29a      	uxth	r2, r3
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	b29b      	uxth	r3, r3
 800206e:	fb12 f303 	smulbb	r3, r2, r3
 8002072:	b29a      	uxth	r2, r3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	3323      	adds	r3, #35	@ 0x23
 800207e:	b299      	uxth	r1, r3
 8002080:	1d3a      	adds	r2, r7, #4
 8002082:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	2301      	movs	r3, #1
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4b62      	ldr	r3, [pc, #392]	@ (8002218 <Default_Display+0x30c>)
 800208e:	f7ff fc17 	bl	80018c0 <LCD_Font>
 8002092:	e04f      	b.n	8002134 <Default_Display+0x228>
		}
		else
		{
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	b29a      	uxth	r2, r3
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4413      	add	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b218      	sxth	r0, r3
 80020a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	fb12 f303 	smulbb	r3, r2, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 80020d2:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	b29b      	uxth	r3, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29b      	uxth	r3, r3
			fillRect(start_x + line_thickness, start_y + i * row_height + line_thickness,
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ea:	9200      	str	r2, [sp, #0]
 80020ec:	4622      	mov	r2, r4
 80020ee:	f7ff f83b 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: TAT", i + 1);
 80020f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4948      	ldr	r1, [pc, #288]	@ (800221c <Default_Display+0x310>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f008 fc54 	bl	800a9a8 <siprintf>
			LCD_Font(start_x + 12, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAGENTA);
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	b29b      	uxth	r3, r3
 8002104:	330c      	adds	r3, #12
 8002106:	b298      	uxth	r0, r3
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	b29a      	uxth	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	b29b      	uxth	r3, r3
 8002110:	fb12 f303 	smulbb	r3, r2, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	3323      	adds	r3, #35	@ 0x23
 8002120:	b299      	uxth	r1, r3
 8002122:	1d3a      	adds	r2, r7, #4
 8002124:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2301      	movs	r3, #1
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <Default_Display+0x30c>)
 8002130:	f7ff fbc6 	bl	80018c0 <LCD_Font>
		}

		if(NodeStatus_arr[i + 5] == 1)
 8002134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002136:	3305      	adds	r3, #5
 8002138:	4a34      	ldr	r2, [pc, #208]	@ (800220c <Default_Display+0x300>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d171      	bne.n	8002224 <Default_Display+0x318>
		{
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	b29a      	uxth	r2, r3
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	b29b      	uxth	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b29a      	uxth	r2, r3
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	b218      	sxth	r0, r3
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	b29a      	uxth	r2, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	b29b      	uxth	r3, r3
 800215e:	fb12 f303 	smulbb	r3, r2, r3
 8002162:	b29a      	uxth	r2, r3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4413      	add	r3, r2
 800216a:	b29a      	uxth	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	b29a      	uxth	r2, r3
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	b29b      	uxth	r3, r3
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002186:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	b29a      	uxth	r2, r3
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	b29b      	uxth	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	b29b      	uxth	r3, r3
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002198:	b21b      	sxth	r3, r3
 800219a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	4622      	mov	r2, r4
 80021a2:	f7fe ffe1 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: %.2fA", i + 6, irms1_arr[i + 5]);
 80021a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a8:	1d9c      	adds	r4, r3, #6
 80021aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ac:	3305      	adds	r3, #5
 80021ae:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <Default_Display+0x304>)
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f9ce 	bl	8000558 <__aeabi_f2d>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	1d38      	adds	r0, r7, #4
 80021c2:	e9cd 2300 	strd	r2, r3, [sp]
 80021c6:	4622      	mov	r2, r4
 80021c8:	4915      	ldr	r1, [pc, #84]	@ (8002220 <Default_Display+0x314>)
 80021ca:	f008 fbed 	bl	800a9a8 <siprintf>
			LCD_Font(start_x + 12 + col_width, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	330c      	adds	r3, #12
 80021dc:	b298      	uxth	r0, r3
 80021de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	fb12 f303 	smulbb	r3, r2, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3323      	adds	r3, #35	@ 0x23
 80021f6:	b299      	uxth	r1, r3
 80021f8:	1d3a      	adds	r2, r7, #4
 80021fa:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2301      	movs	r3, #1
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <Default_Display+0x30c>)
 8002206:	f7ff fb5b 	bl	80018c0 <LCD_Font>
 800220a:	e063      	b.n	80022d4 <Default_Display+0x3c8>
 800220c:	2000058c 	.word	0x2000058c
 8002210:	20000598 	.word	0x20000598
 8002214:	0800cc20 	.word	0x0800cc20
 8002218:	0800f1ec 	.word	0x0800f1ec
 800221c:	0800cc30 	.word	0x0800cc30
 8002220:	0800cc40 	.word	0x0800cc40

		}
		else
		{
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	b29a      	uxth	r2, r3
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	b29b      	uxth	r3, r3
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	b218      	sxth	r0, r3
 800223a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223c:	b29a      	uxth	r2, r3
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	b29b      	uxth	r3, r3
 8002242:	fb12 f303 	smulbb	r3, r2, r3
 8002246:	b29a      	uxth	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4413      	add	r3, r2
 800224e:	b29a      	uxth	r2, r3
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4413      	add	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	b219      	sxth	r1, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	b29a      	uxth	r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	b29b      	uxth	r3, r3
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	b29b      	uxth	r3, r3
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 800226a:	b21c      	sxth	r4, r3
					col_width - line_thickness * 2, row_height - line_thickness * 2, WHITE);
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	b29a      	uxth	r2, r3
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	b29b      	uxth	r3, r3
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b29b      	uxth	r3, r3
			fillRect(start_x + col_width + line_thickness, start_y + i * row_height + line_thickness,
 800227c:	b21b      	sxth	r3, r3
 800227e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	4622      	mov	r2, r4
 8002286:	f7fe ff6f 	bl	8001168 <fillRect>
			sprintf(buf, "Node %d: TAT", i + 6);
 800228a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800228c:	1d9a      	adds	r2, r3, #6
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4922      	ldr	r1, [pc, #136]	@ (800231c <Default_Display+0x410>)
 8002292:	4618      	mov	r0, r3
 8002294:	f008 fb88 	bl	800a9a8 <siprintf>
			LCD_Font(start_x + 12 + col_width, start_y + i * row_height + 35, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	b29a      	uxth	r2, r3
 800229c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	330c      	adds	r3, #12
 80022a6:	b298      	uxth	r0, r3
 80022a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	fb12 f303 	smulbb	r3, r2, r3
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3323      	adds	r3, #35	@ 0x23
 80022c0:	b299      	uxth	r1, r3
 80022c2:	1d3a      	adds	r2, r7, #4
 80022c4:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2301      	movs	r3, #1
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <Default_Display+0x414>)
 80022d0:	f7ff faf6 	bl	80018c0 <LCD_Font>
	for (i = 0; i < 5; i++) {
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	3301      	adds	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022dc:	2b04      	cmp	r3, #4
 80022de:	f77f ae76 	ble.w	8001fce <Default_Display+0xc2>
		}
	}
	/*---- Create Setting Button ----*/
	LCD_Rect_Round_Fill(100, 265, 270, 50, 5, GREEN);
 80022e2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2305      	movs	r3, #5
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2332      	movs	r3, #50	@ 0x32
 80022ee:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80022f2:	f240 1109 	movw	r1, #265	@ 0x109
 80022f6:	2064      	movs	r0, #100	@ 0x64
 80022f8:	f7ff fca7 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(170, 298, "DIEU KHIEN", _Open_Sans_Bold_22, 1, BLACK);
 80022fc:	2300      	movs	r3, #0
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	2301      	movs	r3, #1
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4b07      	ldr	r3, [pc, #28]	@ (8002324 <Default_Display+0x418>)
 8002306:	4a08      	ldr	r2, [pc, #32]	@ (8002328 <Default_Display+0x41c>)
 8002308:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 800230c:	20aa      	movs	r0, #170	@ 0xaa
 800230e:	f7ff fad7 	bl	80018c0 <LCD_Font>
}
 8002312:	bf00      	nop
 8002314:	3734      	adds	r7, #52	@ 0x34
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	bf00      	nop
 800231c:	0800cc30 	.word	0x0800cc30
 8002320:	0800f1ec 	.word	0x0800f1ec
 8002324:	0800d80c 	.word	0x0800d80c
 8002328:	0800cc50 	.word	0x0800cc50

0800232c <Update_StatusBt>:
/***************************************************************************************
 	********** The function is used to check and update the button status **********
*****************************************************************************************/
void Update_StatusBt(uint8_t *New_St_Relay, uint8_t *Old_St_Relay)
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
	uint8_t idx_st_relay;
	for(idx_st_relay = 0; idx_st_relay < 10; idx_st_relay++)
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e35a      	b.n	80029f2 <Update_StatusBt+0x6c6>
	{
		if(New_St_Relay[idx_st_relay] != Old_St_Relay[idx_st_relay])
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	440b      	add	r3, r1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	f000 834d 	beq.w	80029ec <Update_StatusBt+0x6c0>
		{
			Old_St_Relay[idx_st_relay] = New_St_Relay[idx_st_relay];
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	441a      	add	r2, r3
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	440b      	add	r3, r1
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	701a      	strb	r2, [r3, #0]
			if(idx_st_relay < 3)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f200 80bc 	bhi.w	80024e2 <Update_StatusBt+0x1b6>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d13a      	bne.n	80023ec <Update_StatusBt+0xc0>
				{
					LCD_Rect_Round_Fill(Start_x + (idx_st_relay * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002376:	4b80      	ldr	r3, [pc, #512]	@ (8002578 <Update_StatusBt+0x24c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8da 	bl	8000534 <__aeabi_i2d>
 8002380:	4604      	mov	r4, r0
 8002382:	460d      	mov	r5, r1
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4a7d      	ldr	r2, [pc, #500]	@ (800257c <Update_StatusBt+0x250>)
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8d0 	bl	8000534 <__aeabi_i2d>
 8002394:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002398:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <Update_StatusBt+0x254>)
 800239a:	f7fe f935 	bl	8000608 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fd ff79 	bl	800029c <__adddf3>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fc01 	bl	8000bb8 <__aeabi_d2uiz>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b298      	uxth	r0, r3
 80023ba:	4b72      	ldr	r3, [pc, #456]	@ (8002584 <Update_StatusBt+0x258>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4b6e      	ldr	r3, [pc, #440]	@ (800257c <Update_StatusBt+0x250>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b70      	ldr	r3, [pc, #448]	@ (8002588 <Update_StatusBt+0x25c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461c      	mov	r4, r3
 80023cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2305      	movs	r3, #5
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7ff fc37 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	461a      	mov	r2, r3
 80023e2:	496a      	ldr	r1, [pc, #424]	@ (800258c <Update_StatusBt+0x260>)
 80023e4:	486a      	ldr	r0, [pc, #424]	@ (8002590 <Update_StatusBt+0x264>)
 80023e6:	f008 fadf 	bl	800a9a8 <siprintf>
 80023ea:	e039      	b.n	8002460 <Update_StatusBt+0x134>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + (idx_st_relay * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80023ec:	4b62      	ldr	r3, [pc, #392]	@ (8002578 <Update_StatusBt+0x24c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f89f 	bl	8000534 <__aeabi_i2d>
 80023f6:	4604      	mov	r4, r0
 80023f8:	460d      	mov	r5, r1
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	4a5f      	ldr	r2, [pc, #380]	@ (800257c <Update_StatusBt+0x250>)
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f895 	bl	8000534 <__aeabi_i2d>
 800240a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800240e:	4b5c      	ldr	r3, [pc, #368]	@ (8002580 <Update_StatusBt+0x254>)
 8002410:	f7fe f8fa 	bl	8000608 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4620      	mov	r0, r4
 800241a:	4629      	mov	r1, r5
 800241c:	f7fd ff3e 	bl	800029c <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fbc6 	bl	8000bb8 <__aeabi_d2uiz>
 800242c:	4603      	mov	r3, r0
 800242e:	b298      	uxth	r0, r3
 8002430:	4b54      	ldr	r3, [pc, #336]	@ (8002584 <Update_StatusBt+0x258>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	4b51      	ldr	r3, [pc, #324]	@ (800257c <Update_StatusBt+0x250>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	4b52      	ldr	r3, [pc, #328]	@ (8002588 <Update_StatusBt+0x25c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461c      	mov	r4, r3
 8002442:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2305      	movs	r3, #5
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4623      	mov	r3, r4
 800244e:	f7ff fbfc 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3301      	adds	r3, #1
 8002456:	461a      	mov	r2, r3
 8002458:	494e      	ldr	r1, [pc, #312]	@ (8002594 <Update_StatusBt+0x268>)
 800245a:	484d      	ldr	r0, [pc, #308]	@ (8002590 <Update_StatusBt+0x264>)
 800245c:	f008 faa4 	bl	800a9a8 <siprintf>
				}
				LCD_Font(Start_x + (idx_st_relay * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002460:	4b45      	ldr	r3, [pc, #276]	@ (8002578 <Update_StatusBt+0x24c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f865 	bl	8000534 <__aeabi_i2d>
 800246a:	4604      	mov	r4, r0
 800246c:	460d      	mov	r5, r1
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <Update_StatusBt+0x250>)
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f85b 	bl	8000534 <__aeabi_i2d>
 800247e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002482:	4b3f      	ldr	r3, [pc, #252]	@ (8002580 <Update_StatusBt+0x254>)
 8002484:	f7fe f8c0 	bl	8000608 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff04 	bl	800029c <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4614      	mov	r4, r2
 800249a:	461d      	mov	r5, r3
 800249c:	4b3e      	ldr	r3, [pc, #248]	@ (8002598 <Update_StatusBt+0x26c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f847 	bl	8000534 <__aeabi_i2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4620      	mov	r0, r4
 80024ac:	4629      	mov	r1, r5
 80024ae:	f7fd fef5 	bl	800029c <__adddf3>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe fb7d 	bl	8000bb8 <__aeabi_d2uiz>
 80024be:	4603      	mov	r3, r0
 80024c0:	b298      	uxth	r0, r3
 80024c2:	4b30      	ldr	r3, [pc, #192]	@ (8002584 <Update_StatusBt+0x258>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b34      	ldr	r3, [pc, #208]	@ (800259c <Update_StatusBt+0x270>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	b299      	uxth	r1, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	2301      	movs	r3, #1
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <Update_StatusBt+0x274>)
 80024da:	4a2d      	ldr	r2, [pc, #180]	@ (8002590 <Update_StatusBt+0x264>)
 80024dc:	f7ff f9f0 	bl	80018c0 <LCD_Font>
 80024e0:	e284      	b.n	80029ec <Update_StatusBt+0x6c0>
			}
			else if((idx_st_relay >= 3) && (idx_st_relay < 6))
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	f240 80dd 	bls.w	80026a4 <Update_StatusBt+0x378>
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	f200 80d9 	bhi.w	80026a4 <Update_StatusBt+0x378>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d152      	bne.n	80025a4 <Update_StatusBt+0x278>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <Update_StatusBt+0x24c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f816 	bl	8000534 <__aeabi_i2d>
 8002508:	4604      	mov	r4, r0
 800250a:	460d      	mov	r5, r1
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	3b03      	subs	r3, #3
 8002510:	4a1a      	ldr	r2, [pc, #104]	@ (800257c <Update_StatusBt+0x250>)
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f80b 	bl	8000534 <__aeabi_i2d>
 800251e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <Update_StatusBt+0x254>)
 8002524:	f7fe f870 	bl	8000608 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fd feb4 	bl	800029c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fb3c 	bl	8000bb8 <__aeabi_d2uiz>
 8002540:	4603      	mov	r3, r0
 8002542:	b298      	uxth	r0, r3
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <Update_StatusBt+0x258>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	334b      	adds	r3, #75	@ 0x4b
 800254a:	b299      	uxth	r1, r3
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <Update_StatusBt+0x250>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b0d      	ldr	r3, [pc, #52]	@ (8002588 <Update_StatusBt+0x25c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461c      	mov	r4, r3
 8002558:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2305      	movs	r3, #5
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	4623      	mov	r3, r4
 8002564:	f7ff fb71 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	3301      	adds	r3, #1
 800256c:	461a      	mov	r2, r3
 800256e:	4907      	ldr	r1, [pc, #28]	@ (800258c <Update_StatusBt+0x260>)
 8002570:	4807      	ldr	r0, [pc, #28]	@ (8002590 <Update_StatusBt+0x264>)
 8002572:	f008 fa19 	bl	800a9a8 <siprintf>
 8002576:	e051      	b.n	800261c <Update_StatusBt+0x2f0>
 8002578:	20000000 	.word	0x20000000
 800257c:	20000002 	.word	0x20000002
 8002580:	3ff33333 	.word	0x3ff33333
 8002584:	20000001 	.word	0x20000001
 8002588:	20000003 	.word	0x20000003
 800258c:	0800cc5c 	.word	0x0800cc5c
 8002590:	20000458 	.word	0x20000458
 8002594:	0800cc68 	.word	0x0800cc68
 8002598:	2000000a 	.word	0x2000000a
 800259c:	2000000b 	.word	0x2000000b
 80025a0:	0800d80c 	.word	0x0800d80c
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80025a4:	4ba5      	ldr	r3, [pc, #660]	@ (800283c <Update_StatusBt+0x510>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffc3 	bl	8000534 <__aeabi_i2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	4aa2      	ldr	r2, [pc, #648]	@ (8002840 <Update_StatusBt+0x514>)
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffb8 	bl	8000534 <__aeabi_i2d>
 80025c4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80025c8:	4b9e      	ldr	r3, [pc, #632]	@ (8002844 <Update_StatusBt+0x518>)
 80025ca:	f7fe f81d 	bl	8000608 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd fe61 	bl	800029c <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fae9 	bl	8000bb8 <__aeabi_d2uiz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	b298      	uxth	r0, r3
 80025ea:	4b97      	ldr	r3, [pc, #604]	@ (8002848 <Update_StatusBt+0x51c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	334b      	adds	r3, #75	@ 0x4b
 80025f0:	b299      	uxth	r1, r3
 80025f2:	4b93      	ldr	r3, [pc, #588]	@ (8002840 <Update_StatusBt+0x514>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b94      	ldr	r3, [pc, #592]	@ (800284c <Update_StatusBt+0x520>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461c      	mov	r4, r3
 80025fe:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	2305      	movs	r3, #5
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4623      	mov	r3, r4
 800260a:	f7ff fb1e 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	461a      	mov	r2, r3
 8002614:	498e      	ldr	r1, [pc, #568]	@ (8002850 <Update_StatusBt+0x524>)
 8002616:	488f      	ldr	r0, [pc, #572]	@ (8002854 <Update_StatusBt+0x528>)
 8002618:	f008 f9c6 	bl	800a9a8 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 3) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 800261c:	4b87      	ldr	r3, [pc, #540]	@ (800283c <Update_StatusBt+0x510>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff87 	bl	8000534 <__aeabi_i2d>
 8002626:	4604      	mov	r4, r0
 8002628:	460d      	mov	r5, r1
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	3b03      	subs	r3, #3
 800262e:	4a84      	ldr	r2, [pc, #528]	@ (8002840 <Update_StatusBt+0x514>)
 8002630:	7812      	ldrb	r2, [r2, #0]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff7c 	bl	8000534 <__aeabi_i2d>
 800263c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002640:	4b80      	ldr	r3, [pc, #512]	@ (8002844 <Update_StatusBt+0x518>)
 8002642:	f7fd ffe1 	bl	8000608 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f7fd fe25 	bl	800029c <__adddf3>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4614      	mov	r4, r2
 8002658:	461d      	mov	r5, r3
 800265a:	4b7f      	ldr	r3, [pc, #508]	@ (8002858 <Update_StatusBt+0x52c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff68 	bl	8000534 <__aeabi_i2d>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd fe16 	bl	800029c <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa9e 	bl	8000bb8 <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b298      	uxth	r0, r3
 8002680:	4b71      	ldr	r3, [pc, #452]	@ (8002848 <Update_StatusBt+0x51c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b75      	ldr	r3, [pc, #468]	@ (800285c <Update_StatusBt+0x530>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	334b      	adds	r3, #75	@ 0x4b
 8002690:	b299      	uxth	r1, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2301      	movs	r3, #1
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4b71      	ldr	r3, [pc, #452]	@ (8002860 <Update_StatusBt+0x534>)
 800269c:	4a6d      	ldr	r2, [pc, #436]	@ (8002854 <Update_StatusBt+0x528>)
 800269e:	f7ff f90f 	bl	80018c0 <LCD_Font>
 80026a2:	e1a3      	b.n	80029ec <Update_StatusBt+0x6c0>
			}
			else if((idx_st_relay >= 6) && (idx_st_relay < 9))
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	f240 80de 	bls.w	8002868 <Update_StatusBt+0x53c>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	f200 80da 	bhi.w	8002868 <Update_StatusBt+0x53c>
			{
				if (0 == Old_St_Relay[idx_st_relay])
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13c      	bne.n	800273a <Update_StatusBt+0x40e>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 80026c0:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <Update_StatusBt+0x510>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff35 	bl	8000534 <__aeabi_i2d>
 80026ca:	4604      	mov	r4, r0
 80026cc:	460d      	mov	r5, r1
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3b06      	subs	r3, #6
 80026d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002840 <Update_StatusBt+0x514>)
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff2a 	bl	8000534 <__aeabi_i2d>
 80026e0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80026e4:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <Update_StatusBt+0x518>)
 80026e6:	f7fd ff8f 	bl	8000608 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fd fdd3 	bl	800029c <__adddf3>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa5b 	bl	8000bb8 <__aeabi_d2uiz>
 8002702:	4603      	mov	r3, r0
 8002704:	b298      	uxth	r0, r3
 8002706:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <Update_StatusBt+0x51c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3396      	adds	r3, #150	@ 0x96
 800270c:	b299      	uxth	r1, r3
 800270e:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <Update_StatusBt+0x514>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <Update_StatusBt+0x520>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461c      	mov	r4, r3
 800271a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2305      	movs	r3, #5
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4623      	mov	r3, r4
 8002726:	f7ff fa90 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	3301      	adds	r3, #1
 800272e:	461a      	mov	r2, r3
 8002730:	494c      	ldr	r1, [pc, #304]	@ (8002864 <Update_StatusBt+0x538>)
 8002732:	4848      	ldr	r0, [pc, #288]	@ (8002854 <Update_StatusBt+0x528>)
 8002734:	f008 f938 	bl	800a9a8 <siprintf>
 8002738:	e03b      	b.n	80027b2 <Update_StatusBt+0x486>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 800273a:	4b40      	ldr	r3, [pc, #256]	@ (800283c <Update_StatusBt+0x510>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fef8 	bl	8000534 <__aeabi_i2d>
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3b06      	subs	r3, #6
 800274c:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <Update_StatusBt+0x514>)
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd feed 	bl	8000534 <__aeabi_i2d>
 800275a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <Update_StatusBt+0x518>)
 8002760:	f7fd ff52 	bl	8000608 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4620      	mov	r0, r4
 800276a:	4629      	mov	r1, r5
 800276c:	f7fd fd96 	bl	800029c <__adddf3>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	f7fe fa1e 	bl	8000bb8 <__aeabi_d2uiz>
 800277c:	4603      	mov	r3, r0
 800277e:	b298      	uxth	r0, r3
 8002780:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <Update_StatusBt+0x51c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	3396      	adds	r3, #150	@ 0x96
 8002786:	b299      	uxth	r1, r3
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <Update_StatusBt+0x514>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b2f      	ldr	r3, [pc, #188]	@ (800284c <Update_StatusBt+0x520>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	461c      	mov	r4, r3
 8002794:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	2305      	movs	r3, #5
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	4623      	mov	r3, r4
 80027a0:	f7ff fa53 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	461a      	mov	r2, r3
 80027aa:	4929      	ldr	r1, [pc, #164]	@ (8002850 <Update_StatusBt+0x524>)
 80027ac:	4829      	ldr	r0, [pc, #164]	@ (8002854 <Update_StatusBt+0x528>)
 80027ae:	f008 f8fb 	bl	800a9a8 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 6) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <Update_StatusBt+0x510>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd febc 	bl	8000534 <__aeabi_i2d>
 80027bc:	4604      	mov	r4, r0
 80027be:	460d      	mov	r5, r1
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	3b06      	subs	r3, #6
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <Update_StatusBt+0x514>)
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd feb1 	bl	8000534 <__aeabi_i2d>
 80027d2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <Update_StatusBt+0x518>)
 80027d8:	f7fd ff16 	bl	8000608 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd5a 	bl	800029c <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <Update_StatusBt+0x52c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fd fe9d 	bl	8000534 <__aeabi_i2d>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4620      	mov	r0, r4
 8002800:	4629      	mov	r1, r5
 8002802:	f7fd fd4b 	bl	800029c <__adddf3>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f7fe f9d3 	bl	8000bb8 <__aeabi_d2uiz>
 8002812:	4603      	mov	r3, r0
 8002814:	b298      	uxth	r0, r3
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <Update_StatusBt+0x51c>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <Update_StatusBt+0x530>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4413      	add	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	3396      	adds	r3, #150	@ 0x96
 8002826:	b299      	uxth	r1, r3
 8002828:	2300      	movs	r3, #0
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	2301      	movs	r3, #1
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <Update_StatusBt+0x534>)
 8002832:	4a08      	ldr	r2, [pc, #32]	@ (8002854 <Update_StatusBt+0x528>)
 8002834:	f7ff f844 	bl	80018c0 <LCD_Font>
 8002838:	e0d8      	b.n	80029ec <Update_StatusBt+0x6c0>
 800283a:	bf00      	nop
 800283c:	20000000 	.word	0x20000000
 8002840:	20000002 	.word	0x20000002
 8002844:	3ff33333 	.word	0x3ff33333
 8002848:	20000001 	.word	0x20000001
 800284c:	20000003 	.word	0x20000003
 8002850:	0800cc68 	.word	0x0800cc68
 8002854:	20000458 	.word	0x20000458
 8002858:	2000000a 	.word	0x2000000a
 800285c:	2000000b 	.word	0x2000000b
 8002860:	0800d80c 	.word	0x0800d80c
 8002864:	0800cc5c 	.word	0x0800cc5c
			}
			else
			{
				if (0 == Old_St_Relay[idx_st_relay])
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13c      	bne.n	80028ee <Update_StatusBt+0x5c2>
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002874:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <Update_StatusBt+0x6d8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe5b 	bl	8000534 <__aeabi_i2d>
 800287e:	4604      	mov	r4, r0
 8002880:	460d      	mov	r5, r1
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	3b09      	subs	r3, #9
 8002886:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <Update_StatusBt+0x6dc>)
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe50 	bl	8000534 <__aeabi_i2d>
 8002894:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002898:	4b5c      	ldr	r3, [pc, #368]	@ (8002a0c <Update_StatusBt+0x6e0>)
 800289a:	f7fd feb5 	bl	8000608 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4620      	mov	r0, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	f7fd fcf9 	bl	800029c <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f981 	bl	8000bb8 <__aeabi_d2uiz>
 80028b6:	4603      	mov	r3, r0
 80028b8:	b298      	uxth	r0, r3
 80028ba:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <Update_StatusBt+0x6e4>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	33e1      	adds	r3, #225	@ 0xe1
 80028c0:	b299      	uxth	r1, r3
 80028c2:	4b51      	ldr	r3, [pc, #324]	@ (8002a08 <Update_StatusBt+0x6dc>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b52      	ldr	r3, [pc, #328]	@ (8002a14 <Update_StatusBt+0x6e8>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461c      	mov	r4, r3
 80028ce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	2305      	movs	r3, #5
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4623      	mov	r3, r4
 80028da:	f7ff f9b6 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: TAT", idx_st_relay + 1);
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	3301      	adds	r3, #1
 80028e2:	461a      	mov	r2, r3
 80028e4:	494c      	ldr	r1, [pc, #304]	@ (8002a18 <Update_StatusBt+0x6ec>)
 80028e6:	484d      	ldr	r0, [pc, #308]	@ (8002a1c <Update_StatusBt+0x6f0>)
 80028e8:	f008 f85e 	bl	800a9a8 <siprintf>
 80028ec:	e03b      	b.n	8002966 <Update_StatusBt+0x63a>
				}
				else
				{
					LCD_Rect_Round_Fill(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80028ee:	4b45      	ldr	r3, [pc, #276]	@ (8002a04 <Update_StatusBt+0x6d8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fe1e 	bl	8000534 <__aeabi_i2d>
 80028f8:	4604      	mov	r4, r0
 80028fa:	460d      	mov	r5, r1
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	3b09      	subs	r3, #9
 8002900:	4a41      	ldr	r2, [pc, #260]	@ (8002a08 <Update_StatusBt+0x6dc>)
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe13 	bl	8000534 <__aeabi_i2d>
 800290e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002912:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <Update_StatusBt+0x6e0>)
 8002914:	f7fd fe78 	bl	8000608 <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4620      	mov	r0, r4
 800291e:	4629      	mov	r1, r5
 8002920:	f7fd fcbc 	bl	800029c <__adddf3>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe f944 	bl	8000bb8 <__aeabi_d2uiz>
 8002930:	4603      	mov	r3, r0
 8002932:	b298      	uxth	r0, r3
 8002934:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <Update_StatusBt+0x6e4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	33e1      	adds	r3, #225	@ 0xe1
 800293a:	b299      	uxth	r1, r3
 800293c:	4b32      	ldr	r3, [pc, #200]	@ (8002a08 <Update_StatusBt+0x6dc>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <Update_StatusBt+0x6e8>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	461c      	mov	r4, r3
 8002948:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2305      	movs	r3, #5
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4623      	mov	r3, r4
 8002954:	f7ff f979 	bl	8001c4a <LCD_Rect_Round_Fill>
					sprintf(Buffer, "N%d: BAT", idx_st_relay + 1);
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	3301      	adds	r3, #1
 800295c:	461a      	mov	r2, r3
 800295e:	4930      	ldr	r1, [pc, #192]	@ (8002a20 <Update_StatusBt+0x6f4>)
 8002960:	482e      	ldr	r0, [pc, #184]	@ (8002a1c <Update_StatusBt+0x6f0>)
 8002962:	f008 f821 	bl	800a9a8 <siprintf>
				}
				LCD_Font(Start_x + ((idx_st_relay - 9) * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 3 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <Update_StatusBt+0x6d8>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fde2 	bl	8000534 <__aeabi_i2d>
 8002970:	4604      	mov	r4, r0
 8002972:	460d      	mov	r5, r1
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3b09      	subs	r3, #9
 8002978:	4a23      	ldr	r2, [pc, #140]	@ (8002a08 <Update_StatusBt+0x6dc>)
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	fb02 f303 	mul.w	r3, r2, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fdd7 	bl	8000534 <__aeabi_i2d>
 8002986:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800298a:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <Update_StatusBt+0x6e0>)
 800298c:	f7fd fe3c 	bl	8000608 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fd fc80 	bl	800029c <__adddf3>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <Update_StatusBt+0x6f8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdc3 	bl	8000534 <__aeabi_i2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fc71 	bl	800029c <__adddf3>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f7fe f8f9 	bl	8000bb8 <__aeabi_d2uiz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	b298      	uxth	r0, r3
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <Update_StatusBt+0x6e4>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <Update_StatusBt+0x6fc>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	33e1      	adds	r3, #225	@ 0xe1
 80029da:	b299      	uxth	r1, r3
 80029dc:	2300      	movs	r3, #0
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	2301      	movs	r3, #1
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <Update_StatusBt+0x700>)
 80029e6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a1c <Update_StatusBt+0x6f0>)
 80029e8:	f7fe ff6a 	bl	80018c0 <LCD_Font>
	for(idx_st_relay = 0; idx_st_relay < 10; idx_st_relay++)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	3301      	adds	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b09      	cmp	r3, #9
 80029f6:	f67f aca1 	bls.w	800233c <Update_StatusBt+0x10>
			}
		}
	}
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000002 	.word	0x20000002
 8002a0c:	3ff33333 	.word	0x3ff33333
 8002a10:	20000001 	.word	0x20000001
 8002a14:	20000003 	.word	0x20000003
 8002a18:	0800cc5c 	.word	0x0800cc5c
 8002a1c:	20000458 	.word	0x20000458
 8002a20:	0800cc68 	.word	0x0800cc68
 8002a24:	2000000a 	.word	0x2000000a
 8002a28:	2000000b 	.word	0x2000000b
 8002a2c:	0800d80c 	.word	0x0800d80c

08002a30 <Screen2_Ctrl>:
/***************************************************************************************
 	 ************* The function is used to display the window control 2 **************
*****************************************************************************************/
void Screen2_Ctrl(void)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af02      	add	r7, sp, #8
	setAddrWindow(0, 0, 320, 480);
 8002a36:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002a3a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe fb37 	bl	80010b4 <setAddrWindow>
	ILI9341_Fill_Screen(WHITE);
 8002a46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a4a:	f7fe fe63 	bl	8001714 <ILI9341_Fill_Screen>
	/* -------------------- Button 'BAT HET' -------------*/
	LCD_Rect_Round_Fill(Start_x + 20, Start_y, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_OLIVE);
 8002a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3314      	adds	r3, #20
 8002a54:	b298      	uxth	r0, r3
 8002a56:	4b7d      	ldr	r3, [pc, #500]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	3332      	adds	r3, #50	@ 0x32
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b7b      	ldr	r3, [pc, #492]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	331e      	adds	r3, #30
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f647 31e0 	movw	r1, #31712	@ 0x7be0
 8002a70:	9101      	str	r1, [sp, #4]
 8002a72:	2105      	movs	r1, #5
 8002a74:	9100      	str	r1, [sp, #0]
 8002a76:	4621      	mov	r1, r4
 8002a78:	f7ff f8e7 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(75, 72, "BAT HET", _Open_Sans_Bold_26, 1, BLACK);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2301      	movs	r3, #1
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4b74      	ldr	r3, [pc, #464]	@ (8002c58 <Screen2_Ctrl+0x228>)
 8002a86:	4a75      	ldr	r2, [pc, #468]	@ (8002c5c <Screen2_Ctrl+0x22c>)
 8002a88:	2148      	movs	r1, #72	@ 0x48
 8002a8a:	204b      	movs	r0, #75	@ 0x4b
 8002a8c:	f7fe ff18 	bl	80018c0 <LCD_Font>

	/* -------------------- Button 'BAT HET' -------------*/
	LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_OLIVE);
 8002a90:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b6e      	ldr	r3, [pc, #440]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	336e      	adds	r3, #110	@ 0x6e
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	4b69      	ldr	r3, [pc, #420]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3332      	adds	r3, #50	@ 0x32
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b68      	ldr	r3, [pc, #416]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	331e      	adds	r3, #30
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	f647 31e0 	movw	r1, #31712	@ 0x7be0
 8002abc:	9101      	str	r1, [sp, #4]
 8002abe:	2105      	movs	r1, #5
 8002ac0:	9100      	str	r1, [sp, #0]
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	f7ff f8c1 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + Wigth_Bt + 145, 72, "TAT HET", _Open_Sans_Bold_26, 1, BLACK);
 8002ac8:	4b5f      	ldr	r3, [pc, #380]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3391      	adds	r3, #145	@ 0x91
 8002ad8:	b298      	uxth	r0, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2301      	movs	r3, #1
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c58 <Screen2_Ctrl+0x228>)
 8002ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8002c60 <Screen2_Ctrl+0x230>)
 8002ae6:	2148      	movs	r1, #72	@ 0x48
 8002ae8:	f7fe feea 	bl	80018c0 <LCD_Font>

	/* -------------------- Button 'QUAY LAI' -------------*/
	LCD_Rect_Round_Fill(Start_x + 20, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, GREEN);
 8002aec:	4b56      	ldr	r3, [pc, #344]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	3314      	adds	r3, #20
 8002af2:	b298      	uxth	r0, r3
 8002af4:	4b55      	ldr	r3, [pc, #340]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b56      	ldr	r3, [pc, #344]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3332      	adds	r3, #50	@ 0x32
 8002b04:	b299      	uxth	r1, r3
 8002b06:	4b52      	ldr	r3, [pc, #328]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	3332      	adds	r3, #50	@ 0x32
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b51      	ldr	r3, [pc, #324]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	331e      	adds	r3, #30
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 8002b1a:	9401      	str	r4, [sp, #4]
 8002b1c:	2405      	movs	r4, #5
 8002b1e:	9400      	str	r4, [sp, #0]
 8002b20:	f7ff f893 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(90, Start_y * 2 + 1.2 * High_Bt * 2, "<<===", _Open_Sans_Bold_26, 1, BLACK);
 8002b24:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd02 	bl	8000534 <__aeabi_i2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fcfb 	bl	8000534 <__aeabi_i2d>
 8002b3e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002b42:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <Screen2_Ctrl+0x234>)
 8002b44:	f7fd fd60 	bl	8000608 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	f7fd fba2 	bl	800029c <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f7fd fb9c 	bl	800029c <__adddf3>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f7fe f824 	bl	8000bb8 <__aeabi_d2uiz>
 8002b70:	4603      	mov	r3, r0
 8002b72:	b299      	uxth	r1, r3
 8002b74:	2300      	movs	r3, #0
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2301      	movs	r3, #1
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <Screen2_Ctrl+0x228>)
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c68 <Screen2_Ctrl+0x238>)
 8002b80:	205a      	movs	r0, #90	@ 0x5a
 8002b82:	f7fe fe9d 	bl	80018c0 <LCD_Font>

	if (0 == Buzzer)
 8002b86:	4b39      	ldr	r3, [pc, #228]	@ (8002c6c <Screen2_Ctrl+0x23c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d172      	bne.n	8002c74 <Screen2_Ctrl+0x244>
	{
		LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b2e      	ldr	r3, [pc, #184]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	336e      	adds	r3, #110	@ 0x6e
 8002b9e:	b298      	uxth	r0, r3
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3332      	adds	r3, #50	@ 0x32
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3332      	adds	r3, #50	@ 0x32
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	331e      	adds	r3, #30
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 8002bc6:	9401      	str	r4, [sp, #4]
 8002bc8:	2405      	movs	r4, #5
 8002bca:	9400      	str	r4, [sp, #0]
 8002bcc:	f7ff f83d 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <Screen2_Ctrl+0x218>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <Screen2_Ctrl+0x220>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	338c      	adds	r3, #140	@ 0x8c
 8002be0:	b29e      	uxth	r6, r3
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <Screen2_Ctrl+0x21c>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fca3 	bl	8000534 <__aeabi_i2d>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	4b18      	ldr	r3, [pc, #96]	@ (8002c54 <Screen2_Ctrl+0x224>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fc9c 	bl	8000534 <__aeabi_i2d>
 8002bfc:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002c00:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <Screen2_Ctrl+0x234>)
 8002c02:	f7fd fd01 	bl	8000608 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	f7fd fb43 	bl	800029c <__adddf3>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb3d 	bl	800029c <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ffc5 	bl	8000bb8 <__aeabi_d2uiz>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b299      	uxth	r1, r3
 8002c32:	2300      	movs	r3, #0
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2301      	movs	r3, #1
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <Screen2_Ctrl+0x228>)
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c70 <Screen2_Ctrl+0x240>)
 8002c3e:	4630      	mov	r0, r6
 8002c40:	f7fe fe3e 	bl	80018c0 <LCD_Font>
 8002c44:	e071      	b.n	8002d2a <Screen2_Ctrl+0x2fa>
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000001 	.word	0x20000001
 8002c50:	20000002 	.word	0x20000002
 8002c54:	20000003 	.word	0x20000003
 8002c58:	0800f1ec 	.word	0x0800f1ec
 8002c5c:	0800cc74 	.word	0x0800cc74
 8002c60:	0800cc7c 	.word	0x0800cc7c
 8002c64:	3ff33333 	.word	0x3ff33333
 8002c68:	0800cc84 	.word	0x0800cc84
 8002c6c:	2000048e 	.word	0x2000048e
 8002c70:	0800cc8c 	.word	0x0800cc8c
	}
	else
	{
		LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8002c74:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <Screen2_Ctrl+0x330>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d64 <Screen2_Ctrl+0x334>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	336e      	adds	r3, #110	@ 0x6e
 8002c84:	b298      	uxth	r0, r3
 8002c86:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <Screen2_Ctrl+0x338>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b37      	ldr	r3, [pc, #220]	@ (8002d6c <Screen2_Ctrl+0x33c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4413      	add	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3332      	adds	r3, #50	@ 0x32
 8002c96:	b299      	uxth	r1, r3
 8002c98:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <Screen2_Ctrl+0x334>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	3332      	adds	r3, #50	@ 0x32
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <Screen2_Ctrl+0x33c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	331e      	adds	r3, #30
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8002cac:	9401      	str	r4, [sp, #4]
 8002cae:	2405      	movs	r4, #5
 8002cb0:	9400      	str	r4, [sp, #0]
 8002cb2:	f7fe ffca 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d60 <Screen2_Ctrl+0x330>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b29      	ldr	r3, [pc, #164]	@ (8002d64 <Screen2_Ctrl+0x334>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	338c      	adds	r3, #140	@ 0x8c
 8002cc6:	b29e      	uxth	r6, r3
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <Screen2_Ctrl+0x338>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc30 	bl	8000534 <__aeabi_i2d>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460d      	mov	r5, r1
 8002cd8:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <Screen2_Ctrl+0x33c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fc29 	bl	8000534 <__aeabi_i2d>
 8002ce2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <Screen2_Ctrl+0x340>)
 8002ce8:	f7fd fc8e 	bl	8000608 <__aeabi_dmul>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	f7fd fad0 	bl	800029c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd faca 	bl	800029c <__adddf3>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff52 	bl	8000bb8 <__aeabi_d2uiz>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b299      	uxth	r1, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <Screen2_Ctrl+0x344>)
 8002d22:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <Screen2_Ctrl+0x348>)
 8002d24:	4630      	mov	r0, r6
 8002d26:	f7fe fdcb 	bl	80018c0 <LCD_Font>
	}
	/*---- Create Setting Button ----*/
	LCD_Rect_Round_Fill(100, 245, 270, 60, 5, GREEN);
 8002d2a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	2305      	movs	r3, #5
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	233c      	movs	r3, #60	@ 0x3c
 8002d36:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8002d3a:	21f5      	movs	r1, #245	@ 0xf5
 8002d3c:	2064      	movs	r0, #100	@ 0x64
 8002d3e:	f7fe ff84 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(185, 285, "TRO VE", _Open_Sans_Bold_26, 1, BLACK);
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <Screen2_Ctrl+0x344>)
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d7c <Screen2_Ctrl+0x34c>)
 8002d4e:	f240 111d 	movw	r1, #285	@ 0x11d
 8002d52:	20b9      	movs	r0, #185	@ 0xb9
 8002d54:	f7fe fdb4 	bl	80018c0 <LCD_Font>
}
 8002d58:	bf00      	nop
 8002d5a:	3704      	adds	r7, #4
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000002 	.word	0x20000002
 8002d68:	20000001 	.word	0x20000001
 8002d6c:	20000003 	.word	0x20000003
 8002d70:	3ff33333 	.word	0x3ff33333
 8002d74:	0800f1ec 	.word	0x0800f1ec
 8002d78:	0800cc98 	.word	0x0800cc98
 8002d7c:	0800cca4 	.word	0x0800cca4

08002d80 <Screen1_Ctrl>:
/***************************************************************************************
 	 ************* The function is used to display the window control 1 **************
*****************************************************************************************/
void Screen1_Ctrl(void) {
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af02      	add	r7, sp, #8
	setAddrWindow(0, 0, 320, 480);
 8002d86:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002d8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fe f98f 	bl	80010b4 <setAddrWindow>
	ILI9341_Fill_Screen(WHITE);
 8002d96:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d9a:	f7fe fcbb 	bl	8001714 <ILI9341_Fill_Screen>
	uint8_t i;
	for (i = 0; i < 3; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	71fb      	strb	r3, [r7, #7]
 8002da2:	e331      	b.n	8003408 <Screen1_Ctrl+0x688>
	{
		/* ---- Check-update status ReL1-3 ---- */
		if (0 == RelayStatus_arr_STM[i])
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	4abf      	ldr	r2, [pc, #764]	@ (80030a4 <Screen1_Ctrl+0x324>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d17a      	bne.n	8002ea4 <Screen1_Ctrl+0x124>
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002dae:	4bbe      	ldr	r3, [pc, #760]	@ (80030a8 <Screen1_Ctrl+0x328>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbbe 	bl	8000534 <__aeabi_i2d>
 8002db8:	4604      	mov	r4, r0
 8002dba:	460d      	mov	r5, r1
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4abb      	ldr	r2, [pc, #748]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbb4 	bl	8000534 <__aeabi_i2d>
 8002dcc:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002dd0:	4bb7      	ldr	r3, [pc, #732]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8002dd2:	f7fd fc19 	bl	8000608 <__aeabi_dmul>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4620      	mov	r0, r4
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fa5d 	bl	800029c <__adddf3>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd fee5 	bl	8000bb8 <__aeabi_d2uiz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b298      	uxth	r0, r3
 8002df2:	4bb0      	ldr	r3, [pc, #704]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	4bac      	ldr	r3, [pc, #688]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4bae      	ldr	r3, [pc, #696]	@ (80030b8 <Screen1_Ctrl+0x338>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461c      	mov	r4, r3
 8002e04:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4623      	mov	r3, r4
 8002e10:	f7fe ff1b 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 1);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	3301      	adds	r3, #1
 8002e18:	461a      	mov	r2, r3
 8002e1a:	49a8      	ldr	r1, [pc, #672]	@ (80030bc <Screen1_Ctrl+0x33c>)
 8002e1c:	48a8      	ldr	r0, [pc, #672]	@ (80030c0 <Screen1_Ctrl+0x340>)
 8002e1e:	f007 fdc3 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002e22:	4ba1      	ldr	r3, [pc, #644]	@ (80030a8 <Screen1_Ctrl+0x328>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb84 	bl	8000534 <__aeabi_i2d>
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a9e      	ldr	r2, [pc, #632]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb7a 	bl	8000534 <__aeabi_i2d>
 8002e40:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002e44:	4b9a      	ldr	r3, [pc, #616]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8002e46:	f7fd fbdf 	bl	8000608 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4629      	mov	r1, r5
 8002e52:	f7fd fa23 	bl	800029c <__adddf3>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	461d      	mov	r5, r3
 8002e5e:	4b99      	ldr	r3, [pc, #612]	@ (80030c4 <Screen1_Ctrl+0x344>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb66 	bl	8000534 <__aeabi_i2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd fa14 	bl	800029c <__adddf3>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f7fd fe9c 	bl	8000bb8 <__aeabi_d2uiz>
 8002e80:	4603      	mov	r3, r0
 8002e82:	b298      	uxth	r0, r3
 8002e84:	4b8b      	ldr	r3, [pc, #556]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80030c8 <Screen1_Ctrl+0x348>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b299      	uxth	r1, r3
 8002e92:	2300      	movs	r3, #0
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	2301      	movs	r3, #1
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80030cc <Screen1_Ctrl+0x34c>)
 8002e9c:	4a88      	ldr	r2, [pc, #544]	@ (80030c0 <Screen1_Ctrl+0x340>)
 8002e9e:	f7fe fd0f 	bl	80018c0 <LCD_Font>
 8002ea2:	e079      	b.n	8002f98 <Screen1_Ctrl+0x218>
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8002ea4:	4b80      	ldr	r3, [pc, #512]	@ (80030a8 <Screen1_Ctrl+0x328>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb43 	bl	8000534 <__aeabi_i2d>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4a7d      	ldr	r2, [pc, #500]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fb39 	bl	8000534 <__aeabi_i2d>
 8002ec2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8002ec8:	f7fd fb9e 	bl	8000608 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	4629      	mov	r1, r5
 8002ed4:	f7fd f9e2 	bl	800029c <__adddf3>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd fe6a 	bl	8000bb8 <__aeabi_d2uiz>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b298      	uxth	r0, r3
 8002ee8:	4b72      	ldr	r3, [pc, #456]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b70      	ldr	r3, [pc, #448]	@ (80030b8 <Screen1_Ctrl+0x338>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	461c      	mov	r4, r3
 8002efa:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2305      	movs	r3, #5
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4623      	mov	r3, r4
 8002f06:	f7fe fea0 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 1);
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	461a      	mov	r2, r3
 8002f10:	496f      	ldr	r1, [pc, #444]	@ (80030d0 <Screen1_Ctrl+0x350>)
 8002f12:	486b      	ldr	r0, [pc, #428]	@ (80030c0 <Screen1_Ctrl+0x340>)
 8002f14:	f007 fd48 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8002f18:	4b63      	ldr	r3, [pc, #396]	@ (80030a8 <Screen1_Ctrl+0x328>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb09 	bl	8000534 <__aeabi_i2d>
 8002f22:	4604      	mov	r4, r0
 8002f24:	460d      	mov	r5, r1
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd faff 	bl	8000534 <__aeabi_i2d>
 8002f36:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8002f3c:	f7fd fb64 	bl	8000608 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f9a8 	bl	800029c <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4614      	mov	r4, r2
 8002f52:	461d      	mov	r5, r3
 8002f54:	4b5b      	ldr	r3, [pc, #364]	@ (80030c4 <Screen1_Ctrl+0x344>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd faeb 	bl	8000534 <__aeabi_i2d>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4620      	mov	r0, r4
 8002f64:	4629      	mov	r1, r5
 8002f66:	f7fd f999 	bl	800029c <__adddf3>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fe21 	bl	8000bb8 <__aeabi_d2uiz>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b51      	ldr	r3, [pc, #324]	@ (80030c8 <Screen1_Ctrl+0x348>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	b299      	uxth	r1, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4b4e      	ldr	r3, [pc, #312]	@ (80030cc <Screen1_Ctrl+0x34c>)
 8002f92:	4a4b      	ldr	r2, [pc, #300]	@ (80030c0 <Screen1_Ctrl+0x340>)
 8002f94:	f7fe fc94 	bl	80018c0 <LCD_Font>
		}
		/* ---- Check-update status ReL4-6 ---- */
		if (0 == RelayStatus_arr_STM[i + 3]) {
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	3303      	adds	r3, #3
 8002f9c:	4a41      	ldr	r2, [pc, #260]	@ (80030a4 <Screen1_Ctrl+0x324>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 8097 	bne.w	80030d4 <Screen1_Ctrl+0x354>
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8002fa6:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <Screen1_Ctrl+0x328>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fac2 	bl	8000534 <__aeabi_i2d>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fab8 	bl	8000534 <__aeabi_i2d>
 8002fc4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002fc8:	4b39      	ldr	r3, [pc, #228]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8002fca:	f7fd fb1d 	bl	8000608 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f7fd f961 	bl	800029c <__adddf3>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fd fde9 	bl	8000bb8 <__aeabi_d2uiz>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	b298      	uxth	r0, r3
 8002fea:	4b32      	ldr	r3, [pc, #200]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	334b      	adds	r3, #75	@ 0x4b
 8002ff0:	b299      	uxth	r1, r3
 8002ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80030ac <Screen1_Ctrl+0x32c>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	@ (80030b8 <Screen1_Ctrl+0x338>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	461c      	mov	r4, r3
 8002ffe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2305      	movs	r3, #5
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4623      	mov	r3, r4
 800300a:	f7fe fe1e 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 3 + 1);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	3304      	adds	r3, #4
 8003012:	461a      	mov	r2, r3
 8003014:	4929      	ldr	r1, [pc, #164]	@ (80030bc <Screen1_Ctrl+0x33c>)
 8003016:	482a      	ldr	r0, [pc, #168]	@ (80030c0 <Screen1_Ctrl+0x340>)
 8003018:	f007 fcc6 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 800301c:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <Screen1_Ctrl+0x328>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa87 	bl	8000534 <__aeabi_i2d>
 8003026:	4604      	mov	r4, r0
 8003028:	460d      	mov	r5, r1
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <Screen1_Ctrl+0x32c>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa7d 	bl	8000534 <__aeabi_i2d>
 800303a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800303e:	4b1c      	ldr	r3, [pc, #112]	@ (80030b0 <Screen1_Ctrl+0x330>)
 8003040:	f7fd fae2 	bl	8000608 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4620      	mov	r0, r4
 800304a:	4629      	mov	r1, r5
 800304c:	f7fd f926 	bl	800029c <__adddf3>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <Screen1_Ctrl+0x344>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa69 	bl	8000534 <__aeabi_i2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f917 	bl	800029c <__adddf3>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fd9f 	bl	8000bb8 <__aeabi_d2uiz>
 800307a:	4603      	mov	r3, r0
 800307c:	b298      	uxth	r0, r3
 800307e:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <Screen1_Ctrl+0x334>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <Screen1_Ctrl+0x348>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4413      	add	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	334b      	adds	r3, #75	@ 0x4b
 800308e:	b299      	uxth	r1, r3
 8003090:	2300      	movs	r3, #0
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2301      	movs	r3, #1
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <Screen1_Ctrl+0x34c>)
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <Screen1_Ctrl+0x340>)
 800309c:	f7fe fc10 	bl	80018c0 <LCD_Font>
 80030a0:	e095      	b.n	80031ce <Screen1_Ctrl+0x44e>
 80030a2:	bf00      	nop
 80030a4:	20000580 	.word	0x20000580
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000002 	.word	0x20000002
 80030b0:	3ff33333 	.word	0x3ff33333
 80030b4:	20000001 	.word	0x20000001
 80030b8:	20000003 	.word	0x20000003
 80030bc:	0800cc5c 	.word	0x0800cc5c
 80030c0:	20000458 	.word	0x20000458
 80030c4:	2000000a 	.word	0x2000000a
 80030c8:	2000000b 	.word	0x2000000b
 80030cc:	0800d80c 	.word	0x0800d80c
 80030d0:	0800cc68 	.word	0x0800cc68
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80030d4:	4b80      	ldr	r3, [pc, #512]	@ (80032d8 <Screen1_Ctrl+0x558>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fa2b 	bl	8000534 <__aeabi_i2d>
 80030de:	4604      	mov	r4, r0
 80030e0:	460d      	mov	r5, r1
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	4a7d      	ldr	r2, [pc, #500]	@ (80032dc <Screen1_Ctrl+0x55c>)
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa21 	bl	8000534 <__aeabi_i2d>
 80030f2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80030f6:	4b7a      	ldr	r3, [pc, #488]	@ (80032e0 <Screen1_Ctrl+0x560>)
 80030f8:	f7fd fa86 	bl	8000608 <__aeabi_dmul>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4620      	mov	r0, r4
 8003102:	4629      	mov	r1, r5
 8003104:	f7fd f8ca 	bl	800029c <__adddf3>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fd52 	bl	8000bb8 <__aeabi_d2uiz>
 8003114:	4603      	mov	r3, r0
 8003116:	b298      	uxth	r0, r3
 8003118:	4b72      	ldr	r3, [pc, #456]	@ (80032e4 <Screen1_Ctrl+0x564>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	334b      	adds	r3, #75	@ 0x4b
 800311e:	b299      	uxth	r1, r3
 8003120:	4b6e      	ldr	r3, [pc, #440]	@ (80032dc <Screen1_Ctrl+0x55c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b70      	ldr	r3, [pc, #448]	@ (80032e8 <Screen1_Ctrl+0x568>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461c      	mov	r4, r3
 800312c:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2305      	movs	r3, #5
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4623      	mov	r3, r4
 8003138:	f7fe fd87 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 3 + 1);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	3304      	adds	r3, #4
 8003140:	461a      	mov	r2, r3
 8003142:	496a      	ldr	r1, [pc, #424]	@ (80032ec <Screen1_Ctrl+0x56c>)
 8003144:	486a      	ldr	r0, [pc, #424]	@ (80032f0 <Screen1_Ctrl+0x570>)
 8003146:	f007 fc2f 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 800314a:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <Screen1_Ctrl+0x558>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd f9f0 	bl	8000534 <__aeabi_i2d>
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4a60      	ldr	r2, [pc, #384]	@ (80032dc <Screen1_Ctrl+0x55c>)
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f9e6 	bl	8000534 <__aeabi_i2d>
 8003168:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800316c:	4b5c      	ldr	r3, [pc, #368]	@ (80032e0 <Screen1_Ctrl+0x560>)
 800316e:	f7fd fa4b 	bl	8000608 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4620      	mov	r0, r4
 8003178:	4629      	mov	r1, r5
 800317a:	f7fd f88f 	bl	800029c <__adddf3>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4614      	mov	r4, r2
 8003184:	461d      	mov	r5, r3
 8003186:	4b5b      	ldr	r3, [pc, #364]	@ (80032f4 <Screen1_Ctrl+0x574>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd f9d2 	bl	8000534 <__aeabi_i2d>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4620      	mov	r0, r4
 8003196:	4629      	mov	r1, r5
 8003198:	f7fd f880 	bl	800029c <__adddf3>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7fd fd08 	bl	8000bb8 <__aeabi_d2uiz>
 80031a8:	4603      	mov	r3, r0
 80031aa:	b298      	uxth	r0, r3
 80031ac:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <Screen1_Ctrl+0x564>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b51      	ldr	r3, [pc, #324]	@ (80032f8 <Screen1_Ctrl+0x578>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	334b      	adds	r3, #75	@ 0x4b
 80031bc:	b299      	uxth	r1, r3
 80031be:	2300      	movs	r3, #0
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2301      	movs	r3, #1
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4b4d      	ldr	r3, [pc, #308]	@ (80032fc <Screen1_Ctrl+0x57c>)
 80031c8:	4a49      	ldr	r2, [pc, #292]	@ (80032f0 <Screen1_Ctrl+0x570>)
 80031ca:	f7fe fb79 	bl	80018c0 <LCD_Font>
		}
		/* ---- Check-update status ReL7-9 ---- */
		if (0 == RelayStatus_arr_STM[i + 6])
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	3306      	adds	r3, #6
 80031d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <Screen1_Ctrl+0x580>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 8096 	bne.w	8003308 <Screen1_Ctrl+0x588>
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 80031dc:	4b3e      	ldr	r3, [pc, #248]	@ (80032d8 <Screen1_Ctrl+0x558>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9a7 	bl	8000534 <__aeabi_i2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	4a3b      	ldr	r2, [pc, #236]	@ (80032dc <Screen1_Ctrl+0x55c>)
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f99d 	bl	8000534 <__aeabi_i2d>
 80031fa:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80031fe:	4b38      	ldr	r3, [pc, #224]	@ (80032e0 <Screen1_Ctrl+0x560>)
 8003200:	f7fd fa02 	bl	8000608 <__aeabi_dmul>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4620      	mov	r0, r4
 800320a:	4629      	mov	r1, r5
 800320c:	f7fd f846 	bl	800029c <__adddf3>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f7fd fcce 	bl	8000bb8 <__aeabi_d2uiz>
 800321c:	4603      	mov	r3, r0
 800321e:	b298      	uxth	r0, r3
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <Screen1_Ctrl+0x564>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	3396      	adds	r3, #150	@ 0x96
 8003226:	b299      	uxth	r1, r3
 8003228:	4b2c      	ldr	r3, [pc, #176]	@ (80032dc <Screen1_Ctrl+0x55c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <Screen1_Ctrl+0x568>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	461c      	mov	r4, r3
 8003234:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	2305      	movs	r3, #5
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4623      	mov	r3, r4
 8003240:	f7fe fd03 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: TAT", i + 6 + 1);
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	3307      	adds	r3, #7
 8003248:	461a      	mov	r2, r3
 800324a:	492e      	ldr	r1, [pc, #184]	@ (8003304 <Screen1_Ctrl+0x584>)
 800324c:	4828      	ldr	r0, [pc, #160]	@ (80032f0 <Screen1_Ctrl+0x570>)
 800324e:	f007 fbab 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 8003252:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <Screen1_Ctrl+0x558>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd f96c 	bl	8000534 <__aeabi_i2d>
 800325c:	4604      	mov	r4, r0
 800325e:	460d      	mov	r5, r1
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	4a1e      	ldr	r2, [pc, #120]	@ (80032dc <Screen1_Ctrl+0x55c>)
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f962 	bl	8000534 <__aeabi_i2d>
 8003270:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <Screen1_Ctrl+0x560>)
 8003276:	f7fd f9c7 	bl	8000608 <__aeabi_dmul>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f7fd f80b 	bl	800029c <__adddf3>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4614      	mov	r4, r2
 800328c:	461d      	mov	r5, r3
 800328e:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <Screen1_Ctrl+0x574>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f94e 	bl	8000534 <__aeabi_i2d>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fc fffc 	bl	800029c <__adddf3>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7fd fc84 	bl	8000bb8 <__aeabi_d2uiz>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b298      	uxth	r0, r3
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <Screen1_Ctrl+0x564>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <Screen1_Ctrl+0x578>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3396      	adds	r3, #150	@ 0x96
 80032c4:	b299      	uxth	r1, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2301      	movs	r3, #1
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <Screen1_Ctrl+0x57c>)
 80032d0:	4a07      	ldr	r2, [pc, #28]	@ (80032f0 <Screen1_Ctrl+0x570>)
 80032d2:	f7fe faf5 	bl	80018c0 <LCD_Font>
 80032d6:	e094      	b.n	8003402 <Screen1_Ctrl+0x682>
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000002 	.word	0x20000002
 80032e0:	3ff33333 	.word	0x3ff33333
 80032e4:	20000001 	.word	0x20000001
 80032e8:	20000003 	.word	0x20000003
 80032ec:	0800cc68 	.word	0x0800cc68
 80032f0:	20000458 	.word	0x20000458
 80032f4:	2000000a 	.word	0x2000000a
 80032f8:	2000000b 	.word	0x2000000b
 80032fc:	0800d80c 	.word	0x0800d80c
 8003300:	20000580 	.word	0x20000580
 8003304:	0800cc5c 	.word	0x0800cc5c
		}
		else
		{
			LCD_Rect_Round_Fill(Start_x + (i * Wigth_Bt * 1.2), Start_y + 75 * 2, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 8003308:	4b5a      	ldr	r3, [pc, #360]	@ (8003474 <Screen1_Ctrl+0x6f4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f911 	bl	8000534 <__aeabi_i2d>
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	4a57      	ldr	r2, [pc, #348]	@ (8003478 <Screen1_Ctrl+0x6f8>)
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd f907 	bl	8000534 <__aeabi_i2d>
 8003326:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800332a:	4b54      	ldr	r3, [pc, #336]	@ (800347c <Screen1_Ctrl+0x6fc>)
 800332c:	f7fd f96c 	bl	8000608 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fc ffb0 	bl	800029c <__adddf3>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f7fd fc38 	bl	8000bb8 <__aeabi_d2uiz>
 8003348:	4603      	mov	r3, r0
 800334a:	b298      	uxth	r0, r3
 800334c:	4b4c      	ldr	r3, [pc, #304]	@ (8003480 <Screen1_Ctrl+0x700>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	3396      	adds	r3, #150	@ 0x96
 8003352:	b299      	uxth	r1, r3
 8003354:	4b48      	ldr	r3, [pc, #288]	@ (8003478 <Screen1_Ctrl+0x6f8>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <Screen1_Ctrl+0x704>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	461c      	mov	r4, r3
 8003360:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	2305      	movs	r3, #5
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4623      	mov	r3, r4
 800336c:	f7fe fc6d 	bl	8001c4a <LCD_Rect_Round_Fill>
			sprintf(Buffer, "N%d: BAT", i + 6 + 1);
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	3307      	adds	r3, #7
 8003374:	461a      	mov	r2, r3
 8003376:	4944      	ldr	r1, [pc, #272]	@ (8003488 <Screen1_Ctrl+0x708>)
 8003378:	4844      	ldr	r0, [pc, #272]	@ (800348c <Screen1_Ctrl+0x70c>)
 800337a:	f007 fb15 	bl	800a9a8 <siprintf>
			LCD_Font(Start_x + (i * Wigth_Bt * 1.2) + PoStart_x, Start_y + 75 * 2 + PoStart_y, Buffer, _Open_Sans_Bold_22, 1, BLACK);
 800337e:	4b3d      	ldr	r3, [pc, #244]	@ (8003474 <Screen1_Ctrl+0x6f4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8d6 	bl	8000534 <__aeabi_i2d>
 8003388:	4604      	mov	r4, r0
 800338a:	460d      	mov	r5, r1
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	4a3a      	ldr	r2, [pc, #232]	@ (8003478 <Screen1_Ctrl+0x6f8>)
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8cc 	bl	8000534 <__aeabi_i2d>
 800339c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80033a0:	4b36      	ldr	r3, [pc, #216]	@ (800347c <Screen1_Ctrl+0x6fc>)
 80033a2:	f7fd f931 	bl	8000608 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f7fc ff75 	bl	800029c <__adddf3>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4614      	mov	r4, r2
 80033b8:	461d      	mov	r5, r3
 80033ba:	4b35      	ldr	r3, [pc, #212]	@ (8003490 <Screen1_Ctrl+0x710>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8b8 	bl	8000534 <__aeabi_i2d>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	f7fc ff66 	bl	800029c <__adddf3>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fbee 	bl	8000bb8 <__aeabi_d2uiz>
 80033dc:	4603      	mov	r3, r0
 80033de:	b298      	uxth	r0, r3
 80033e0:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <Screen1_Ctrl+0x700>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <Screen1_Ctrl+0x714>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4413      	add	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3396      	adds	r3, #150	@ 0x96
 80033f0:	b299      	uxth	r1, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2301      	movs	r3, #1
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <Screen1_Ctrl+0x718>)
 80033fc:	4a23      	ldr	r2, [pc, #140]	@ (800348c <Screen1_Ctrl+0x70c>)
 80033fe:	f7fe fa5f 	bl	80018c0 <LCD_Font>
	for (i = 0; i < 3; i++)
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	3301      	adds	r3, #1
 8003406:	71fb      	strb	r3, [r7, #7]
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	2b02      	cmp	r3, #2
 800340c:	f67f acca 	bls.w	8002da4 <Screen1_Ctrl+0x24>
		}
	}
	/* ---- Check-update status ReL10 ---- */
	if (0 == RelayStatus_arr_STM[9])
 8003410:	4b22      	ldr	r3, [pc, #136]	@ (800349c <Screen1_Ctrl+0x71c>)
 8003412:	7a5b      	ldrb	r3, [r3, #9]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d145      	bne.n	80034a4 <Screen1_Ctrl+0x724>
	{
		LCD_Rect_Round_Fill(Start_x, Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_RED);
 8003418:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <Screen1_Ctrl+0x6f4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <Screen1_Ctrl+0x700>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	33e1      	adds	r3, #225	@ 0xe1
 8003424:	b299      	uxth	r1, r3
 8003426:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <Screen1_Ctrl+0x6f8>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	4b15      	ldr	r3, [pc, #84]	@ (8003484 <Screen1_Ctrl+0x704>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461c      	mov	r4, r3
 8003432:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2305      	movs	r3, #5
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4623      	mov	r3, r4
 800343e:	f7fe fc04 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + PoStart_x, Start_y + PoStart_y + 75 * 3, "N10: TAT", _Open_Sans_Bold_22, 1, BLACK);
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <Screen1_Ctrl+0x6f4>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <Screen1_Ctrl+0x710>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	4413      	add	r3, r2
 800344e:	b298      	uxth	r0, r3
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <Screen1_Ctrl+0x700>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <Screen1_Ctrl+0x714>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	4413      	add	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	33e1      	adds	r3, #225	@ 0xe1
 8003460:	b299      	uxth	r1, r3
 8003462:	2300      	movs	r3, #0
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	2301      	movs	r3, #1
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <Screen1_Ctrl+0x718>)
 800346c:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <Screen1_Ctrl+0x720>)
 800346e:	f7fe fa27 	bl	80018c0 <LCD_Font>
 8003472:	e044      	b.n	80034fe <Screen1_Ctrl+0x77e>
 8003474:	20000000 	.word	0x20000000
 8003478:	20000002 	.word	0x20000002
 800347c:	3ff33333 	.word	0x3ff33333
 8003480:	20000001 	.word	0x20000001
 8003484:	20000003 	.word	0x20000003
 8003488:	0800cc68 	.word	0x0800cc68
 800348c:	20000458 	.word	0x20000458
 8003490:	2000000a 	.word	0x2000000a
 8003494:	2000000b 	.word	0x2000000b
 8003498:	0800d80c 	.word	0x0800d80c
 800349c:	20000580 	.word	0x20000580
 80034a0:	0800ccac 	.word	0x0800ccac
	}
	else
	{
		LCD_Rect_Round_Fill(Start_x, Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, ILI9488_PINK);
 80034a4:	4b91      	ldr	r3, [pc, #580]	@ (80036ec <Screen1_Ctrl+0x96c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	4b91      	ldr	r3, [pc, #580]	@ (80036f0 <Screen1_Ctrl+0x970>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	33e1      	adds	r3, #225	@ 0xe1
 80034b0:	b299      	uxth	r1, r3
 80034b2:	4b90      	ldr	r3, [pc, #576]	@ (80036f4 <Screen1_Ctrl+0x974>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b8f      	ldr	r3, [pc, #572]	@ (80036f8 <Screen1_Ctrl+0x978>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	461c      	mov	r4, r3
 80034be:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2305      	movs	r3, #5
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	4623      	mov	r3, r4
 80034ca:	f7fe fbbe 	bl	8001c4a <LCD_Rect_Round_Fill>
		LCD_Font(Start_x + PoStart_x, Start_y + PoStart_y + 75 * 3, "N10: BAT", _Open_Sans_Bold_22, 1, BLACK);
 80034ce:	4b87      	ldr	r3, [pc, #540]	@ (80036ec <Screen1_Ctrl+0x96c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b89      	ldr	r3, [pc, #548]	@ (80036fc <Screen1_Ctrl+0x97c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	b298      	uxth	r0, r3
 80034dc:	4b84      	ldr	r3, [pc, #528]	@ (80036f0 <Screen1_Ctrl+0x970>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b87      	ldr	r3, [pc, #540]	@ (8003700 <Screen1_Ctrl+0x980>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	33e1      	adds	r3, #225	@ 0xe1
 80034ec:	b299      	uxth	r1, r3
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2301      	movs	r3, #1
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4b83      	ldr	r3, [pc, #524]	@ (8003704 <Screen1_Ctrl+0x984>)
 80034f8:	4a83      	ldr	r2, [pc, #524]	@ (8003708 <Screen1_Ctrl+0x988>)
 80034fa:	f7fe f9e1 	bl	80018c0 <LCD_Font>
	}
	/* ---- Next Button ----*/
	LCD_Rect_Round_Fill(Start_x + (Wigth_Bt * 1.2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, GREEN);
 80034fe:	4b7b      	ldr	r3, [pc, #492]	@ (80036ec <Screen1_Ctrl+0x96c>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f816 	bl	8000534 <__aeabi_i2d>
 8003508:	4604      	mov	r4, r0
 800350a:	460d      	mov	r5, r1
 800350c:	4b79      	ldr	r3, [pc, #484]	@ (80036f4 <Screen1_Ctrl+0x974>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fd f80f 	bl	8000534 <__aeabi_i2d>
 8003516:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800351a:	4b7c      	ldr	r3, [pc, #496]	@ (800370c <Screen1_Ctrl+0x98c>)
 800351c:	f7fd f874 	bl	8000608 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc feb8 	bl	800029c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb40 	bl	8000bb8 <__aeabi_d2uiz>
 8003538:	4603      	mov	r3, r0
 800353a:	b298      	uxth	r0, r3
 800353c:	4b6c      	ldr	r3, [pc, #432]	@ (80036f0 <Screen1_Ctrl+0x970>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	33e1      	adds	r3, #225	@ 0xe1
 8003542:	b299      	uxth	r1, r3
 8003544:	4b6b      	ldr	r3, [pc, #428]	@ (80036f4 <Screen1_Ctrl+0x974>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	4b6b      	ldr	r3, [pc, #428]	@ (80036f8 <Screen1_Ctrl+0x978>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	461c      	mov	r4, r3
 8003550:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	2305      	movs	r3, #5
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4623      	mov	r3, r4
 800355c:	f7fe fb75 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + (1 * Wigth_Bt * 1.2) + PoStart_x, Start_y + PoStart_y + 75 * 3, "TRO VE", _Open_Sans_Bold_22, 1, BLACK);
 8003560:	4b62      	ldr	r3, [pc, #392]	@ (80036ec <Screen1_Ctrl+0x96c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffe5 	bl	8000534 <__aeabi_i2d>
 800356a:	4604      	mov	r4, r0
 800356c:	460d      	mov	r5, r1
 800356e:	4b61      	ldr	r3, [pc, #388]	@ (80036f4 <Screen1_Ctrl+0x974>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fc ffde 	bl	8000534 <__aeabi_i2d>
 8003578:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800357c:	4b63      	ldr	r3, [pc, #396]	@ (800370c <Screen1_Ctrl+0x98c>)
 800357e:	f7fd f843 	bl	8000608 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f7fc fe87 	bl	800029c <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4614      	mov	r4, r2
 8003594:	461d      	mov	r5, r3
 8003596:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <Screen1_Ctrl+0x97c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ffca 	bl	8000534 <__aeabi_i2d>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc fe78 	bl	800029c <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f7fd fb00 	bl	8000bb8 <__aeabi_d2uiz>
 80035b8:	4603      	mov	r3, r0
 80035ba:	b298      	uxth	r0, r3
 80035bc:	4b4c      	ldr	r3, [pc, #304]	@ (80036f0 <Screen1_Ctrl+0x970>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003700 <Screen1_Ctrl+0x980>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	33e1      	adds	r3, #225	@ 0xe1
 80035cc:	b299      	uxth	r1, r3
 80035ce:	2300      	movs	r3, #0
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2301      	movs	r3, #1
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <Screen1_Ctrl+0x984>)
 80035d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003710 <Screen1_Ctrl+0x990>)
 80035da:	f7fe f971 	bl	80018c0 <LCD_Font>

	/* ---- Back Button ---- */
	LCD_Rect_Round_Fill(Start_x + (Wigth_Bt * 1.2 * 2), Start_y + 75 * 3, Wigth_Bt, High_Bt, 5, GREEN);
 80035de:	4b43      	ldr	r3, [pc, #268]	@ (80036ec <Screen1_Ctrl+0x96c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffa6 	bl	8000534 <__aeabi_i2d>
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <Screen1_Ctrl+0x974>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ff9f 	bl	8000534 <__aeabi_i2d>
 80035f6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <Screen1_Ctrl+0x98c>)
 80035fc:	f7fd f804 	bl	8000608 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	f7fc fe46 	bl	800029c <__adddf3>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fc fe40 	bl	800029c <__adddf3>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f7fd fac8 	bl	8000bb8 <__aeabi_d2uiz>
 8003628:	4603      	mov	r3, r0
 800362a:	b298      	uxth	r0, r3
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <Screen1_Ctrl+0x970>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	33e1      	adds	r3, #225	@ 0xe1
 8003632:	b299      	uxth	r1, r3
 8003634:	4b2f      	ldr	r3, [pc, #188]	@ (80036f4 <Screen1_Ctrl+0x974>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <Screen1_Ctrl+0x978>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461c      	mov	r4, r3
 8003640:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2305      	movs	r3, #5
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4623      	mov	r3, r4
 800364c:	f7fe fafd 	bl	8001c4a <LCD_Rect_Round_Fill>
	LCD_Font(Start_x + (2 * Wigth_Bt * 1.2) + PoStart_x + 5, Start_y + 75 * 3 + PoStart_y, "===>>", _Open_Sans_Bold_24, 1, BLACK);
 8003650:	4b26      	ldr	r3, [pc, #152]	@ (80036ec <Screen1_Ctrl+0x96c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff6d 	bl	8000534 <__aeabi_i2d>
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	4b25      	ldr	r3, [pc, #148]	@ (80036f4 <Screen1_Ctrl+0x974>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff65 	bl	8000534 <__aeabi_i2d>
 800366a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800366e:	4b27      	ldr	r3, [pc, #156]	@ (800370c <Screen1_Ctrl+0x98c>)
 8003670:	f7fc ffca 	bl	8000608 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4620      	mov	r0, r4
 800367a:	4629      	mov	r1, r5
 800367c:	f7fc fe0e 	bl	800029c <__adddf3>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4614      	mov	r4, r2
 8003686:	461d      	mov	r5, r3
 8003688:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <Screen1_Ctrl+0x97c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff51 	bl	8000534 <__aeabi_i2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4620      	mov	r0, r4
 8003698:	4629      	mov	r1, r5
 800369a:	f7fc fdff 	bl	800029c <__adddf3>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003714 <Screen1_Ctrl+0x994>)
 80036ac:	f7fc fdf6 	bl	800029c <__adddf3>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fa7e 	bl	8000bb8 <__aeabi_d2uiz>
 80036bc:	4603      	mov	r3, r0
 80036be:	b298      	uxth	r0, r3
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <Screen1_Ctrl+0x970>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <Screen1_Ctrl+0x980>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	33e1      	adds	r3, #225	@ 0xe1
 80036d0:	b299      	uxth	r1, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2301      	movs	r3, #1
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <Screen1_Ctrl+0x998>)
 80036dc:	4a0f      	ldr	r2, [pc, #60]	@ (800371c <Screen1_Ctrl+0x99c>)
 80036de:	f7fe f8ef 	bl	80018c0 <LCD_Font>

}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000001 	.word	0x20000001
 80036f4:	20000002 	.word	0x20000002
 80036f8:	20000003 	.word	0x20000003
 80036fc:	2000000a 	.word	0x2000000a
 8003700:	2000000b 	.word	0x2000000b
 8003704:	0800d80c 	.word	0x0800d80c
 8003708:	0800ccb8 	.word	0x0800ccb8
 800370c:	3ff33333 	.word	0x3ff33333
 8003710:	0800cca4 	.word	0x0800cca4
 8003714:	40140000 	.word	0x40140000
 8003718:	0800e428 	.word	0x0800e428
 800371c:	0800ccc4 	.word	0x0800ccc4

08003720 <Touch_XY>:
/***************************************************************************************
 	 	 ************* The function is used to control the devices **************
*****************************************************************************************/
void Touch_XY() {
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af02      	add	r7, sp, #8
	uint8_t Ctr_Dev_Temp[2] = {0,0};
 8003726:	2300      	movs	r3, #0
 8003728:	813b      	strh	r3, [r7, #8]
	/* ---- Press button 'DIEU KHIEN' ---- */
	if (touchx >= 100 && touchx <= 340 && touchy >= 230 && touchy <= 315)
 800372a:	4b91      	ldr	r3, [pc, #580]	@ (8003970 <Touch_XY+0x250>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b63      	cmp	r3, #99	@ 0x63
 8003732:	d919      	bls.n	8003768 <Touch_XY+0x48>
 8003734:	4b8e      	ldr	r3, [pc, #568]	@ (8003970 <Touch_XY+0x250>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800373e:	d813      	bhi.n	8003768 <Touch_XY+0x48>
 8003740:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <Touch_XY+0x254>)
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	2be5      	cmp	r3, #229	@ 0xe5
 8003748:	d90e      	bls.n	8003768 <Touch_XY+0x48>
 800374a:	4b8a      	ldr	r3, [pc, #552]	@ (8003974 <Touch_XY+0x254>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003754:	d208      	bcs.n	8003768 <Touch_XY+0x48>
	{
		if(StDisplay == DISPLAY_SCREEN)
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <Touch_XY+0x258>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d104      	bne.n	8003768 <Touch_XY+0x48>
		{
			StDisplay = CTRL_SCREEN_1;
 800375e:	4b86      	ldr	r3, [pc, #536]	@ (8003978 <Touch_XY+0x258>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
			Screen1_Ctrl();
 8003764:	f7ff fb0c 	bl	8002d80 <Screen1_Ctrl>
		}
	}
	/* ---- Press button 'TRO VE' ---- */
	if(touchx >= 200 && touchx <= 280 && touchy >= 255 && touchy <= 315)
 8003768:	4b81      	ldr	r3, [pc, #516]	@ (8003970 <Touch_XY+0x250>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003770:	d919      	bls.n	80037a6 <Touch_XY+0x86>
 8003772:	4b7f      	ldr	r3, [pc, #508]	@ (8003970 <Touch_XY+0x250>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800377c:	d813      	bhi.n	80037a6 <Touch_XY+0x86>
 800377e:	4b7d      	ldr	r3, [pc, #500]	@ (8003974 <Touch_XY+0x254>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	2bfe      	cmp	r3, #254	@ 0xfe
 8003786:	d90e      	bls.n	80037a6 <Touch_XY+0x86>
 8003788:	4b7a      	ldr	r3, [pc, #488]	@ (8003974 <Touch_XY+0x254>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003792:	d208      	bcs.n	80037a6 <Touch_XY+0x86>
	{
		if(StDisplay == CTRL_SCREEN_1)
 8003794:	4b78      	ldr	r3, [pc, #480]	@ (8003978 <Touch_XY+0x258>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d104      	bne.n	80037a6 <Touch_XY+0x86>
		{
			StDisplay = DISPLAY_SCREEN;
 800379c:	4b76      	ldr	r3, [pc, #472]	@ (8003978 <Touch_XY+0x258>)
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
			Default_Display();
 80037a2:	f7fe fbb3 	bl	8001f0c <Default_Display>
		}
	}
	/* ---- Press button '===>>' ---- */
	if(touchx >= 335 && touchx <= 440 && touchy >= 255 && touchy <= 315)
 80037a6:	4b72      	ldr	r3, [pc, #456]	@ (8003970 <Touch_XY+0x250>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f5b3 7fa7 	cmp.w	r3, #334	@ 0x14e
 80037b0:	d919      	bls.n	80037e6 <Touch_XY+0xc6>
 80037b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003970 <Touch_XY+0x250>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80037bc:	d813      	bhi.n	80037e6 <Touch_XY+0xc6>
 80037be:	4b6d      	ldr	r3, [pc, #436]	@ (8003974 <Touch_XY+0x254>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80037c6:	d90e      	bls.n	80037e6 <Touch_XY+0xc6>
 80037c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003974 <Touch_XY+0x254>)
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 80037d2:	d208      	bcs.n	80037e6 <Touch_XY+0xc6>
	{
		if(StDisplay == CTRL_SCREEN_1)
 80037d4:	4b68      	ldr	r3, [pc, #416]	@ (8003978 <Touch_XY+0x258>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d104      	bne.n	80037e6 <Touch_XY+0xc6>
		{
			StDisplay = CTRL_SCREEN_2;
 80037dc:	4b66      	ldr	r3, [pc, #408]	@ (8003978 <Touch_XY+0x258>)
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
			Screen2_Ctrl();
 80037e2:	f7ff f925 	bl	8002a30 <Screen2_Ctrl>
		}
	}
	if(StDisplay == CTRL_SCREEN_2)
 80037e6:	4b64      	ldr	r3, [pc, #400]	@ (8003978 <Touch_XY+0x258>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	f040 81c8 	bne.w	8003b80 <Touch_XY+0x460>
	{
		uint8_t Ctr_Dev_Temp[2] = {0};
 80037f0:	2300      	movs	r3, #0
 80037f2:	80bb      	strh	r3, [r7, #4]
		/* ---- Press button 'BAT HET' ---- */
		if(touchx >= 60 && touchx <= 210 && touchy >= 45 && touchy <= 120)
 80037f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003970 <Touch_XY+0x250>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b3b      	cmp	r3, #59	@ 0x3b
 80037fc:	d933      	bls.n	8003866 <Touch_XY+0x146>
 80037fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003970 <Touch_XY+0x250>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	2bd2      	cmp	r3, #210	@ 0xd2
 8003806:	d82e      	bhi.n	8003866 <Touch_XY+0x146>
 8003808:	4b5a      	ldr	r3, [pc, #360]	@ (8003974 <Touch_XY+0x254>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b2c      	cmp	r3, #44	@ 0x2c
 8003810:	d929      	bls.n	8003866 <Touch_XY+0x146>
 8003812:	4b58      	ldr	r3, [pc, #352]	@ (8003974 <Touch_XY+0x254>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b78      	cmp	r3, #120	@ 0x78
 800381a:	d824      	bhi.n	8003866 <Touch_XY+0x146>
		{
			Ctr_Dev = 0x03ff;
 800381c:	4b57      	ldr	r3, [pc, #348]	@ (800397c <Touch_XY+0x25c>)
 800381e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003822:	801a      	strh	r2, [r3, #0]
			Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003824:	4b55      	ldr	r3, [pc, #340]	@ (800397c <Touch_XY+0x25c>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	713b      	strb	r3, [r7, #4]
			Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003830:	4b52      	ldr	r3, [pc, #328]	@ (800397c <Touch_XY+0x25c>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	717b      	strb	r3, [r7, #5]
			Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2); /* Send Ctrl_Dev variable */
 8003838:	1d39      	adds	r1, r7, #4
 800383a:	2302      	movs	r3, #2
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2302      	movs	r3, #2
 8003840:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <Touch_XY+0x260>)
 8003842:	4850      	ldr	r0, [pc, #320]	@ (8003984 <Touch_XY+0x264>)
 8003844:	f7fe fae4 	bl	8001e10 <Send_Uart1>
			if(StDisplay == CTRL_SCREEN_1)
 8003848:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <Touch_XY+0x258>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d103      	bne.n	8003858 <Touch_XY+0x138>
			{
				Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8003850:	494d      	ldr	r1, [pc, #308]	@ (8003988 <Touch_XY+0x268>)
 8003852:	484e      	ldr	r0, [pc, #312]	@ (800398c <Touch_XY+0x26c>)
 8003854:	f7fe fd6a 	bl	800232c <Update_StatusBt>
			}
			Ctr_Dev_Old = Ctr_Dev;
 8003858:	4b48      	ldr	r3, [pc, #288]	@ (800397c <Touch_XY+0x25c>)
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	4b4c      	ldr	r3, [pc, #304]	@ (8003990 <Touch_XY+0x270>)
 800385e:	801a      	strh	r2, [r3, #0]
			Flag_Uart = true;
 8003860:	4b4c      	ldr	r3, [pc, #304]	@ (8003994 <Touch_XY+0x274>)
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button 'TAT HET' ---- */
		if(touchx >= 270 && touchx <= 425 && touchy >= 45 && touchy <= 120)
 8003866:	4b42      	ldr	r3, [pc, #264]	@ (8003970 <Touch_XY+0x250>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003870:	d333      	bcc.n	80038da <Touch_XY+0x1ba>
 8003872:	4b3f      	ldr	r3, [pc, #252]	@ (8003970 <Touch_XY+0x250>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 800387c:	d22d      	bcs.n	80038da <Touch_XY+0x1ba>
 800387e:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <Touch_XY+0x254>)
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b2c      	cmp	r3, #44	@ 0x2c
 8003886:	d928      	bls.n	80038da <Touch_XY+0x1ba>
 8003888:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <Touch_XY+0x254>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b78      	cmp	r3, #120	@ 0x78
 8003890:	d823      	bhi.n	80038da <Touch_XY+0x1ba>
		{
			Ctr_Dev = 0x0000;
 8003892:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <Touch_XY+0x25c>)
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
			Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003898:	4b38      	ldr	r3, [pc, #224]	@ (800397c <Touch_XY+0x25c>)
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	713b      	strb	r3, [r7, #4]
			Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 80038a4:	4b35      	ldr	r3, [pc, #212]	@ (800397c <Touch_XY+0x25c>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	717b      	strb	r3, [r7, #5]
			Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2); /* Send Ctrl_Dev variable */
 80038ac:	1d39      	adds	r1, r7, #4
 80038ae:	2302      	movs	r3, #2
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2302      	movs	r3, #2
 80038b4:	4a32      	ldr	r2, [pc, #200]	@ (8003980 <Touch_XY+0x260>)
 80038b6:	4833      	ldr	r0, [pc, #204]	@ (8003984 <Touch_XY+0x264>)
 80038b8:	f7fe faaa 	bl	8001e10 <Send_Uart1>
			if(StDisplay == CTRL_SCREEN_1)
 80038bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003978 <Touch_XY+0x258>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d103      	bne.n	80038cc <Touch_XY+0x1ac>
			{
				Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 80038c4:	4930      	ldr	r1, [pc, #192]	@ (8003988 <Touch_XY+0x268>)
 80038c6:	4831      	ldr	r0, [pc, #196]	@ (800398c <Touch_XY+0x26c>)
 80038c8:	f7fe fd30 	bl	800232c <Update_StatusBt>
			}
			Ctr_Dev_Old = Ctr_Dev;
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <Touch_XY+0x25c>)
 80038ce:	881a      	ldrh	r2, [r3, #0]
 80038d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003990 <Touch_XY+0x270>)
 80038d2:	801a      	strh	r2, [r3, #0]
			Flag_Uart = true;
 80038d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003994 <Touch_XY+0x274>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button '<<===' ---- */
		if(touchx >= 60 && touchx <= 210 && touchy >= 190 && touchy <= 230)
 80038da:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <Touch_XY+0x250>)
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80038e2:	d913      	bls.n	800390c <Touch_XY+0x1ec>
 80038e4:	4b22      	ldr	r3, [pc, #136]	@ (8003970 <Touch_XY+0x250>)
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2bd2      	cmp	r3, #210	@ 0xd2
 80038ec:	d80e      	bhi.n	800390c <Touch_XY+0x1ec>
 80038ee:	4b21      	ldr	r3, [pc, #132]	@ (8003974 <Touch_XY+0x254>)
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2bbd      	cmp	r3, #189	@ 0xbd
 80038f6:	d909      	bls.n	800390c <Touch_XY+0x1ec>
 80038f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <Touch_XY+0x254>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2be6      	cmp	r3, #230	@ 0xe6
 8003900:	d804      	bhi.n	800390c <Touch_XY+0x1ec>
		{
			StDisplay = CTRL_SCREEN_1;
 8003902:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <Touch_XY+0x258>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
			Screen1_Ctrl();
 8003908:	f7ff fa3a 	bl	8002d80 <Screen1_Ctrl>
		}
		/* ---- Press button 'COI' ---- */
		if(touchx >= 270 && touchx <= 425 && touchy >= 190 && touchy <= 230)
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <Touch_XY+0x250>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003916:	f0c0 8113 	bcc.w	8003b40 <Touch_XY+0x420>
 800391a:	4b15      	ldr	r3, [pc, #84]	@ (8003970 <Touch_XY+0x250>)
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	b29b      	uxth	r3, r3
 8003920:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 8003924:	f080 810c 	bcs.w	8003b40 <Touch_XY+0x420>
 8003928:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <Touch_XY+0x254>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	2bbd      	cmp	r3, #189	@ 0xbd
 8003930:	f240 8106 	bls.w	8003b40 <Touch_XY+0x420>
 8003934:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <Touch_XY+0x254>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	2be6      	cmp	r3, #230	@ 0xe6
 800393c:	f200 8100 	bhi.w	8003b40 <Touch_XY+0x420>
		{
			debounce_100ms = 0;
 8003940:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <Touch_XY+0x278>)
 8003942:	2200      	movs	r2, #0
 8003944:	801a      	strh	r2, [r3, #0]
			while (debounce_100ms < 30);
 8003946:	bf00      	nop
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <Touch_XY+0x278>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b1d      	cmp	r3, #29
 8003950:	d9fa      	bls.n	8003948 <Touch_XY+0x228>
			Buzzer = !Buzzer;
 8003952:	4b12      	ldr	r3, [pc, #72]	@ (800399c <Touch_XY+0x27c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <Touch_XY+0x27c>)
 8003964:	701a      	strb	r2, [r3, #0]
			if (0 == Buzzer)
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <Touch_XY+0x27c>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	e018      	b.n	80039a0 <Touch_XY+0x280>
 800396e:	bf00      	nop
 8003970:	20000454 	.word	0x20000454
 8003974:	20000456 	.word	0x20000456
 8003978:	2000046c 	.word	0x2000046c
 800397c:	20000486 	.word	0x20000486
 8003980:	2000001a 	.word	0x2000001a
 8003984:	20000010 	.word	0x20000010
 8003988:	20000580 	.word	0x20000580
 800398c:	20000470 	.word	0x20000470
 8003990:	20000488 	.word	0x20000488
 8003994:	20000495 	.word	0x20000495
 8003998:	20000490 	.word	0x20000490
 800399c:	2000048e 	.word	0x2000048e
 80039a0:	d161      	bne.n	8003a66 <Touch_XY+0x346>
			{
				BUZZER_OFF;
 80039a2:	2201      	movs	r2, #1
 80039a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039a8:	4879      	ldr	r0, [pc, #484]	@ (8003b90 <Touch_XY+0x470>)
 80039aa:	f003 f967 	bl	8006c7c <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 80039ae:	4b79      	ldr	r3, [pc, #484]	@ (8003b94 <Touch_XY+0x474>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	4b78      	ldr	r3, [pc, #480]	@ (8003b98 <Touch_XY+0x478>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4413      	add	r3, r2
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	336e      	adds	r3, #110	@ 0x6e
 80039be:	b298      	uxth	r0, r3
 80039c0:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <Touch_XY+0x47c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <Touch_XY+0x480>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3332      	adds	r3, #50	@ 0x32
 80039d0:	b299      	uxth	r1, r3
 80039d2:	4b71      	ldr	r3, [pc, #452]	@ (8003b98 <Touch_XY+0x478>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	3332      	adds	r3, #50	@ 0x32
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b71      	ldr	r3, [pc, #452]	@ (8003ba0 <Touch_XY+0x480>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	331e      	adds	r3, #30
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 80039e6:	9401      	str	r4, [sp, #4]
 80039e8:	2405      	movs	r4, #5
 80039ea:	9400      	str	r4, [sp, #0]
 80039ec:	f7fe f92d 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <Touch_XY+0x474>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b68      	ldr	r3, [pc, #416]	@ (8003b98 <Touch_XY+0x478>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	338c      	adds	r3, #140	@ 0x8c
 8003a00:	b29e      	uxth	r6, r3
 8003a02:	4b66      	ldr	r3, [pc, #408]	@ (8003b9c <Touch_XY+0x47c>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd93 	bl	8000534 <__aeabi_i2d>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	460d      	mov	r5, r1
 8003a12:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <Touch_XY+0x480>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fd8c 	bl	8000534 <__aeabi_i2d>
 8003a1c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003a20:	4b60      	ldr	r3, [pc, #384]	@ (8003ba4 <Touch_XY+0x484>)
 8003a22:	f7fc fdf1 	bl	8000608 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	f7fc fc33 	bl	800029c <__adddf3>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	f7fc fc2d 	bl	800029c <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8b5 	bl	8000bb8 <__aeabi_d2uiz>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	b299      	uxth	r1, r3
 8003a52:	2300      	movs	r3, #0
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2301      	movs	r3, #1
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ba8 <Touch_XY+0x488>)
 8003a5c:	4a53      	ldr	r2, [pc, #332]	@ (8003bac <Touch_XY+0x48c>)
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7fd ff2e 	bl	80018c0 <LCD_Font>
 8003a64:	e060      	b.n	8003b28 <Touch_XY+0x408>
			}
			else
			{
				BUZZER_ON;
 8003a66:	2200      	movs	r2, #0
 8003a68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a6c:	4848      	ldr	r0, [pc, #288]	@ (8003b90 <Touch_XY+0x470>)
 8003a6e:	f003 f905 	bl	8006c7c <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8003a72:	4b48      	ldr	r3, [pc, #288]	@ (8003b94 <Touch_XY+0x474>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <Touch_XY+0x478>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	336e      	adds	r3, #110	@ 0x6e
 8003a82:	b298      	uxth	r0, r3
 8003a84:	4b45      	ldr	r3, [pc, #276]	@ (8003b9c <Touch_XY+0x47c>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4b45      	ldr	r3, [pc, #276]	@ (8003ba0 <Touch_XY+0x480>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3332      	adds	r3, #50	@ 0x32
 8003a94:	b299      	uxth	r1, r3
 8003a96:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <Touch_XY+0x478>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	3332      	adds	r3, #50	@ 0x32
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ba0 <Touch_XY+0x480>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	331e      	adds	r3, #30
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 8003aaa:	9401      	str	r4, [sp, #4]
 8003aac:	2405      	movs	r4, #5
 8003aae:	9400      	str	r4, [sp, #0]
 8003ab0:	f7fe f8cb 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 8003ab4:	4b37      	ldr	r3, [pc, #220]	@ (8003b94 <Touch_XY+0x474>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <Touch_XY+0x478>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	338c      	adds	r3, #140	@ 0x8c
 8003ac4:	b29e      	uxth	r6, r3
 8003ac6:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <Touch_XY+0x47c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fd31 	bl	8000534 <__aeabi_i2d>
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	460d      	mov	r5, r1
 8003ad6:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <Touch_XY+0x480>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fd2a 	bl	8000534 <__aeabi_i2d>
 8003ae0:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba4 <Touch_XY+0x484>)
 8003ae6:	f7fc fd8f 	bl	8000608 <__aeabi_dmul>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	f7fc fbd1 	bl	800029c <__adddf3>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7fc fbcb 	bl	800029c <__adddf3>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fd f853 	bl	8000bb8 <__aeabi_d2uiz>
 8003b12:	4603      	mov	r3, r0
 8003b14:	b299      	uxth	r1, r3
 8003b16:	2300      	movs	r3, #0
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <Touch_XY+0x488>)
 8003b20:	4a23      	ldr	r2, [pc, #140]	@ (8003bb0 <Touch_XY+0x490>)
 8003b22:	4630      	mov	r0, r6
 8003b24:	f7fd fecc 	bl	80018c0 <LCD_Font>
			}
			Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8003b28:	2301      	movs	r3, #1
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	4a21      	ldr	r2, [pc, #132]	@ (8003bb4 <Touch_XY+0x494>)
 8003b30:	4921      	ldr	r1, [pc, #132]	@ (8003bb8 <Touch_XY+0x498>)
 8003b32:	4822      	ldr	r0, [pc, #136]	@ (8003bbc <Touch_XY+0x49c>)
 8003b34:	f7fe f96c 	bl	8001e10 <Send_Uart1>
			Buzzer_Old = Buzzer;
 8003b38:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <Touch_XY+0x498>)
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <Touch_XY+0x4a0>)
 8003b3e:	701a      	strb	r2, [r3, #0]
		}
		/* ---- Press button 'TRO VE' ---- */
		if(touchx >= 90 && touchx <= 345 && touchy >= 245 && touchy <= 315)
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <Touch_XY+0x4a4>)
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b59      	cmp	r3, #89	@ 0x59
 8003b48:	f240 829a 	bls.w	8004080 <Touch_XY+0x960>
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc4 <Touch_XY+0x4a4>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f5b3 7fad 	cmp.w	r3, #346	@ 0x15a
 8003b56:	f080 8293 	bcs.w	8004080 <Touch_XY+0x960>
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <Touch_XY+0x4a8>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2bf4      	cmp	r3, #244	@ 0xf4
 8003b62:	f240 828d 	bls.w	8004080 <Touch_XY+0x960>
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <Touch_XY+0x4a8>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8003b70:	f080 8286 	bcs.w	8004080 <Touch_XY+0x960>
		{
			StDisplay = DISPLAY_SCREEN;
 8003b74:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <Touch_XY+0x4ac>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
			Default_Display();
 8003b7a:	f7fe f9c7 	bl	8001f0c <Default_Display>
				break;
			}
		}
	}
	else;
}
 8003b7e:	e27f      	b.n	8004080 <Touch_XY+0x960>
	else if(StDisplay == CTRL_SCREEN_1)
 8003b80:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <Touch_XY+0x4ac>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 827b 	bne.w	8004080 <Touch_XY+0x960>
		for (int i = 0; i < 3; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e272      	b.n	8004076 <Touch_XY+0x956>
 8003b90:	40020000 	.word	0x40020000
 8003b94:	20000000 	.word	0x20000000
 8003b98:	20000002 	.word	0x20000002
 8003b9c:	20000001 	.word	0x20000001
 8003ba0:	20000003 	.word	0x20000003
 8003ba4:	3ff33333 	.word	0x3ff33333
 8003ba8:	0800f1ec 	.word	0x0800f1ec
 8003bac:	0800cc8c 	.word	0x0800cc8c
 8003bb0:	0800cc98 	.word	0x0800cc98
 8003bb4:	2000001a 	.word	0x2000001a
 8003bb8:	2000048e 	.word	0x2000048e
 8003bbc:	20000014 	.word	0x20000014
 8003bc0:	2000048f 	.word	0x2000048f
 8003bc4:	20000454 	.word	0x20000454
 8003bc8:	20000456 	.word	0x20000456
 8003bcc:	2000046c 	.word	0x2000046c
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 8003bd0:	4b94      	ldr	r3, [pc, #592]	@ (8003e24 <Touch_XY+0x704>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4a93      	ldr	r2, [pc, #588]	@ (8003e28 <Touch_XY+0x708>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b92      	ldr	r3, [pc, #584]	@ (8003e2c <Touch_XY+0x70c>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4299      	cmp	r1, r3
 8003bea:	f2c0 8083 	blt.w	8003cf4 <Touch_XY+0x5d4>
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <Touch_XY+0x704>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4b8e      	ldr	r3, [pc, #568]	@ (8003e30 <Touch_XY+0x710>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003e28 <Touch_XY+0x708>)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c04:	4403      	add	r3, r0
 8003c06:	4a89      	ldr	r2, [pc, #548]	@ (8003e2c <Touch_XY+0x70c>)
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	4299      	cmp	r1, r3
 8003c0e:	dc71      	bgt.n	8003cf4 <Touch_XY+0x5d4>
					&& touchy >= (50) && touchy <= (80))
 8003c10:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <Touch_XY+0x714>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b31      	cmp	r3, #49	@ 0x31
 8003c18:	d96c      	bls.n	8003cf4 <Touch_XY+0x5d4>
 8003c1a:	4b86      	ldr	r3, [pc, #536]	@ (8003e34 <Touch_XY+0x714>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b50      	cmp	r3, #80	@ 0x50
 8003c22:	d867      	bhi.n	8003cf4 <Touch_XY+0x5d4>
				debounce_100ms = 0;
 8003c24:	4b84      	ldr	r3, [pc, #528]	@ (8003e38 <Touch_XY+0x718>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 30);
 8003c2a:	bf00      	nop
 8003c2c:	4b82      	ldr	r3, [pc, #520]	@ (8003e38 <Touch_XY+0x718>)
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b1d      	cmp	r3, #29
 8003c34:	d9fa      	bls.n	8003c2c <Touch_XY+0x50c>
				RelayStatus_arr_ESP[i] = !RelayStatus_arr_ESP[i];
 8003c36:	4a81      	ldr	r2, [pc, #516]	@ (8003e3c <Touch_XY+0x71c>)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e3c <Touch_XY+0x71c>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4413      	add	r3, r2
 8003c50:	460a      	mov	r2, r1
 8003c52:	701a      	strb	r2, [r3, #0]
				ReL_LoRa_Sen[i] = RelayStatus_arr_ESP[i] | 0x80;
 8003c54:	4a79      	ldr	r2, [pc, #484]	@ (8003e3c <Touch_XY+0x71c>)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c60:	b2d9      	uxtb	r1, r3
 8003c62:	4a77      	ldr	r2, [pc, #476]	@ (8003e40 <Touch_XY+0x720>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	460a      	mov	r2, r1
 8003c6a:	701a      	strb	r2, [r3, #0]
				Send_Lora_UpdateRelay(i);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fb85 	bl	8004380 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i] == 0)
 8003c76:	4a71      	ldr	r2, [pc, #452]	@ (8003e3c <Touch_XY+0x71c>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10d      	bne.n	8003c9e <Touch_XY+0x57e>
					CLEAR_BIT_USER(Ctr_Dev, i);
 8003c82:	2201      	movs	r2, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	4b6c      	ldr	r3, [pc, #432]	@ (8003e44 <Touch_XY+0x724>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b6a      	ldr	r3, [pc, #424]	@ (8003e44 <Touch_XY+0x724>)
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e00a      	b.n	8003cb4 <Touch_XY+0x594>
					SET_BIT_USER(Ctr_Dev, i);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b66      	ldr	r3, [pc, #408]	@ (8003e44 <Touch_XY+0x724>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b64      	ldr	r3, [pc, #400]	@ (8003e44 <Touch_XY+0x724>)
 8003cb2:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003cb4:	4b63      	ldr	r3, [pc, #396]	@ (8003e44 <Touch_XY+0x724>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003cc0:	4b60      	ldr	r3, [pc, #384]	@ (8003e44 <Touch_XY+0x724>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8003cc8:	f107 0108 	add.w	r1, r7, #8
 8003ccc:	2302      	movs	r3, #2
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e48 <Touch_XY+0x728>)
 8003cd4:	485d      	ldr	r0, [pc, #372]	@ (8003e4c <Touch_XY+0x72c>)
 8003cd6:	f7fe f89b 	bl	8001e10 <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 8003cda:	4b5d      	ldr	r3, [pc, #372]	@ (8003e50 <Touch_XY+0x730>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d103      	bne.n	8003cea <Touch_XY+0x5ca>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8003ce2:	495c      	ldr	r1, [pc, #368]	@ (8003e54 <Touch_XY+0x734>)
 8003ce4:	4855      	ldr	r0, [pc, #340]	@ (8003e3c <Touch_XY+0x71c>)
 8003ce6:	f7fe fb21 	bl	800232c <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 8003cea:	4b56      	ldr	r3, [pc, #344]	@ (8003e44 <Touch_XY+0x724>)
 8003cec:	881a      	ldrh	r2, [r3, #0]
 8003cee:	4b5a      	ldr	r3, [pc, #360]	@ (8003e58 <Touch_XY+0x738>)
 8003cf0:	801a      	strh	r2, [r3, #0]
				break;
 8003cf2:	e1c5      	b.n	8004080 <Touch_XY+0x960>
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8003e24 <Touch_XY+0x704>)
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <Touch_XY+0x708>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b49      	ldr	r3, [pc, #292]	@ (8003e2c <Touch_XY+0x70c>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	f2c0 80a5 	blt.w	8003e5c <Touch_XY+0x73c>
 8003d12:	4b44      	ldr	r3, [pc, #272]	@ (8003e24 <Touch_XY+0x704>)
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4b45      	ldr	r3, [pc, #276]	@ (8003e30 <Touch_XY+0x710>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	4a41      	ldr	r2, [pc, #260]	@ (8003e28 <Touch_XY+0x708>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d28:	4403      	add	r3, r0
 8003d2a:	4a40      	ldr	r2, [pc, #256]	@ (8003e2c <Touch_XY+0x70c>)
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	4299      	cmp	r1, r3
 8003d32:	f300 8093 	bgt.w	8003e5c <Touch_XY+0x73c>
					&& touchy >= (130) && touchy <= (160))
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <Touch_XY+0x714>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b81      	cmp	r3, #129	@ 0x81
 8003d3e:	f240 808d 	bls.w	8003e5c <Touch_XY+0x73c>
 8003d42:	4b3c      	ldr	r3, [pc, #240]	@ (8003e34 <Touch_XY+0x714>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d4a:	f200 8087 	bhi.w	8003e5c <Touch_XY+0x73c>
				debounce_100ms = 0;
 8003d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e38 <Touch_XY+0x718>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 30);
 8003d54:	bf00      	nop
 8003d56:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <Touch_XY+0x718>)
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b1d      	cmp	r3, #29
 8003d5e:	d9fa      	bls.n	8003d56 <Touch_XY+0x636>
				RelayStatus_arr_ESP[i + 3] = !RelayStatus_arr_ESP[i + 3];
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3303      	adds	r3, #3
 8003d64:	4a35      	ldr	r2, [pc, #212]	@ (8003e3c <Touch_XY+0x71c>)
 8003d66:	5cd3      	ldrb	r3, [r2, r3]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3303      	adds	r3, #3
 8003d76:	4611      	mov	r1, r2
 8003d78:	4a30      	ldr	r2, [pc, #192]	@ (8003e3c <Touch_XY+0x71c>)
 8003d7a:	54d1      	strb	r1, [r2, r3]
				ReL_LoRa_Sen[i + 3] = RelayStatus_arr_ESP[i + 3] | 0x80;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3303      	adds	r3, #3
 8003d80:	4a2e      	ldr	r2, [pc, #184]	@ (8003e3c <Touch_XY+0x71c>)
 8003d82:	5cd2      	ldrb	r2, [r2, r3]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3303      	adds	r3, #3
 8003d88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d8c:	b2d1      	uxtb	r1, r2
 8003d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e40 <Touch_XY+0x720>)
 8003d90:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(i+3);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3303      	adds	r3, #3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 faf0 	bl	8004380 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i] == 0)
 8003da0:	4a26      	ldr	r2, [pc, #152]	@ (8003e3c <Touch_XY+0x71c>)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <Touch_XY+0x6aa>
					CLEAR_BIT_USER(Ctr_Dev, i + 3);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3303      	adds	r3, #3
 8003db0:	2201      	movs	r2, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <Touch_XY+0x724>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <Touch_XY+0x724>)
 8003dc6:	801a      	strh	r2, [r3, #0]
 8003dc8:	e00b      	b.n	8003de2 <Touch_XY+0x6c2>
					SET_BIT_USER(Ctr_Dev, i + 3);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3303      	adds	r3, #3
 8003dce:	2201      	movs	r2, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <Touch_XY+0x724>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <Touch_XY+0x724>)
 8003de0:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003de2:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <Touch_XY+0x724>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <Touch_XY+0x724>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8003df6:	f107 0108 	add.w	r1, r7, #8
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2302      	movs	r3, #2
 8003e00:	4a11      	ldr	r2, [pc, #68]	@ (8003e48 <Touch_XY+0x728>)
 8003e02:	4812      	ldr	r0, [pc, #72]	@ (8003e4c <Touch_XY+0x72c>)
 8003e04:	f7fe f804 	bl	8001e10 <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 8003e08:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <Touch_XY+0x730>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d103      	bne.n	8003e18 <Touch_XY+0x6f8>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8003e10:	4910      	ldr	r1, [pc, #64]	@ (8003e54 <Touch_XY+0x734>)
 8003e12:	480a      	ldr	r0, [pc, #40]	@ (8003e3c <Touch_XY+0x71c>)
 8003e14:	f7fe fa8a 	bl	800232c <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <Touch_XY+0x724>)
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <Touch_XY+0x738>)
 8003e1e:	801a      	strh	r2, [r3, #0]
				break;
 8003e20:	e12e      	b.n	8004080 <Touch_XY+0x960>
 8003e22:	bf00      	nop
 8003e24:	20000454 	.word	0x20000454
 8003e28:	20000004 	.word	0x20000004
 8003e2c:	2000000a 	.word	0x2000000a
 8003e30:	20000002 	.word	0x20000002
 8003e34:	20000456 	.word	0x20000456
 8003e38:	20000490 	.word	0x20000490
 8003e3c:	20000470 	.word	0x20000470
 8003e40:	2000047c 	.word	0x2000047c
 8003e44:	20000486 	.word	0x20000486
 8003e48:	2000001a 	.word	0x2000001a
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	2000046c 	.word	0x2000046c
 8003e54:	20000580 	.word	0x20000580
 8003e58:	20000488 	.word	0x20000488
			if (touchx >= (Posx_Node[i] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[i] - PoStart_x)
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8004088 <Touch_XY+0x968>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4619      	mov	r1, r3
 8003e64:	4a89      	ldr	r2, [pc, #548]	@ (800408c <Touch_XY+0x96c>)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <Touch_XY+0x970>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	4299      	cmp	r1, r3
 8003e76:	f2c0 8085 	blt.w	8003f84 <Touch_XY+0x864>
 8003e7a:	4b83      	ldr	r3, [pc, #524]	@ (8004088 <Touch_XY+0x968>)
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4619      	mov	r1, r3
 8003e82:	4b84      	ldr	r3, [pc, #528]	@ (8004094 <Touch_XY+0x974>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	4a80      	ldr	r2, [pc, #512]	@ (800408c <Touch_XY+0x96c>)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e90:	4403      	add	r3, r0
 8003e92:	4a7f      	ldr	r2, [pc, #508]	@ (8004090 <Touch_XY+0x970>)
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	dc73      	bgt.n	8003f84 <Touch_XY+0x864>
					&& touchy >= (200) && touchy <= (230))
 8003e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004098 <Touch_XY+0x978>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ea4:	d96e      	bls.n	8003f84 <Touch_XY+0x864>
 8003ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8004098 <Touch_XY+0x978>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2be6      	cmp	r3, #230	@ 0xe6
 8003eae:	d869      	bhi.n	8003f84 <Touch_XY+0x864>
				debounce_100ms = 0;
 8003eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800409c <Touch_XY+0x97c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 30); /* Chong doi nut nhan */
 8003eb6:	bf00      	nop
 8003eb8:	4b78      	ldr	r3, [pc, #480]	@ (800409c <Touch_XY+0x97c>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b1d      	cmp	r3, #29
 8003ec0:	d9fa      	bls.n	8003eb8 <Touch_XY+0x798>
				RelayStatus_arr_ESP[i + 6] = !RelayStatus_arr_ESP[i + 6];
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3306      	adds	r3, #6
 8003ec6:	4a76      	ldr	r2, [pc, #472]	@ (80040a0 <Touch_XY+0x980>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3306      	adds	r3, #6
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4a71      	ldr	r2, [pc, #452]	@ (80040a0 <Touch_XY+0x980>)
 8003edc:	54d1      	strb	r1, [r2, r3]
				ReL_LoRa_Sen[i + 6] = RelayStatus_arr_ESP[i + 6] | 0x80;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3306      	adds	r3, #6
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	@ (80040a0 <Touch_XY+0x980>)
 8003ee4:	5cd2      	ldrb	r2, [r2, r3]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3306      	adds	r3, #6
 8003eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003eee:	b2d1      	uxtb	r1, r2
 8003ef0:	4a6c      	ldr	r2, [pc, #432]	@ (80040a4 <Touch_XY+0x984>)
 8003ef2:	54d1      	strb	r1, [r2, r3]
				Send_Lora_UpdateRelay(i + 6);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3306      	adds	r3, #6
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fa3f 	bl	8004380 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[i] == 0)
 8003f02:	4a67      	ldr	r2, [pc, #412]	@ (80040a0 <Touch_XY+0x980>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10e      	bne.n	8003f2c <Touch_XY+0x80c>
					CLEAR_BIT_USER(Ctr_Dev, i + 6);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3306      	adds	r3, #6
 8003f12:	2201      	movs	r2, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	4b62      	ldr	r3, [pc, #392]	@ (80040a8 <Touch_XY+0x988>)
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	4b60      	ldr	r3, [pc, #384]	@ (80040a8 <Touch_XY+0x988>)
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	e00b      	b.n	8003f44 <Touch_XY+0x824>
					SET_BIT_USER(Ctr_Dev, i + 6);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3306      	adds	r3, #6
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	4b5b      	ldr	r3, [pc, #364]	@ (80040a8 <Touch_XY+0x988>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <Touch_XY+0x988>)
 8003f42:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8003f44:	4b58      	ldr	r3, [pc, #352]	@ (80040a8 <Touch_XY+0x988>)
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8003f50:	4b55      	ldr	r3, [pc, #340]	@ (80040a8 <Touch_XY+0x988>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8003f58:	f107 0108 	add.w	r1, r7, #8
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2302      	movs	r3, #2
 8003f62:	4a52      	ldr	r2, [pc, #328]	@ (80040ac <Touch_XY+0x98c>)
 8003f64:	4852      	ldr	r0, [pc, #328]	@ (80040b0 <Touch_XY+0x990>)
 8003f66:	f7fd ff53 	bl	8001e10 <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 8003f6a:	4b52      	ldr	r3, [pc, #328]	@ (80040b4 <Touch_XY+0x994>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d103      	bne.n	8003f7a <Touch_XY+0x85a>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8003f72:	4951      	ldr	r1, [pc, #324]	@ (80040b8 <Touch_XY+0x998>)
 8003f74:	484a      	ldr	r0, [pc, #296]	@ (80040a0 <Touch_XY+0x980>)
 8003f76:	f7fe f9d9 	bl	800232c <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80040a8 <Touch_XY+0x988>)
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <Touch_XY+0x99c>)
 8003f80:	801a      	strh	r2, [r3, #0]
				break;
 8003f82:	e07d      	b.n	8004080 <Touch_XY+0x960>
			if (touchx >= (Posx_Node[0] + PoStart_x) && touchx <= (Wigth_Bt + Posx_Node[0] - PoStart_x)
 8003f84:	4b40      	ldr	r3, [pc, #256]	@ (8004088 <Touch_XY+0x968>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <Touch_XY+0x96c>)
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <Touch_XY+0x970>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	440b      	add	r3, r1
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	db69      	blt.n	8004070 <Touch_XY+0x950>
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <Touch_XY+0x968>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <Touch_XY+0x974>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4b38      	ldr	r3, [pc, #224]	@ (800408c <Touch_XY+0x96c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a37      	ldr	r2, [pc, #220]	@ (8004090 <Touch_XY+0x970>)
 8003fb2:	7812      	ldrb	r2, [r2, #0]
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	dc5a      	bgt.n	8004070 <Touch_XY+0x950>
					&& touchy >= (250) && touchy <= (280))
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <Touch_XY+0x978>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2bf9      	cmp	r3, #249	@ 0xf9
 8003fc2:	d955      	bls.n	8004070 <Touch_XY+0x950>
 8003fc4:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <Touch_XY+0x978>)
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003fce:	d84f      	bhi.n	8004070 <Touch_XY+0x950>
				debounce_100ms = 0;
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <Touch_XY+0x97c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	801a      	strh	r2, [r3, #0]
				while (debounce_100ms < 30); /* Chong doi nut nhan */
 8003fd6:	bf00      	nop
 8003fd8:	4b30      	ldr	r3, [pc, #192]	@ (800409c <Touch_XY+0x97c>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b1d      	cmp	r3, #29
 8003fe0:	d9fa      	bls.n	8003fd8 <Touch_XY+0x8b8>
				RelayStatus_arr_ESP[9] = !RelayStatus_arr_ESP[9];
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80040a0 <Touch_XY+0x980>)
 8003fe4:	7a5b      	ldrb	r3, [r3, #9]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80040a0 <Touch_XY+0x980>)
 8003ff4:	725a      	strb	r2, [r3, #9]
				ReL_LoRa_Sen[9] = RelayStatus_arr_ESP[9] | 0x80;
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <Touch_XY+0x980>)
 8003ff8:	7a5b      	ldrb	r3, [r3, #9]
 8003ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <Touch_XY+0x984>)
 8004002:	725a      	strb	r2, [r3, #9]
				Send_Lora_UpdateRelay(9);
 8004004:	2009      	movs	r0, #9
 8004006:	f000 f9bb 	bl	8004380 <Send_Lora_UpdateRelay>
				if(RelayStatus_arr_ESP[9] == 0)
 800400a:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <Touch_XY+0x980>)
 800400c:	7a5b      	ldrb	r3, [r3, #9]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <Touch_XY+0x902>
					CLEAR_BIT_USER(Ctr_Dev, 9);
 8004012:	4b25      	ldr	r3, [pc, #148]	@ (80040a8 <Touch_XY+0x988>)
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800401a:	b29a      	uxth	r2, r3
 800401c:	4b22      	ldr	r3, [pc, #136]	@ (80040a8 <Touch_XY+0x988>)
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e006      	b.n	8004030 <Touch_XY+0x910>
					SET_BIT_USER(Ctr_Dev, 9);
 8004022:	4b21      	ldr	r3, [pc, #132]	@ (80040a8 <Touch_XY+0x988>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800402a:	b29a      	uxth	r2, r3
 800402c:	4b1e      	ldr	r3, [pc, #120]	@ (80040a8 <Touch_XY+0x988>)
 800402e:	801a      	strh	r2, [r3, #0]
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <Touch_XY+0x988>)
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	b29b      	uxth	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 800403c:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <Touch_XY+0x988>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	727b      	strb	r3, [r7, #9]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8004044:	f107 0108 	add.w	r1, r7, #8
 8004048:	2302      	movs	r3, #2
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2302      	movs	r3, #2
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <Touch_XY+0x98c>)
 8004050:	4817      	ldr	r0, [pc, #92]	@ (80040b0 <Touch_XY+0x990>)
 8004052:	f7fd fedd 	bl	8001e10 <Send_Uart1>
				if(StDisplay == CTRL_SCREEN_1)
 8004056:	4b17      	ldr	r3, [pc, #92]	@ (80040b4 <Touch_XY+0x994>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d103      	bne.n	8004066 <Touch_XY+0x946>
					Update_StatusBt(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 800405e:	4916      	ldr	r1, [pc, #88]	@ (80040b8 <Touch_XY+0x998>)
 8004060:	480f      	ldr	r0, [pc, #60]	@ (80040a0 <Touch_XY+0x980>)
 8004062:	f7fe f963 	bl	800232c <Update_StatusBt>
				Ctr_Dev_Old = Ctr_Dev;
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <Touch_XY+0x988>)
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	4b14      	ldr	r3, [pc, #80]	@ (80040bc <Touch_XY+0x99c>)
 800406c:	801a      	strh	r2, [r3, #0]
				break;
 800406e:	e007      	b.n	8004080 <Touch_XY+0x960>
		for (int i = 0; i < 3; i++)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b02      	cmp	r3, #2
 800407a:	f77f ada9 	ble.w	8003bd0 <Touch_XY+0x4b0>
}
 800407e:	e7ff      	b.n	8004080 <Touch_XY+0x960>
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004088:	20000454 	.word	0x20000454
 800408c:	20000004 	.word	0x20000004
 8004090:	2000000a 	.word	0x2000000a
 8004094:	20000002 	.word	0x20000002
 8004098:	20000456 	.word	0x20000456
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000470 	.word	0x20000470
 80040a4:	2000047c 	.word	0x2000047c
 80040a8:	20000486 	.word	0x20000486
 80040ac:	2000001a 	.word	0x2000001a
 80040b0:	20000010 	.word	0x20000010
 80040b4:	2000046c 	.word	0x2000046c
 80040b8:	20000580 	.word	0x20000580
 80040bc:	20000488 	.word	0x20000488

080040c0 <Update_Current_Val>:
/***************************************************************************************
  ************* The function is used to update the current value change **************
*****************************************************************************************/
void Update_Current_Val(bool *idx_changed)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b0ac      	sub	sp, #176	@ 0xb0
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
    char buf[20];
    int x_positions[] = {140, 140, 140, 140, 140, 360, 360, 360, 360};
 80040c8:	4b8a      	ldr	r3, [pc, #552]	@ (80042f4 <Update_Current_Val+0x234>)
 80040ca:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80040ce:	461d      	mov	r5, r3
 80040d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	6023      	str	r3, [r4, #0]
    int y_positions[] = {15, 65, 115, 165, 215, 15, 65, 115, 165};
 80040dc:	4b86      	ldr	r3, [pc, #536]	@ (80042f8 <Update_Current_Val+0x238>)
 80040de:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80040e2:	461d      	mov	r5, r3
 80040e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	6023      	str	r3, [r4, #0]
    int y_texts[] = {40, 90, 140, 190, 240, 40, 90, 140, 190};
 80040f0:	4b82      	ldr	r3, [pc, #520]	@ (80042fc <Update_Current_Val+0x23c>)
 80040f2:	f107 041c 	add.w	r4, r7, #28
 80040f6:	461d      	mov	r5, r3
 80040f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	6023      	str	r3, [r4, #0]
    uint16_t colors[] = {ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA, ILI9488_MAGENTA,
 8004104:	4b7e      	ldr	r3, [pc, #504]	@ (8004300 <Update_Current_Val+0x240>)
 8004106:	f107 0408 	add.w	r4, r7, #8
 800410a:	461d      	mov	r5, r3
 800410c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	8023      	strh	r3, [r4, #0]
                         ILI9488_MAROON, ILI9488_MAROON, ILI9488_MAROON, ILI9488_MAROON};
    int width = 90;
 8004114:	235a      	movs	r3, #90	@ 0x5a
 8004116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    int height = 30;
 800411a:	231e      	movs	r3, #30
 800411c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = 0; i < 9; i++)
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004126:	e098      	b.n	800425a <Update_Current_Val+0x19a>
    {
        if (idx_changed[i] == 1)
 8004128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d04a      	beq.n	80041cc <Update_Current_Val+0x10c>
        {
            fillRect(x_positions[i], y_positions[i], width, height, WHITE);
 8004136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	33a8      	adds	r3, #168	@ 0xa8
 800413e:	443b      	add	r3, r7
 8004140:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004144:	b218      	sxth	r0, r3
 8004146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	33a8      	adds	r3, #168	@ 0xa8
 800414e:	443b      	add	r3, r7
 8004150:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8004154:	b219      	sxth	r1, r3
 8004156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800415a:	b21a      	sxth	r2, r3
 800415c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004160:	b21b      	sxth	r3, r3
 8004162:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8004166:	9400      	str	r4, [sp, #0]
 8004168:	f7fc fffe 	bl	8001168 <fillRect>
            sprintf(buf, "%0.2fA", irms1_arr[i]);
 800416c:	4a65      	ldr	r2, [pc, #404]	@ (8004304 <Update_Current_Val+0x244>)
 800416e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f9ed 	bl	8000558 <__aeabi_f2d>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8004186:	4960      	ldr	r1, [pc, #384]	@ (8004308 <Update_Current_Val+0x248>)
 8004188:	f006 fc0e 	bl	800a9a8 <siprintf>
            LCD_Font(x_positions[i], y_texts[i], buf, _Open_Sans_Bold_26, 1, colors[i]);
 800418c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	33a8      	adds	r3, #168	@ 0xa8
 8004194:	443b      	add	r3, r7
 8004196:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800419a:	b298      	uxth	r0, r3
 800419c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	33a8      	adds	r3, #168	@ 0xa8
 80041a4:	443b      	add	r3, r7
 80041a6:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80041aa:	b299      	uxth	r1, r3
 80041ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	33a8      	adds	r3, #168	@ 0xa8
 80041b4:	443b      	add	r3, r7
 80041b6:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 80041ba:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2301      	movs	r3, #1
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4b51      	ldr	r3, [pc, #324]	@ (800430c <Update_Current_Val+0x24c>)
 80041c6:	f7fd fb7b 	bl	80018c0 <LCD_Font>
 80041ca:	e041      	b.n	8004250 <Update_Current_Val+0x190>
        }
        else if (NodeStatus_arr[i] == 0)
 80041cc:	4a50      	ldr	r2, [pc, #320]	@ (8004310 <Update_Current_Val+0x250>)
 80041ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d13a      	bne.n	8004250 <Update_Current_Val+0x190>
        {
            fillRect(x_positions[i], y_positions[i], width, height, WHITE);
 80041da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	33a8      	adds	r3, #168	@ 0xa8
 80041e2:	443b      	add	r3, r7
 80041e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80041e8:	b218      	sxth	r0, r3
 80041ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	33a8      	adds	r3, #168	@ 0xa8
 80041f2:	443b      	add	r3, r7
 80041f4:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80041f8:	b219      	sxth	r1, r3
 80041fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041fe:	b21a      	sxth	r2, r3
 8004200:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004204:	b21b      	sxth	r3, r3
 8004206:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 800420a:	9400      	str	r4, [sp, #0]
 800420c:	f7fc ffac 	bl	8001168 <fillRect>
            LCD_Font(x_positions[i] + 1, y_texts[i], "TAT", _Open_Sans_Bold_26, 1, colors[i]);
 8004210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	33a8      	adds	r3, #168	@ 0xa8
 8004218:	443b      	add	r3, r7
 800421a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800421e:	b29b      	uxth	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	b298      	uxth	r0, r3
 8004224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	33a8      	adds	r3, #168	@ 0xa8
 800422c:	443b      	add	r3, r7
 800422e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8004232:	b299      	uxth	r1, r3
 8004234:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	33a8      	adds	r3, #168	@ 0xa8
 800423c:	443b      	add	r3, r7
 800423e:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2301      	movs	r3, #1
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4b30      	ldr	r3, [pc, #192]	@ (800430c <Update_Current_Val+0x24c>)
 800424a:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <Update_Current_Val+0x254>)
 800424c:	f7fd fb38 	bl	80018c0 <LCD_Font>
    for (int i = 0; i < 9; i++)
 8004250:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004254:	3301      	adds	r3, #1
 8004256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800425a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800425e:	2b08      	cmp	r3, #8
 8004260:	f77f af62 	ble.w	8004128 <Update_Current_Val+0x68>
        }
    }
    if(idx_changed[9] == 1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3309      	adds	r3, #9
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d023      	beq.n	80042b6 <Update_Current_Val+0x1f6>
	{
		fillRect(370, 215, 85, 30, WHITE);
 800426e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	231e      	movs	r3, #30
 8004276:	2255      	movs	r2, #85	@ 0x55
 8004278:	21d7      	movs	r1, #215	@ 0xd7
 800427a:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 800427e:	f7fc ff73 	bl	8001168 <fillRect>
		sprintf(buf, "%0.2fA", irms1_arr[9]);
 8004282:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <Update_Current_Val+0x244>)
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc f966 	bl	8000558 <__aeabi_f2d>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8004294:	491c      	ldr	r1, [pc, #112]	@ (8004308 <Update_Current_Val+0x248>)
 8004296:	f006 fb87 	bl	800a9a8 <siprintf>
		LCD_Font(370, 240, buf, _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 800429a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800429e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	2301      	movs	r3, #1
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4b18      	ldr	r3, [pc, #96]	@ (800430c <Update_Current_Val+0x24c>)
 80042aa:	21f0      	movs	r1, #240	@ 0xf0
 80042ac:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80042b0:	f7fd fb06 	bl	80018c0 <LCD_Font>
	else if(NodeStatus_arr[9] == 0)
	{
		fillRect(370, 215, 85, 30, WHITE);
		LCD_Font(370, 240, "TAT", _Open_Sans_Bold_26, 1, ILI9488_MAROON);
	}
}
 80042b4:	e019      	b.n	80042ea <Update_Current_Val+0x22a>
	else if(NodeStatus_arr[9] == 0)
 80042b6:	4b16      	ldr	r3, [pc, #88]	@ (8004310 <Update_Current_Val+0x250>)
 80042b8:	7a5b      	ldrb	r3, [r3, #9]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <Update_Current_Val+0x22a>
		fillRect(370, 215, 85, 30, WHITE);
 80042be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	231e      	movs	r3, #30
 80042c6:	2255      	movs	r2, #85	@ 0x55
 80042c8:	21d7      	movs	r1, #215	@ 0xd7
 80042ca:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80042ce:	f7fc ff4b 	bl	8001168 <fillRect>
		LCD_Font(370, 240, "TAT", _Open_Sans_Bold_26, 1, ILI9488_MAROON);
 80042d2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2301      	movs	r3, #1
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <Update_Current_Val+0x24c>)
 80042de:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <Update_Current_Val+0x254>)
 80042e0:	21f0      	movs	r1, #240	@ 0xf0
 80042e2:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80042e6:	f7fd faeb 	bl	80018c0 <LCD_Font>
}
 80042ea:	bf00      	nop
 80042ec:	37a8      	adds	r7, #168	@ 0xa8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bdb0      	pop	{r4, r5, r7, pc}
 80042f2:	bf00      	nop
 80042f4:	0800ccd8 	.word	0x0800ccd8
 80042f8:	0800ccfc 	.word	0x0800ccfc
 80042fc:	0800cd20 	.word	0x0800cd20
 8004300:	0800cd44 	.word	0x0800cd44
 8004304:	20000598 	.word	0x20000598
 8004308:	0800cccc 	.word	0x0800cccc
 800430c:	0800f1ec 	.word	0x0800f1ec
 8004310:	2000058c 	.word	0x2000058c
 8004314:	0800ccd4 	.word	0x0800ccd4

08004318 <Send_Request_Lora>:
/***************************************************************************************
 	 ************* The function is used to send a request to node **************
*****************************************************************************************/
void Send_Request_Lora(uint8_t node)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
    uint8_t i;
    standby_mode();
 8004322:	f001 faff 	bl	8005924 <standby_mode>
    writeRegister(REG_FIFO_ADDR_PTR, 0);
 8004326:	2100      	movs	r1, #0
 8004328:	200d      	movs	r0, #13
 800432a:	f001 facb 	bl	80058c4 <writeRegister>
    writeRegister(REG_PAYLOAD_LENGTH, 0); // Reset kích thước payload
 800432e:	2100      	movs	r1, #0
 8004330:	2022      	movs	r0, #34	@ 0x22
 8004332:	f001 fac7 	bl	80058c4 <writeRegister>
    tx_lora_bf[0] = node;
 8004336:	4a11      	ldr	r2, [pc, #68]	@ (800437c <Send_Request_Lora+0x64>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	7013      	strb	r3, [r2, #0]
    tx_lora_bf[1] = 0xFD;
 800433c:	4b0f      	ldr	r3, [pc, #60]	@ (800437c <Send_Request_Lora+0x64>)
 800433e:	22fd      	movs	r2, #253	@ 0xfd
 8004340:	705a      	strb	r2, [r3, #1]
    tx_lora_bf[2] = 0xFF;
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <Send_Request_Lora+0x64>)
 8004344:	22ff      	movs	r2, #255	@ 0xff
 8004346:	709a      	strb	r2, [r3, #2]
    for (i = 0; i < 3; i++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e009      	b.n	8004362 <Send_Request_Lora+0x4a>
    {
        writeRegister(REG_FIFO, tx_lora_bf[i]);
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	4a0a      	ldr	r2, [pc, #40]	@ (800437c <Send_Request_Lora+0x64>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	4619      	mov	r1, r3
 8004356:	2000      	movs	r0, #0
 8004358:	f001 fab4 	bl	80058c4 <writeRegister>
    for (i = 0; i < 3; i++)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	3301      	adds	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d9f2      	bls.n	800434e <Send_Request_Lora+0x36>
    }
    writeRegister(REG_PAYLOAD_LENGTH, 3);  // kích thước payload
 8004368:	2103      	movs	r1, #3
 800436a:	2022      	movs	r0, #34	@ 0x22
 800436c:	f001 faaa 	bl	80058c4 <writeRegister>
    tx_mode();
 8004370:	f001 fae8 	bl	8005944 <tx_mode>
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000498 	.word	0x20000498

08004380 <Send_Lora_UpdateRelay>:
/*************************************************************************************************
******* The function is used to send relay status to node when the relay status is updated *******
**************************************************************************************************/
void Send_Lora_UpdateRelay(uint8_t node)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint32_t timeout = HAL_GetTick();
 800438a:	f001 fdaf 	bl	8005eec <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]
	uint32_t max_timeout = 50;
 8004390:	2332      	movs	r3, #50	@ 0x32
 8004392:	60fb      	str	r3, [r7, #12]
	sx1278_init(0x6c4000);
 8004394:	4826      	ldr	r0, [pc, #152]	@ (8004430 <Send_Lora_UpdateRelay+0xb0>)
 8004396:	f001 fb01 	bl	800599c <sx1278_init>
	standby_mode();
 800439a:	f001 fac3 	bl	8005924 <standby_mode>
	writeRegister(REG_FIFO_ADDR_PTR, 0);
 800439e:	2100      	movs	r1, #0
 80043a0:	200d      	movs	r0, #13
 80043a2:	f001 fa8f 	bl	80058c4 <writeRegister>
	writeRegister(REG_PAYLOAD_LENGTH, 0);
 80043a6:	2100      	movs	r1, #0
 80043a8:	2022      	movs	r0, #34	@ 0x22
 80043aa:	f001 fa8b 	bl	80058c4 <writeRegister>
	tx_lora_bf[0] = node;
 80043ae:	4a21      	ldr	r2, [pc, #132]	@ (8004434 <Send_Lora_UpdateRelay+0xb4>)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	7013      	strb	r3, [r2, #0]
	tx_lora_bf[1] = 0xFE;
 80043b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004434 <Send_Lora_UpdateRelay+0xb4>)
 80043b6:	22fe      	movs	r2, #254	@ 0xfe
 80043b8:	705a      	strb	r2, [r3, #1]
	tx_lora_bf[2] = (ReL_LoRa_Sen[node]);
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <Send_Lora_UpdateRelay+0xb8>)
 80043be:	5cd2      	ldrb	r2, [r2, r3]
 80043c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <Send_Lora_UpdateRelay+0xb4>)
 80043c2:	709a      	strb	r2, [r3, #2]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80043c4:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <Send_Lora_UpdateRelay+0xbc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2200      	movs	r2, #0
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24
	for (i = 0; i < 3; i++)
 80043cc:	2300      	movs	r3, #0
 80043ce:	75fb      	strb	r3, [r7, #23]
 80043d0:	e009      	b.n	80043e6 <Send_Lora_UpdateRelay+0x66>
	{
		writeRegister(0, tx_lora_bf[i]);
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	4a17      	ldr	r2, [pc, #92]	@ (8004434 <Send_Lora_UpdateRelay+0xb4>)
 80043d6:	5cd3      	ldrb	r3, [r2, r3]
 80043d8:	4619      	mov	r1, r3
 80043da:	2000      	movs	r0, #0
 80043dc:	f001 fa72 	bl	80058c4 <writeRegister>
	for (i = 0; i < 3; i++)
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	3301      	adds	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d9f2      	bls.n	80043d2 <Send_Lora_UpdateRelay+0x52>
	}
	writeRegister(REG_PAYLOAD_LENGTH, 3);  // kích thước payload
 80043ec:	2103      	movs	r1, #3
 80043ee:	2022      	movs	r0, #34	@ 0x22
 80043f0:	f001 fa68 	bl	80058c4 <writeRegister>
	tx_mode();
 80043f4:	f001 faa6 	bl	8005944 <tx_mode>

	while (!(readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK)) // wait until for the data is sent completely
 80043f8:	e007      	b.n	800440a <Send_Lora_UpdateRelay+0x8a>
	{
		if((HAL_GetTick() - timeout) > max_timeout)
 80043fa:	f001 fd77 	bl	8005eec <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	d308      	bcc.n	800441c <Send_Lora_UpdateRelay+0x9c>
	while (!(readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK)) // wait until for the data is sent completely
 800440a:	2012      	movs	r0, #18
 800440c:	f001 fa2c 	bl	8005868 <readRegister>
 8004410:	4603      	mov	r3, r0
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ef      	beq.n	80043fa <Send_Lora_UpdateRelay+0x7a>
 800441a:	e000      	b.n	800441e <Send_Lora_UpdateRelay+0x9e>
		{
			break;
 800441c:	bf00      	nop
		}
	}
	writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800441e:	2108      	movs	r1, #8
 8004420:	2012      	movs	r0, #18
 8004422:	f001 fa4f 	bl	80058c4 <writeRegister>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	006c4000 	.word	0x006c4000
 8004434:	20000498 	.word	0x20000498
 8004438:	2000047c 	.word	0x2000047c
 800443c:	200003c4 	.word	0x200003c4

08004440 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004450:	d113      	bne.n	800447a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		touchx = getX();
 8004452:	f001 fca7 	bl	8005da4 <getX>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800445c:	801a      	strh	r2, [r3, #0]
		touchy = getY();
 800445e:	f001 fcab 	bl	8005db8 <getY>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004468:	801a      	strh	r2, [r3, #0]
		debounce_100ms++;
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	3301      	adds	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004476:	801a      	strh	r2, [r3, #0]
	else if (htim->Instance == TIM3)
	{
		timer_cnt3 = true;
	}

}
 8004478:	e007      	b.n	800448a <HAL_TIM_PeriodElapsedCallback+0x4a>
	else if (htim->Instance == TIM3)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d102      	bne.n	800448a <HAL_TIM_PeriodElapsedCallback+0x4a>
		timer_cnt3 = true;
 8004484:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000454 	.word	0x20000454
 8004498:	20000456 	.word	0x20000456
 800449c:	20000490 	.word	0x20000490
 80044a0:	40000400 	.word	0x40000400
 80044a4:	20000493 	.word	0x20000493

080044a8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d106      	bne.n	80044c6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		case GPIO_PIN_3:
			writeRegister(0x12, 0x08);
 80044b8:	2108      	movs	r1, #8
 80044ba:	2012      	movs	r0, #18
 80044bc:	f001 fa02 	bl	80058c4 <writeRegister>
			rx_mode();
 80044c0:	f001 fa48 	bl	8005954 <rx_mode>
			break;
 80044c4:	bf00      	nop
	}
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <ConvertFloatAsBytes>:

/***********************************************************************
******* Function used to convert 4 byte data to float variable *******
************************************************************************/
void ConvertFloatAsBytes(float value, uint8_t *buffer)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	ed87 0a01 	vstr	s0, [r7, #4]
 80044d8:	6038      	str	r0, [r7, #0]
    memcpy(buffer, &value, sizeof(value)); // Copy float bytes to buffer
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a92      	ldr	r2, [pc, #584]	@ (8004744 <HAL_UART_RxCpltCallback+0x258>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	f040 811e 	bne.w	800473c <HAL_UART_RxCpltCallback+0x250>
    {
    	if(byte_rx == 0x83)
 8004500:	4b91      	ldr	r3, [pc, #580]	@ (8004748 <HAL_UART_RxCpltCallback+0x25c>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b83      	cmp	r3, #131	@ 0x83
 8004506:	d106      	bne.n	8004516 <HAL_UART_RxCpltCallback+0x2a>
    	{
    		ena_rx = 1;
 8004508:	4b90      	ldr	r3, [pc, #576]	@ (800474c <HAL_UART_RxCpltCallback+0x260>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
			Rx_Idx = 0;
 800450e:	4b90      	ldr	r3, [pc, #576]	@ (8004750 <HAL_UART_RxCpltCallback+0x264>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e039      	b.n	800458a <HAL_UART_RxCpltCallback+0x9e>
    	}
    	else if((byte_rx != 0x50) && (ena_rx == 1))
 8004516:	4b8c      	ldr	r3, [pc, #560]	@ (8004748 <HAL_UART_RxCpltCallback+0x25c>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b50      	cmp	r3, #80	@ 0x50
 800451c:	d011      	beq.n	8004542 <HAL_UART_RxCpltCallback+0x56>
 800451e:	4b8b      	ldr	r3, [pc, #556]	@ (800474c <HAL_UART_RxCpltCallback+0x260>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10d      	bne.n	8004542 <HAL_UART_RxCpltCallback+0x56>
    	{
    		receivedData[Rx_Idx] = byte_rx;
 8004526:	4b8a      	ldr	r3, [pc, #552]	@ (8004750 <HAL_UART_RxCpltCallback+0x264>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b86      	ldr	r3, [pc, #536]	@ (8004748 <HAL_UART_RxCpltCallback+0x25c>)
 800452e:	7819      	ldrb	r1, [r3, #0]
 8004530:	4b88      	ldr	r3, [pc, #544]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 8004532:	5499      	strb	r1, [r3, r2]
			Rx_Idx++;
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <HAL_UART_RxCpltCallback+0x264>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	4b84      	ldr	r3, [pc, #528]	@ (8004750 <HAL_UART_RxCpltCallback+0x264>)
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e023      	b.n	800458a <HAL_UART_RxCpltCallback+0x9e>
    	}
    	else if((byte_rx == 0x50) && (ena_rx == 1))
 8004542:	4b81      	ldr	r3, [pc, #516]	@ (8004748 <HAL_UART_RxCpltCallback+0x25c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b50      	cmp	r3, #80	@ 0x50
 8004548:	d11f      	bne.n	800458a <HAL_UART_RxCpltCallback+0x9e>
 800454a:	4b80      	ldr	r3, [pc, #512]	@ (800474c <HAL_UART_RxCpltCallback+0x260>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d11b      	bne.n	800458a <HAL_UART_RxCpltCallback+0x9e>
    	{
    		if(receivedData[0] == 0xFE)
 8004552:	4b80      	ldr	r3, [pc, #512]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2bfe      	cmp	r3, #254	@ 0xfe
 8004558:	d104      	bne.n	8004564 <HAL_UART_RxCpltCallback+0x78>
    		{
    			Buzzer = receivedData[1];
 800455a:	4b7e      	ldr	r3, [pc, #504]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 800455c:	785a      	ldrb	r2, [r3, #1]
 800455e:	4b7e      	ldr	r3, [pc, #504]	@ (8004758 <HAL_UART_RxCpltCallback+0x26c>)
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e00f      	b.n	8004584 <HAL_UART_RxCpltCallback+0x98>
    		}
    		else if(receivedData[0] == 0xFD)
 8004564:	4b7b      	ldr	r3, [pc, #492]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2bfd      	cmp	r3, #253	@ 0xfd
 800456a:	d10b      	bne.n	8004584 <HAL_UART_RxCpltCallback+0x98>
    		{
    			Ctr_Dev = ((uint16_t)receivedData[1] << 8) | (uint16_t)receivedData[2];
 800456c:	4b79      	ldr	r3, [pc, #484]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	b21a      	sxth	r2, r3
 8004574:	4b77      	ldr	r3, [pc, #476]	@ (8004754 <HAL_UART_RxCpltCallback+0x268>)
 8004576:	789b      	ldrb	r3, [r3, #2]
 8004578:	b21b      	sxth	r3, r3
 800457a:	4313      	orrs	r3, r2
 800457c:	b21b      	sxth	r3, r3
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b76      	ldr	r3, [pc, #472]	@ (800475c <HAL_UART_RxCpltCallback+0x270>)
 8004582:	801a      	strh	r2, [r3, #0]
    		}
    		ena_rx = 0;
 8004584:	4b71      	ldr	r3, [pc, #452]	@ (800474c <HAL_UART_RxCpltCallback+0x260>)
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
    	}
    	if(Buzzer_Old != Buzzer)
 800458a:	4b75      	ldr	r3, [pc, #468]	@ (8004760 <HAL_UART_RxCpltCallback+0x274>)
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	4b72      	ldr	r3, [pc, #456]	@ (8004758 <HAL_UART_RxCpltCallback+0x26c>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	f000 80cb 	beq.w	800472e <HAL_UART_RxCpltCallback+0x242>
		{
			if (0 == Buzzer)
 8004598:	4b6f      	ldr	r3, [pc, #444]	@ (8004758 <HAL_UART_RxCpltCallback+0x26c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d161      	bne.n	8004664 <HAL_UART_RxCpltCallback+0x178>
			{
				BUZZER_OFF;
 80045a0:	2201      	movs	r2, #1
 80045a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80045a6:	486f      	ldr	r0, [pc, #444]	@ (8004764 <HAL_UART_RxCpltCallback+0x278>)
 80045a8:	f002 fb68 	bl	8006c7c <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_RED);
 80045ac:	4b6e      	ldr	r3, [pc, #440]	@ (8004768 <HAL_UART_RxCpltCallback+0x27c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b6e      	ldr	r3, [pc, #440]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	336e      	adds	r3, #110	@ 0x6e
 80045bc:	b298      	uxth	r0, r3
 80045be:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_UART_RxCpltCallback+0x284>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3332      	adds	r3, #50	@ 0x32
 80045ce:	b299      	uxth	r1, r3
 80045d0:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	3332      	adds	r3, #50	@ 0x32
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	331e      	adds	r3, #30
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f240 74ff 	movw	r4, #2047	@ 0x7ff
 80045e4:	9401      	str	r4, [sp, #4]
 80045e6:	2405      	movs	r4, #5
 80045e8:	9400      	str	r4, [sp, #0]
 80045ea:	f7fd fb2e 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: TAT", _Open_Sans_Bold_26, 1, BLACK);
 80045ee:	4b5e      	ldr	r3, [pc, #376]	@ (8004768 <HAL_UART_RxCpltCallback+0x27c>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	4413      	add	r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	338c      	adds	r3, #140	@ 0x8c
 80045fe:	b29e      	uxth	r6, r3
 8004600:	4b5b      	ldr	r3, [pc, #364]	@ (8004770 <HAL_UART_RxCpltCallback+0x284>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb ff94 	bl	8000534 <__aeabi_i2d>
 800460c:	4604      	mov	r4, r0
 800460e:	460d      	mov	r5, r1
 8004610:	4b58      	ldr	r3, [pc, #352]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fb ff8d 	bl	8000534 <__aeabi_i2d>
 800461a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800461e:	4b56      	ldr	r3, [pc, #344]	@ (8004778 <HAL_UART_RxCpltCallback+0x28c>)
 8004620:	f7fb fff2 	bl	8000608 <__aeabi_dmul>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	f7fb fe34 	bl	800029c <__adddf3>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4620      	mov	r0, r4
 800463a:	4629      	mov	r1, r5
 800463c:	f7fb fe2e 	bl	800029c <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	f7fc fab6 	bl	8000bb8 <__aeabi_d2uiz>
 800464c:	4603      	mov	r3, r0
 800464e:	b299      	uxth	r1, r3
 8004650:	2300      	movs	r3, #0
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2301      	movs	r3, #1
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	4b48      	ldr	r3, [pc, #288]	@ (800477c <HAL_UART_RxCpltCallback+0x290>)
 800465a:	4a49      	ldr	r2, [pc, #292]	@ (8004780 <HAL_UART_RxCpltCallback+0x294>)
 800465c:	4630      	mov	r0, r6
 800465e:	f7fd f92f 	bl	80018c0 <LCD_Font>
 8004662:	e060      	b.n	8004726 <HAL_UART_RxCpltCallback+0x23a>
			}
			else
			{
				BUZZER_ON;
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800466a:	483e      	ldr	r0, [pc, #248]	@ (8004764 <HAL_UART_RxCpltCallback+0x278>)
 800466c:	f002 fb06 	bl	8006c7c <HAL_GPIO_WritePin>
				LCD_Rect_Round_Fill(Start_x + Wigth_Bt + 110, Start_y + High_Bt + 50, Wigth_Bt + 50, High_Bt + 30, 5, ILI9488_PINK);
 8004670:	4b3d      	ldr	r3, [pc, #244]	@ (8004768 <HAL_UART_RxCpltCallback+0x27c>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	4413      	add	r3, r2
 800467c:	b29b      	uxth	r3, r3
 800467e:	336e      	adds	r3, #110	@ 0x6e
 8004680:	b298      	uxth	r0, r3
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_UART_RxCpltCallback+0x284>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4413      	add	r3, r2
 800468e:	b29b      	uxth	r3, r3
 8004690:	3332      	adds	r3, #50	@ 0x32
 8004692:	b299      	uxth	r1, r3
 8004694:	4b35      	ldr	r3, [pc, #212]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	3332      	adds	r3, #50	@ 0x32
 800469a:	b29a      	uxth	r2, r3
 800469c:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	331e      	adds	r3, #30
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80046a8:	9401      	str	r4, [sp, #4]
 80046aa:	2405      	movs	r4, #5
 80046ac:	9400      	str	r4, [sp, #0]
 80046ae:	f7fd facc 	bl	8001c4a <LCD_Rect_Round_Fill>
				LCD_Font(Start_x + Wigth_Bt + 140, Start_y * 2 + 1.2 * High_Bt * 2, "COI: BAT", _Open_Sans_Bold_26, 1, BLACK);
 80046b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004768 <HAL_UART_RxCpltCallback+0x27c>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b2c      	ldr	r3, [pc, #176]	@ (800476c <HAL_UART_RxCpltCallback+0x280>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	4413      	add	r3, r2
 80046be:	b29b      	uxth	r3, r3
 80046c0:	338c      	adds	r3, #140	@ 0x8c
 80046c2:	b29e      	uxth	r6, r3
 80046c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <HAL_UART_RxCpltCallback+0x284>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fb ff32 	bl	8000534 <__aeabi_i2d>
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	4b27      	ldr	r3, [pc, #156]	@ (8004774 <HAL_UART_RxCpltCallback+0x288>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb ff2b 	bl	8000534 <__aeabi_i2d>
 80046de:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80046e2:	4b25      	ldr	r3, [pc, #148]	@ (8004778 <HAL_UART_RxCpltCallback+0x28c>)
 80046e4:	f7fb ff90 	bl	8000608 <__aeabi_dmul>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	f7fb fdd2 	bl	800029c <__adddf3>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fb fdcc 	bl	800029c <__adddf3>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	f7fc fa54 	bl	8000bb8 <__aeabi_d2uiz>
 8004710:	4603      	mov	r3, r0
 8004712:	b299      	uxth	r1, r3
 8004714:	2300      	movs	r3, #0
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	2301      	movs	r3, #1
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	4b17      	ldr	r3, [pc, #92]	@ (800477c <HAL_UART_RxCpltCallback+0x290>)
 800471e:	4a19      	ldr	r2, [pc, #100]	@ (8004784 <HAL_UART_RxCpltCallback+0x298>)
 8004720:	4630      	mov	r0, r6
 8004722:	f7fd f8cd 	bl	80018c0 <LCD_Font>
			}
			Buzzer_Old = Buzzer;
 8004726:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <HAL_UART_RxCpltCallback+0x26c>)
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <HAL_UART_RxCpltCallback+0x274>)
 800472c:	701a      	strb	r2, [r3, #0]
		}
    	/* Update new values */
		Ctr_Dev_Old = Ctr_Dev;
 800472e:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_UART_RxCpltCallback+0x270>)
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <HAL_UART_RxCpltCallback+0x29c>)
 8004734:	801a      	strh	r2, [r3, #0]
		Flag_Uart = true;
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_UART_RxCpltCallback+0x2a0>)
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
    }
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004744:	40011000 	.word	0x40011000
 8004748:	20000610 	.word	0x20000610
 800474c:	20000611 	.word	0x20000611
 8004750:	20000617 	.word	0x20000617
 8004754:	20000614 	.word	0x20000614
 8004758:	2000048e 	.word	0x2000048e
 800475c:	20000486 	.word	0x20000486
 8004760:	2000048f 	.word	0x2000048f
 8004764:	40020000 	.word	0x40020000
 8004768:	20000000 	.word	0x20000000
 800476c:	20000002 	.word	0x20000002
 8004770:	20000001 	.word	0x20000001
 8004774:	20000003 	.word	0x20000003
 8004778:	3ff33333 	.word	0x3ff33333
 800477c:	0800f1ec 	.word	0x0800f1ec
 8004780:	0800cc8c 	.word	0x0800cc8c
 8004784:	0800cc98 	.word	0x0800cc98
 8004788:	20000488 	.word	0x20000488
 800478c:	20000495 	.word	0x20000495

08004790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004796:	f001 fb43 	bl	8005e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800479a:	f000 fb89 	bl	8004eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800479e:	f000 fd75 	bl	800528c <MX_GPIO_Init>
  MX_DMA_Init();
 80047a2:	f000 fd53 	bl	800524c <MX_DMA_Init>
  MX_TIM2_Init();
 80047a6:	f000 fc8d 	bl	80050c4 <MX_TIM2_Init>
  MX_SPI2_Init();
 80047aa:	f000 fc1f 	bl	8004fec <MX_SPI2_Init>
  MX_SPI1_Init();
 80047ae:	f000 fbe7 	bl	8004f80 <MX_SPI1_Init>
  MX_SPI3_Init();
 80047b2:	f000 fc51 	bl	8005058 <MX_SPI3_Init>
  MX_TIM3_Init();
 80047b6:	f000 fcd1 	bl	800515c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80047ba:	f000 fd1d 	bl	80051f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047c4:	4837      	ldr	r0, [pc, #220]	@ (80048a4 <main+0x114>)
 80047c6:	f002 fa59 	bl	8006c7c <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	201c      	movs	r0, #28
 80047d0:	f001 fc97 	bl	8006102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047d4:	201c      	movs	r0, #28
 80047d6:	f001 fcb0 	bl	800613a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 80047da:	4833      	ldr	r0, [pc, #204]	@ (80048a8 <main+0x118>)
 80047dc:	f003 ff8a 	bl	80086f4 <HAL_TIM_Base_Start_IT>
  ILI9488_Init();
 80047e0:	f7fc fb82 	bl	8000ee8 <ILI9488_Init>
  setRotation(1);
 80047e4:	2001      	movs	r0, #1
 80047e6:	f7fc fd57 	bl	8001298 <setRotation>
  sx1278_init(0x6c4000);
 80047ea:	4830      	ldr	r0, [pc, #192]	@ (80048ac <main+0x11c>)
 80047ec:	f001 f8d6 	bl	800599c <sx1278_init>
  HAL_TIM_Base_Start_IT(&htim3);
 80047f0:	482f      	ldr	r0, [pc, #188]	@ (80048b0 <main+0x120>)
 80047f2:	f003 ff7f 	bl	80086f4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &byte_rx, 1);
 80047f6:	2201      	movs	r2, #1
 80047f8:	492e      	ldr	r1, [pc, #184]	@ (80048b4 <main+0x124>)
 80047fa:	482f      	ldr	r0, [pc, #188]	@ (80048b8 <main+0x128>)
 80047fc:	f004 fc3f 	bl	800907e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		/* Update Ctrl_Dev variable is received from ESP */
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8004800:	492e      	ldr	r1, [pc, #184]	@ (80048bc <main+0x12c>)
 8004802:	482f      	ldr	r0, [pc, #188]	@ (80048c0 <main+0x130>)
 8004804:	f7fd fa88 	bl	8001d18 <Check_Uart_update>

		if((timer_cnt3 == true) && (Flag_Uart == false))
 8004808:	4b2e      	ldr	r3, [pc, #184]	@ (80048c4 <main+0x134>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 814c 	beq.w	8004aac <main+0x31c>
 8004814:	4b2c      	ldr	r3, [pc, #176]	@ (80048c8 <main+0x138>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8143 	beq.w	8004aac <main+0x31c>
		{
			if ((readRegister(0x12) & 0x40) == 0x40)  //////////neu co nhan duoc du lieu
 8004826:	2012      	movs	r0, #18
 8004828:	f001 f81e 	bl	8005868 <readRegister>
 800482c:	4603      	mov	r3, r0
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	f040 80f4 	bne.w	8004a20 <main+0x290>
			{
				writeRegister(0x12, readRegister(0x12) | 0x40); // xoa co ngat
 8004838:	2012      	movs	r0, #18
 800483a:	f001 f815 	bl	8005868 <readRegister>
 800483e:	4603      	mov	r3, r0
 8004840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004844:	b2db      	uxtb	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	2012      	movs	r0, #18
 800484a:	f001 f83b 	bl	80058c4 <writeRegister>
				writeRegister(0x0d, readRegister(0x10)); // dua ve vi tri dau trong bo dem de doc
 800484e:	2010      	movs	r0, #16
 8004850:	f001 f80a 	bl	8005868 <readRegister>
 8004854:	4603      	mov	r3, r0
 8004856:	4619      	mov	r1, r3
 8004858:	200d      	movs	r0, #13
 800485a:	f001 f833 	bl	80058c4 <writeRegister>

				if (readRegister(0) == Node_IsCommunicating) // neu nhan dung gia tri cua node dang giao tiep
 800485e:	2000      	movs	r0, #0
 8004860:	f001 f802 	bl	8005868 <readRegister>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <main+0x13c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	f040 80d7 	bne.w	8004a20 <main+0x290>
				{
					Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8004872:	4912      	ldr	r1, [pc, #72]	@ (80048bc <main+0x12c>)
 8004874:	4812      	ldr	r0, [pc, #72]	@ (80048c0 <main+0x130>)
 8004876:	f7fd fa4f 	bl	8001d18 <Check_Uart_update>
					check_node[Node_IsCommunicating] = 1; // da nhan duoc du lieu thi set len 1
 800487a:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <main+0x13c>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <main+0x140>)
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]
					NodeStatus_arr[Node_IsCommunicating] = 1; /// cho trang thai node dang giao tiep bang 1
 8004886:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <main+0x13c>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <main+0x144>)
 800488e:	2101      	movs	r1, #1
 8004890:	5499      	strb	r1, [r3, r2]
					request_error[Node_IsCommunicating] = 0; /// reset so lan loi
 8004892:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <main+0x13c>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	4b0f      	ldr	r3, [pc, #60]	@ (80048d8 <main+0x148>)
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

					/* nhan du lieu vao bo dem*/
					for (unsigned char i = 0; i < 17; i++) {
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e030      	b.n	8004906 <main+0x176>
 80048a4:	40020000 	.word	0x40020000
 80048a8:	2000037c 	.word	0x2000037c
 80048ac:	006c4000 	.word	0x006c4000
 80048b0:	200003c4 	.word	0x200003c4
 80048b4:	20000610 	.word	0x20000610
 80048b8:	2000040c 	.word	0x2000040c
 80048bc:	20000580 	.word	0x20000580
 80048c0:	20000470 	.word	0x20000470
 80048c4:	20000493 	.word	0x20000493
 80048c8:	20000495 	.word	0x20000495
 80048cc:	20000564 	.word	0x20000564
 80048d0:	20000574 	.word	0x20000574
 80048d4:	2000058c 	.word	0x2000058c
 80048d8:	20000568 	.word	0x20000568
						data_node[Node_IsCommunicating][i] = readRegister(0);
 80048dc:	4ba0      	ldr	r3, [pc, #640]	@ (8004b60 <main+0x3d0>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	461d      	mov	r5, r3
 80048e2:	7bfc      	ldrb	r4, [r7, #15]
 80048e4:	2000      	movs	r0, #0
 80048e6:	f000 ffbf 	bl	8005868 <readRegister>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4619      	mov	r1, r3
 80048ee:	4a9d      	ldr	r2, [pc, #628]	@ (8004b64 <main+0x3d4>)
 80048f0:	462b      	mov	r3, r5
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	442b      	add	r3, r5
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	4423      	add	r3, r4
 80048fc:	460a      	mov	r2, r1
 80048fe:	701a      	strb	r2, [r3, #0]
					for (unsigned char i = 0; i < 17; i++) {
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	3301      	adds	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d9e7      	bls.n	80048dc <main+0x14c>
					}

					/*tinh gia tri dong cam bien 1*/
					uint16_t dong_nguyen = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	817b      	strh	r3, [r7, #10]
					dong_nguyen = (data_node[Node_IsCommunicating][0] - 48) * 1000
 8004910:	4b93      	ldr	r3, [pc, #588]	@ (8004b60 <main+0x3d0>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	4a93      	ldr	r2, [pc, #588]	@ (8004b64 <main+0x3d4>)
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	3b30      	subs	r3, #48	@ 0x30
							+ (data_node[Node_IsCommunicating][1] - 48) * 100
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	0152      	lsls	r2, r2, #5
 800492c:	1ad2      	subs	r2, r2, r3
 800492e:	0092      	lsls	r2, r2, #2
 8004930:	4413      	add	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	b29a      	uxth	r2, r3
 8004936:	4b8a      	ldr	r3, [pc, #552]	@ (8004b60 <main+0x3d0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	4989      	ldr	r1, [pc, #548]	@ (8004b64 <main+0x3d4>)
 800493e:	4603      	mov	r3, r0
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4403      	add	r3, r0
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3301      	adds	r3, #1
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	3b30      	subs	r3, #48	@ 0x30
 800494e:	b29b      	uxth	r3, r3
 8004950:	4619      	mov	r1, r3
 8004952:	0089      	lsls	r1, r1, #2
 8004954:	440b      	add	r3, r1
 8004956:	4619      	mov	r1, r3
 8004958:	0088      	lsls	r0, r1, #2
 800495a:	4619      	mov	r1, r3
 800495c:	4603      	mov	r3, r0
 800495e:	440b      	add	r3, r1
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	b29b      	uxth	r3, r3
 8004964:	4413      	add	r3, r2
 8004966:	b29a      	uxth	r2, r3
							+ (data_node[Node_IsCommunicating][2] - 48) * 10
 8004968:	4b7d      	ldr	r3, [pc, #500]	@ (8004b60 <main+0x3d0>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	497d      	ldr	r1, [pc, #500]	@ (8004b64 <main+0x3d4>)
 8004970:	4603      	mov	r3, r0
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4403      	add	r3, r0
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3302      	adds	r3, #2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	3b30      	subs	r3, #48	@ 0x30
 8004980:	b29b      	uxth	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	0089      	lsls	r1, r1, #2
 8004986:	440b      	add	r3, r1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	4413      	add	r3, r2
 800498e:	b29a      	uxth	r2, r3
							+ (data_node[Node_IsCommunicating][3] - 48);
 8004990:	4b73      	ldr	r3, [pc, #460]	@ (8004b60 <main+0x3d0>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	4973      	ldr	r1, [pc, #460]	@ (8004b64 <main+0x3d4>)
 8004998:	4603      	mov	r3, r0
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4403      	add	r3, r0
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	3303      	adds	r3, #3
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4413      	add	r3, r2
 80049a8:	b29b      	uxth	r3, r3
					dong_nguyen = (data_node[Node_IsCommunicating][0] - 48) * 1000
 80049aa:	3b30      	subs	r3, #48	@ 0x30
 80049ac:	817b      	strh	r3, [r7, #10]
					irms1_arr[Node_IsCommunicating] = (float) dong_nguyen / 100.0;
 80049ae:	897b      	ldrh	r3, [r7, #10]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b8:	4b69      	ldr	r3, [pc, #420]	@ (8004b60 <main+0x3d0>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8004b68 <main+0x3d8>
 80049c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c4:	4a69      	ldr	r2, [pc, #420]	@ (8004b6c <main+0x3dc>)
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	edc3 7a00 	vstr	s15, [r3]
					if (irms1_arr[Node_IsCommunicating] >= 50)
 80049ce:	4b64      	ldr	r3, [pc, #400]	@ (8004b60 <main+0x3d0>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	4a66      	ldr	r2, [pc, #408]	@ (8004b6c <main+0x3dc>)
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	edd3 7a00 	vldr	s15, [r3]
 80049dc:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8004b70 <main+0x3e0>
 80049e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e8:	db06      	blt.n	80049f8 <main+0x268>
					{
						irms1_arr[Node_IsCommunicating] = 50;
 80049ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004b60 <main+0x3d0>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4a5f      	ldr	r2, [pc, #380]	@ (8004b6c <main+0x3dc>)
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004b74 <main+0x3e4>)
 80049f6:	601a      	str	r2, [r3, #0]
					}
					/*lay trang thai relay node gui len*/
					RelayStatus_arr_STM[Node_IsCommunicating] = data_node[Node_IsCommunicating][16];
 80049f8:	4b59      	ldr	r3, [pc, #356]	@ (8004b60 <main+0x3d0>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	4b58      	ldr	r3, [pc, #352]	@ (8004b60 <main+0x3d0>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	4a57      	ldr	r2, [pc, #348]	@ (8004b64 <main+0x3d4>)
 8004a06:	460b      	mov	r3, r1
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	3310      	adds	r3, #16
 8004a12:	781a      	ldrb	r2, [r3, #0]
 8004a14:	4b58      	ldr	r3, [pc, #352]	@ (8004b78 <main+0x3e8>)
 8004a16:	541a      	strb	r2, [r3, r0]
					Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8004a18:	4957      	ldr	r1, [pc, #348]	@ (8004b78 <main+0x3e8>)
 8004a1a:	4858      	ldr	r0, [pc, #352]	@ (8004b7c <main+0x3ec>)
 8004a1c:	f7fd f97c 	bl	8001d18 <Check_Uart_update>
				}
			}

			/*neu ko nhan duoc tin hieu tu node, tang so lan loi va tinh toan trang thai node*/
			if (check_node[Node_IsCommunicating] == 0)
 8004a20:	4b4f      	ldr	r3, [pc, #316]	@ (8004b60 <main+0x3d0>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b56      	ldr	r3, [pc, #344]	@ (8004b80 <main+0x3f0>)
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11a      	bne.n	8004a64 <main+0x2d4>
			{
				request_error[Node_IsCommunicating]++;
 8004a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004b60 <main+0x3d0>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	4a54      	ldr	r2, [pc, #336]	@ (8004b84 <main+0x3f4>)
 8004a34:	5cd2      	ldrb	r2, [r2, r3]
 8004a36:	3201      	adds	r2, #1
 8004a38:	b2d1      	uxtb	r1, r2
 8004a3a:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <main+0x3f4>)
 8004a3c:	54d1      	strb	r1, [r2, r3]
				if (request_error[Node_IsCommunicating] >= ER_LIMIT_VLUE)
 8004a3e:	4b48      	ldr	r3, [pc, #288]	@ (8004b60 <main+0x3d0>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b4f      	ldr	r3, [pc, #316]	@ (8004b84 <main+0x3f4>)
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d90b      	bls.n	8004a64 <main+0x2d4>
				{
					request_error[Node_IsCommunicating] = ER_LIMIT_VLUE;
 8004a4c:	4b44      	ldr	r3, [pc, #272]	@ (8004b60 <main+0x3d0>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b4c      	ldr	r3, [pc, #304]	@ (8004b84 <main+0x3f4>)
 8004a54:	2102      	movs	r1, #2
 8004a56:	5499      	strb	r1, [r3, r2]
					NodeStatus_arr[Node_IsCommunicating] = 0;
 8004a58:	4b41      	ldr	r3, [pc, #260]	@ (8004b60 <main+0x3d0>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004b88 <main+0x3f8>)
 8004a60:	2100      	movs	r1, #0
 8004a62:	5499      	strb	r1, [r3, r2]
				}
			}

			Node_IsCommunicating++;
 8004a64:	4b3e      	ldr	r3, [pc, #248]	@ (8004b60 <main+0x3d0>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b60 <main+0x3d0>)
 8004a6e:	701a      	strb	r2, [r3, #0]
			if (Node_IsCommunicating >= 10)
 8004a70:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <main+0x3d0>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b09      	cmp	r3, #9
 8004a76:	d902      	bls.n	8004a7e <main+0x2ee>
			{
				Node_IsCommunicating = 0;
 8004a78:	4b39      	ldr	r3, [pc, #228]	@ (8004b60 <main+0x3d0>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
			}
			Send_Request_Lora(Node_IsCommunicating);
 8004a7e:	4b38      	ldr	r3, [pc, #224]	@ (8004b60 <main+0x3d0>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff fc48 	bl	8004318 <Send_Request_Lora>
			check_node[Node_IsCommunicating] = 0;
 8004a88:	4b35      	ldr	r3, [pc, #212]	@ (8004b60 <main+0x3d0>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b80 <main+0x3f0>)
 8004a90:	2100      	movs	r1, #0
 8004a92:	5499      	strb	r1, [r3, r2]
			Display_Updated_Flag = true;
 8004a94:	4b3d      	ldr	r3, [pc, #244]	@ (8004b8c <main+0x3fc>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
			timer_counter++;
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b90 <main+0x400>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004b90 <main+0x400>)
 8004aa4:	701a      	strb	r2, [r3, #0]
			timer_cnt3 = false;
 8004aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8004b94 <main+0x404>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
		}

		/*------------ Processing when the button pressed -----------*/
		Touch_XY();
 8004aac:	f7fe fe38 	bl	8003720 <Touch_XY>

		if(StDisplay == DISPLAY_SCREEN)
 8004ab0:	4b39      	ldr	r3, [pc, #228]	@ (8004b98 <main+0x408>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <main+0x356>
		{
			if(Display_Updated_Flag == true)
 8004ab8:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <main+0x3fc>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <main+0x356>
			{
				// Check if the new value with the old value is different - send to Esp
				stDataChanged = isIrmsChanged(irms1_old, irms1_arr, &index_data_changed[0]);
 8004ac0:	4a36      	ldr	r2, [pc, #216]	@ (8004b9c <main+0x40c>)
 8004ac2:	492a      	ldr	r1, [pc, #168]	@ (8004b6c <main+0x3dc>)
 8004ac4:	4836      	ldr	r0, [pc, #216]	@ (8004ba0 <main+0x410>)
 8004ac6:	f7fd f9c7 	bl	8001e58 <isIrmsChanged>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b35      	ldr	r3, [pc, #212]	@ (8004ba4 <main+0x414>)
 8004ad0:	701a      	strb	r2, [r3, #0]
				if(stDataChanged)
 8004ad2:	4b34      	ldr	r3, [pc, #208]	@ (8004ba4 <main+0x414>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <main+0x350>
				{
					Update_Current_Val(&index_data_changed[0]);
 8004ada:	4830      	ldr	r0, [pc, #192]	@ (8004b9c <main+0x40c>)
 8004adc:	f7ff faf0 	bl	80040c0 <Update_Current_Val>
				}
				Display_Updated_Flag = false;
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <main+0x3fc>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(StDisplay == CTRL_SCREEN_1)
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <main+0x408>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10a      	bne.n	8004b04 <main+0x374>
		{
			if(Display_Updated_Flag == true)
 8004aee:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <main+0x3fc>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <main+0x374>
			{
				Update_StatusBt(&RelayStatus_arr_STM[0], &RelayStatus_arr_ESP[0]);
 8004af6:	4921      	ldr	r1, [pc, #132]	@ (8004b7c <main+0x3ec>)
 8004af8:	481f      	ldr	r0, [pc, #124]	@ (8004b78 <main+0x3e8>)
 8004afa:	f7fd fc17 	bl	800232c <Update_StatusBt>
				Display_Updated_Flag = false;
 8004afe:	4b23      	ldr	r3, [pc, #140]	@ (8004b8c <main+0x3fc>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
			}
		}
		/* Update data after the center circuit has received 10 data frames from the nodes */
		if(timer_counter >= 9)
 8004b04:	4b22      	ldr	r3, [pc, #136]	@ (8004b90 <main+0x400>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	f67f ae79 	bls.w	8004800 <main+0x70>
		{
			uint8_t idx_bf;
			uint8_t idx_relay;
			uint8_t Ctr_Dev_Temp[2]={0, 0};
 8004b0e:	2300      	movs	r3, #0
 8004b10:	813b      	strh	r3, [r7, #8]
			uint8_t StNode_Temp[2]={0, 0};
 8004b12:	2300      	movs	r3, #0
 8004b14:	80bb      	strh	r3, [r7, #4]

			if(Flag == false)               /* Send only one the first time */
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <main+0x418>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f083 0301 	eor.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 80db 	beq.w	8004cdc <main+0x54c>
			{
				if(StDisplay == DISPLAY_SCREEN)
 8004b26:	4b1c      	ldr	r3, [pc, #112]	@ (8004b98 <main+0x408>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <main+0x3a2>
				{
					Default_Display();
 8004b2e:	f7fd f9ed 	bl	8001f0c <Default_Display>
				}
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	737b      	strb	r3, [r7, #13]
 8004b36:	e067      	b.n	8004c08 <main+0x478>
				{
					if(RelayStatus_arr_STM[idx_relay] == 0)
 8004b38:	7b7b      	ldrb	r3, [r7, #13]
 8004b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004b78 <main+0x3e8>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d136      	bne.n	8004bb0 <main+0x420>
					{
						CLEAR_BIT_USER(Ctr_Dev, idx_relay);
 8004b42:	7b7b      	ldrb	r3, [r7, #13]
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	4b16      	ldr	r3, [pc, #88]	@ (8004bac <main+0x41c>)
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <main+0x41c>)
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	e033      	b.n	8004bc6 <main+0x436>
 8004b5e:	bf00      	nop
 8004b60:	20000564 	.word	0x20000564
 8004b64:	2000049c 	.word	0x2000049c
 8004b68:	42c80000 	.word	0x42c80000
 8004b6c:	20000598 	.word	0x20000598
 8004b70:	42480000 	.word	0x42480000
 8004b74:	42480000 	.word	0x42480000
 8004b78:	20000580 	.word	0x20000580
 8004b7c:	20000470 	.word	0x20000470
 8004b80:	20000574 	.word	0x20000574
 8004b84:	20000568 	.word	0x20000568
 8004b88:	2000058c 	.word	0x2000058c
 8004b8c:	2000046d 	.word	0x2000046d
 8004b90:	20000492 	.word	0x20000492
 8004b94:	20000493 	.word	0x20000493
 8004b98:	2000046c 	.word	0x2000046c
 8004b9c:	20000618 	.word	0x20000618
 8004ba0:	200005c0 	.word	0x200005c0
 8004ba4:	20000622 	.word	0x20000622
 8004ba8:	20000494 	.word	0x20000494
 8004bac:	20000486 	.word	0x20000486
					}
					else
					{
						SET_BIT_USER(Ctr_Dev, idx_relay);
 8004bb0:	7b7b      	ldrb	r3, [r7, #13]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b94      	ldr	r3, [pc, #592]	@ (8004e0c <main+0x67c>)
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	4b92      	ldr	r3, [pc, #584]	@ (8004e0c <main+0x67c>)
 8004bc4:	801a      	strh	r2, [r3, #0]
					}

					if(NodeStatus_arr[idx_relay] == 0)
 8004bc6:	7b7b      	ldrb	r3, [r7, #13]
 8004bc8:	4a91      	ldr	r2, [pc, #580]	@ (8004e10 <main+0x680>)
 8004bca:	5cd3      	ldrb	r3, [r2, r3]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <main+0x45c>
					{
						CLEAR_BIT_USER(StNode, idx_relay);
 8004bd0:	7b7b      	ldrb	r3, [r7, #13]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	4b8d      	ldr	r3, [pc, #564]	@ (8004e14 <main+0x684>)
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	4013      	ands	r3, r2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	4b8b      	ldr	r3, [pc, #556]	@ (8004e14 <main+0x684>)
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	e00a      	b.n	8004c02 <main+0x472>
					}
					else
					{
						SET_BIT_USER(StNode, idx_relay);
 8004bec:	7b7b      	ldrb	r3, [r7, #13]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	4b87      	ldr	r3, [pc, #540]	@ (8004e14 <main+0x684>)
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	4b85      	ldr	r3, [pc, #532]	@ (8004e14 <main+0x684>)
 8004c00:	801a      	strh	r2, [r3, #0]
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004c02:	7b7b      	ldrb	r3, [r7, #13]
 8004c04:	3301      	adds	r3, #1
 8004c06:	737b      	strb	r3, [r7, #13]
 8004c08:	7b7b      	ldrb	r3, [r7, #13]
 8004c0a:	2b09      	cmp	r3, #9
 8004c0c:	d994      	bls.n	8004b38 <main+0x3a8>
					}
				}

				Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	2302      	movs	r3, #2
 8004c14:	4a80      	ldr	r2, [pc, #512]	@ (8004e18 <main+0x688>)
 8004c16:	4981      	ldr	r1, [pc, #516]	@ (8004e1c <main+0x68c>)
 8004c18:	4881      	ldr	r0, [pc, #516]	@ (8004e20 <main+0x690>)
 8004c1a:	f7fd f8f9 	bl	8001e10 <Send_Uart1>
				Buzzer_Old = Buzzer;
 8004c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e1c <main+0x68c>)
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	4b80      	ldr	r3, [pc, #512]	@ (8004e24 <main+0x694>)
 8004c24:	701a      	strb	r2, [r3, #0]
				/* Send Ctrl_Dev variable */
				Ctr_Dev_Temp[0] = (Ctr_Dev >> 8) & 0xFF;
 8004c26:	4b79      	ldr	r3, [pc, #484]	@ (8004e0c <main+0x67c>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	723b      	strb	r3, [r7, #8]
				Ctr_Dev_Temp[1] = Ctr_Dev & 0xFF;
 8004c32:	4b76      	ldr	r3, [pc, #472]	@ (8004e0c <main+0x67c>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	727b      	strb	r3, [r7, #9]
				Ctr_Dev_Old = Ctr_Dev;
 8004c3a:	4b74      	ldr	r3, [pc, #464]	@ (8004e0c <main+0x67c>)
 8004c3c:	881a      	ldrh	r2, [r3, #0]
 8004c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e28 <main+0x698>)
 8004c40:	801a      	strh	r2, [r3, #0]
				Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8004c42:	f107 0108 	add.w	r1, r7, #8
 8004c46:	2302      	movs	r3, #2
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	4a72      	ldr	r2, [pc, #456]	@ (8004e18 <main+0x688>)
 8004c4e:	4877      	ldr	r0, [pc, #476]	@ (8004e2c <main+0x69c>)
 8004c50:	f7fd f8de 	bl	8001e10 <Send_Uart1>
				/* Send node status variable*/
				StNode_Temp[0] = (StNode >> 8) & 0xFF;
 8004c54:	4b6f      	ldr	r3, [pc, #444]	@ (8004e14 <main+0x684>)
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	713b      	strb	r3, [r7, #4]
				StNode_Temp[1] = StNode & 0xFF;
 8004c60:	4b6c      	ldr	r3, [pc, #432]	@ (8004e14 <main+0x684>)
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	717b      	strb	r3, [r7, #5]
				StNode_Old = StNode;
 8004c68:	4b6a      	ldr	r3, [pc, #424]	@ (8004e14 <main+0x684>)
 8004c6a:	881a      	ldrh	r2, [r3, #0]
 8004c6c:	4b70      	ldr	r3, [pc, #448]	@ (8004e30 <main+0x6a0>)
 8004c6e:	801a      	strh	r2, [r3, #0]
				Send_Uart1(&start_byte_status[0], &StNode_Temp[0], &stop_byte, 2, 2);
 8004c70:	1d39      	adds	r1, r7, #4
 8004c72:	2302      	movs	r3, #2
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2302      	movs	r3, #2
 8004c78:	4a67      	ldr	r2, [pc, #412]	@ (8004e18 <main+0x688>)
 8004c7a:	486e      	ldr	r0, [pc, #440]	@ (8004e34 <main+0x6a4>)
 8004c7c:	f7fd f8c8 	bl	8001e10 <Send_Uart1>

				/* Send irsm data */
				for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	73bb      	strb	r3, [r7, #14]
 8004c84:	e01b      	b.n	8004cbe <main+0x52e>
				{
					irms1_old[idx_bf] = irms1_arr[idx_bf];    // Copy data to compare with
 8004c86:	7bba      	ldrb	r2, [r7, #14]
 8004c88:	7bbb      	ldrb	r3, [r7, #14]
 8004c8a:	496b      	ldr	r1, [pc, #428]	@ (8004e38 <main+0x6a8>)
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	440a      	add	r2, r1
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	496a      	ldr	r1, [pc, #424]	@ (8004e3c <main+0x6ac>)
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	601a      	str	r2, [r3, #0]
					ConvertFloatAsBytes(irms1_old[idx_bf], &Tx_Buf[idx_bf * 4]); // Pack 4 bytes per float
 8004c9a:	7bbb      	ldrb	r3, [r7, #14]
 8004c9c:	4a67      	ldr	r2, [pc, #412]	@ (8004e3c <main+0x6ac>)
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	7bbb      	ldrb	r3, [r7, #14]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4a65      	ldr	r2, [pc, #404]	@ (8004e40 <main+0x6b0>)
 8004cac:	4413      	add	r3, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb4:	f7ff fc0b 	bl	80044ce <ConvertFloatAsBytes>
				for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	73bb      	strb	r3, [r7, #14]
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d9e0      	bls.n	8004c86 <main+0x4f6>
				}
				Send_Uart1(&start_byte_data, &Tx_Buf[0], &stop_byte, 1, SIZEOF_DATABUFFER);
 8004cc4:	2328      	movs	r3, #40	@ 0x28
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4a53      	ldr	r2, [pc, #332]	@ (8004e18 <main+0x688>)
 8004ccc:	495c      	ldr	r1, [pc, #368]	@ (8004e40 <main+0x6b0>)
 8004cce:	485d      	ldr	r0, [pc, #372]	@ (8004e44 <main+0x6b4>)
 8004cd0:	f7fd f89e 	bl	8001e10 <Send_Uart1>
				Flag = true;
 8004cd4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e48 <main+0x6b8>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e0da      	b.n	8004e92 <main+0x702>
			}
			else          /* Send only one the continue time */
			{
				Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8004cdc:	495b      	ldr	r1, [pc, #364]	@ (8004e4c <main+0x6bc>)
 8004cde:	485c      	ldr	r0, [pc, #368]	@ (8004e50 <main+0x6c0>)
 8004ce0:	f7fd f81a 	bl	8001d18 <Check_Uart_update>
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	737b      	strb	r3, [r7, #13]
 8004ce8:	e03e      	b.n	8004d68 <main+0x5d8>
				{
					if(RelayStatus_arr_STM[idx_relay] == 0)
 8004cea:	7b7b      	ldrb	r3, [r7, #13]
 8004cec:	4a57      	ldr	r2, [pc, #348]	@ (8004e4c <main+0x6bc>)
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <main+0x580>
					{
						CLEAR_BIT_USER(Ctr_Dev, idx_relay);
 8004cf4:	7b7b      	ldrb	r3, [r7, #13]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	4b42      	ldr	r3, [pc, #264]	@ (8004e0c <main+0x67c>)
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	4b40      	ldr	r3, [pc, #256]	@ (8004e0c <main+0x67c>)
 8004d0c:	801a      	strh	r2, [r3, #0]
 8004d0e:	e00a      	b.n	8004d26 <main+0x596>
					}
					else
					{
						SET_BIT_USER(Ctr_Dev, idx_relay);
 8004d10:	7b7b      	ldrb	r3, [r7, #13]
 8004d12:	2201      	movs	r2, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <main+0x67c>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <main+0x67c>)
 8004d24:	801a      	strh	r2, [r3, #0]
					}

					if(NodeStatus_arr[idx_relay] == 0)
 8004d26:	7b7b      	ldrb	r3, [r7, #13]
 8004d28:	4a39      	ldr	r2, [pc, #228]	@ (8004e10 <main+0x680>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <main+0x5bc>
					{
						CLEAR_BIT_USER(StNode, idx_relay);
 8004d30:	7b7b      	ldrb	r3, [r7, #13]
 8004d32:	2201      	movs	r2, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <main+0x684>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	4b33      	ldr	r3, [pc, #204]	@ (8004e14 <main+0x684>)
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e00a      	b.n	8004d62 <main+0x5d2>
					}
					else
					{
						SET_BIT_USER(StNode, idx_relay);
 8004d4c:	7b7b      	ldrb	r3, [r7, #13]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	4b2f      	ldr	r3, [pc, #188]	@ (8004e14 <main+0x684>)
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <main+0x684>)
 8004d60:	801a      	strh	r2, [r3, #0]
				for(idx_relay = 0; idx_relay < INDEX_VALUE; idx_relay++)
 8004d62:	7b7b      	ldrb	r3, [r7, #13]
 8004d64:	3301      	adds	r3, #1
 8004d66:	737b      	strb	r3, [r7, #13]
 8004d68:	7b7b      	ldrb	r3, [r7, #13]
 8004d6a:	2b09      	cmp	r3, #9
 8004d6c:	d9bd      	bls.n	8004cea <main+0x55a>
					}
				}
				if(Buzzer_Old != Buzzer)
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e24 <main+0x694>)
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <main+0x68c>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d007      	beq.n	8004d8a <main+0x5fa>
				{
					Send_Uart1(&start_byte_warning[0], &Buzzer, &stop_byte, 2, 1);
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2302      	movs	r3, #2
 8004d80:	4a25      	ldr	r2, [pc, #148]	@ (8004e18 <main+0x688>)
 8004d82:	4926      	ldr	r1, [pc, #152]	@ (8004e1c <main+0x68c>)
 8004d84:	4826      	ldr	r0, [pc, #152]	@ (8004e20 <main+0x690>)
 8004d86:	f7fd f843 	bl	8001e10 <Send_Uart1>
				}

				if(StNode_Old != StNode)
 8004d8a:	4b29      	ldr	r3, [pc, #164]	@ (8004e30 <main+0x6a0>)
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <main+0x684>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d015      	beq.n	8004dc2 <main+0x632>
				{
					StNode_Old = StNode;
 8004d96:	4b1f      	ldr	r3, [pc, #124]	@ (8004e14 <main+0x684>)
 8004d98:	881a      	ldrh	r2, [r3, #0]
 8004d9a:	4b25      	ldr	r3, [pc, #148]	@ (8004e30 <main+0x6a0>)
 8004d9c:	801a      	strh	r2, [r3, #0]
					StNode_Temp[0] = (StNode_Old >> 8) & 0xFF;
 8004d9e:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <main+0x6a0>)
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	713b      	strb	r3, [r7, #4]
					StNode_Temp[1] = StNode_Old & 0xFF;
 8004daa:	4b21      	ldr	r3, [pc, #132]	@ (8004e30 <main+0x6a0>)
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	717b      	strb	r3, [r7, #5]
					Send_Uart1(&start_byte_status[0], &StNode_Temp[0], &stop_byte, 2, 2);
 8004db2:	1d39      	adds	r1, r7, #4
 8004db4:	2302      	movs	r3, #2
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2302      	movs	r3, #2
 8004dba:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <main+0x688>)
 8004dbc:	481d      	ldr	r0, [pc, #116]	@ (8004e34 <main+0x6a4>)
 8004dbe:	f7fd f827 	bl	8001e10 <Send_Uart1>
				}
				if(Ctr_Dev_Old != Ctr_Dev) // Check if the new value with the old value is different - send to Esp
 8004dc2:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <main+0x698>)
 8004dc4:	881a      	ldrh	r2, [r3, #0]
 8004dc6:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <main+0x67c>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d016      	beq.n	8004dfc <main+0x66c>
				{
					Ctr_Dev_Old = Ctr_Dev;
 8004dce:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <main+0x67c>)
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <main+0x698>)
 8004dd4:	801a      	strh	r2, [r3, #0]
					Ctr_Dev_Temp[0] = (Ctr_Dev_Old >> 8) & 0xFF;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <main+0x698>)
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	723b      	strb	r3, [r7, #8]
					Ctr_Dev_Temp[1] = Ctr_Dev_Old & 0xFF;
 8004de2:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <main+0x698>)
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	727b      	strb	r3, [r7, #9]
					Send_Uart1(&start_byte_ctrl[0], &Ctr_Dev_Temp[0], &stop_byte, 2, 2);
 8004dea:	f107 0108 	add.w	r1, r7, #8
 8004dee:	2302      	movs	r3, #2
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2302      	movs	r3, #2
 8004df4:	4a08      	ldr	r2, [pc, #32]	@ (8004e18 <main+0x688>)
 8004df6:	480d      	ldr	r0, [pc, #52]	@ (8004e2c <main+0x69c>)
 8004df8:	f7fd f80a 	bl	8001e10 <Send_Uart1>
				}

				if(stDataChanged == true) // Check if the new value with the old value is different - send to Esp
 8004dfc:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <main+0x6c4>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d046      	beq.n	8004e92 <main+0x702>
				{
					for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	73bb      	strb	r3, [r7, #14]
 8004e08:	e038      	b.n	8004e7c <main+0x6ec>
 8004e0a:	bf00      	nop
 8004e0c:	20000486 	.word	0x20000486
 8004e10:	2000058c 	.word	0x2000058c
 8004e14:	2000048a 	.word	0x2000048a
 8004e18:	2000001a 	.word	0x2000001a
 8004e1c:	2000048e 	.word	0x2000048e
 8004e20:	20000014 	.word	0x20000014
 8004e24:	2000048f 	.word	0x2000048f
 8004e28:	20000488 	.word	0x20000488
 8004e2c:	20000010 	.word	0x20000010
 8004e30:	2000048c 	.word	0x2000048c
 8004e34:	20000018 	.word	0x20000018
 8004e38:	20000598 	.word	0x20000598
 8004e3c:	200005c0 	.word	0x200005c0
 8004e40:	200005e8 	.word	0x200005e8
 8004e44:	2000000d 	.word	0x2000000d
 8004e48:	20000494 	.word	0x20000494
 8004e4c:	20000580 	.word	0x20000580
 8004e50:	20000470 	.word	0x20000470
 8004e54:	20000622 	.word	0x20000622
					{
						ConvertFloatAsBytes(irms1_old[idx_bf], &Tx_Buf[idx_bf * 4]); // Pack 4 bytes per float
 8004e58:	7bbb      	ldrb	r3, [r7, #14]
 8004e5a:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <main+0x70c>)
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	edd3 7a00 	vldr	s15, [r3]
 8004e64:	7bbb      	ldrb	r3, [r7, #14]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea0 <main+0x710>)
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e72:	f7ff fb2c 	bl	80044ce <ConvertFloatAsBytes>
					for (idx_bf = 0; idx_bf < 10; idx_bf++)
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	73bb      	strb	r3, [r7, #14]
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	2b09      	cmp	r3, #9
 8004e80:	d9ea      	bls.n	8004e58 <main+0x6c8>
					}
					Send_Uart1(&start_byte_data, &Tx_Buf[0], &stop_byte, 1, SIZEOF_DATABUFFER);
 8004e82:	2328      	movs	r3, #40	@ 0x28
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2301      	movs	r3, #1
 8004e88:	4a06      	ldr	r2, [pc, #24]	@ (8004ea4 <main+0x714>)
 8004e8a:	4905      	ldr	r1, [pc, #20]	@ (8004ea0 <main+0x710>)
 8004e8c:	4806      	ldr	r0, [pc, #24]	@ (8004ea8 <main+0x718>)
 8004e8e:	f7fc ffbf 	bl	8001e10 <Send_Uart1>
				}
			}
			timer_counter = 0;
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <main+0x71c>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
		Check_Uart_update(&RelayStatus_arr_ESP[0], &RelayStatus_arr_STM[0]);
 8004e98:	e4b2      	b.n	8004800 <main+0x70>
 8004e9a:	bf00      	nop
 8004e9c:	200005c0 	.word	0x200005c0
 8004ea0:	200005e8 	.word	0x200005e8
 8004ea4:	2000001a 	.word	0x2000001a
 8004ea8:	2000000d 	.word	0x2000000d
 8004eac:	20000492 	.word	0x20000492

08004eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b094      	sub	sp, #80	@ 0x50
 8004eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004eb6:	f107 0320 	add.w	r3, r7, #32
 8004eba:	2230      	movs	r2, #48	@ 0x30
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f005 fdd5 	bl	800aa6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <SystemClock_Config+0xc8>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	4a26      	ldr	r2, [pc, #152]	@ (8004f78 <SystemClock_Config+0xc8>)
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee4:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <SystemClock_Config+0xc8>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	4b21      	ldr	r3, [pc, #132]	@ (8004f7c <SystemClock_Config+0xcc>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	@ (8004f7c <SystemClock_Config+0xcc>)
 8004efa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b1e      	ldr	r3, [pc, #120]	@ (8004f7c <SystemClock_Config+0xcc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f16:	2302      	movs	r3, #2
 8004f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f20:	2304      	movs	r3, #4
 8004f22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004f24:	2364      	movs	r3, #100	@ 0x64
 8004f26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f30:	f107 0320 	add.w	r3, r7, #32
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 fed3 	bl	8006ce0 <HAL_RCC_OscConfig>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f40:	f000 fa5a 	bl	80053f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f44:	230f      	movs	r3, #15
 8004f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f56:	2300      	movs	r3, #0
 8004f58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f5a:	f107 030c 	add.w	r3, r7, #12
 8004f5e:	2103      	movs	r1, #3
 8004f60:	4618      	mov	r0, r3
 8004f62:	f002 f935 	bl	80071d0 <HAL_RCC_ClockConfig>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f6c:	f000 fa44 	bl	80053f8 <Error_Handler>
  }
}
 8004f70:	bf00      	nop
 8004f72:	3750      	adds	r7, #80	@ 0x50
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	40007000 	.word	0x40007000

08004f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f84:	4b17      	ldr	r3, [pc, #92]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <MX_SPI1_Init+0x68>)
 8004f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f8a:	4b16      	ldr	r3, [pc, #88]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004f8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f98:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f9e:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004faa:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fb4:	2218      	movs	r2, #24
 8004fb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc4:	4b07      	ldr	r3, [pc, #28]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fcc:	220a      	movs	r2, #10
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fd0:	4804      	ldr	r0, [pc, #16]	@ (8004fe4 <MX_SPI1_Init+0x64>)
 8004fd2:	f002 fb1d 	bl	8007610 <HAL_SPI_Init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004fdc:	f000 fa0c 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fe0:	bf00      	nop
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20000214 	.word	0x20000214
 8004fe8:	40013000 	.word	0x40013000

08004fec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004ff0:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <MX_SPI2_Init+0x64>)
 8004ff2:	4a18      	ldr	r2, [pc, #96]	@ (8005054 <MX_SPI2_Init+0x68>)
 8004ff4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ff6:	4b16      	ldr	r3, [pc, #88]	@ (8005050 <MX_SPI2_Init+0x64>)
 8004ff8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004ffc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005004:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005006:	2200      	movs	r2, #0
 8005008:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800500a:	4b11      	ldr	r3, [pc, #68]	@ (8005050 <MX_SPI2_Init+0x64>)
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005010:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005012:	2200      	movs	r2, #0
 8005014:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005016:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800501c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800501e:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005020:	2200      	movs	r2, #0
 8005022:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005024:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005026:	2200      	movs	r2, #0
 8005028:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <MX_SPI2_Init+0x64>)
 800502c:	2200      	movs	r2, #0
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005030:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005032:	2200      	movs	r2, #0
 8005034:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <MX_SPI2_Init+0x64>)
 8005038:	220a      	movs	r2, #10
 800503a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800503c:	4804      	ldr	r0, [pc, #16]	@ (8005050 <MX_SPI2_Init+0x64>)
 800503e:	f002 fae7 	bl	8007610 <HAL_SPI_Init>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005048:	f000 f9d6 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800504c:	bf00      	nop
 800504e:	bd80      	pop	{r7, pc}
 8005050:	2000026c 	.word	0x2000026c
 8005054:	40003800 	.word	0x40003800

08005058 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <MX_SPI3_Init+0x64>)
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <MX_SPI3_Init+0x68>)
 8005060:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005068:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <MX_SPI3_Init+0x64>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005072:	2200      	movs	r2, #0
 8005074:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800507c:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <MX_SPI3_Init+0x64>)
 800507e:	2200      	movs	r2, #0
 8005080:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005088:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <MX_SPI3_Init+0x64>)
 800508c:	2218      	movs	r2, #24
 800508e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005092:	2200      	movs	r2, #0
 8005094:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <MX_SPI3_Init+0x64>)
 8005098:	2200      	movs	r2, #0
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <MX_SPI3_Init+0x64>)
 800509e:	2200      	movs	r2, #0
 80050a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <MX_SPI3_Init+0x64>)
 80050a4:	220a      	movs	r2, #10
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80050a8:	4804      	ldr	r0, [pc, #16]	@ (80050bc <MX_SPI3_Init+0x64>)
 80050aa:	f002 fab1 	bl	8007610 <HAL_SPI_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80050b4:	f000 f9a0 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200002c4 	.word	0x200002c4
 80050c0:	40003c00 	.word	0x40003c00

080050c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	609a      	str	r2, [r3, #8]
 80050d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050d8:	463b      	mov	r3, r7
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <MX_TIM2_Init+0x94>)
 80050e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80050e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005158 <MX_TIM2_Init+0x94>)
 80050ea:	2263      	movs	r2, #99	@ 0x63
 80050ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <MX_TIM2_Init+0x94>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80050f4:	4b18      	ldr	r3, [pc, #96]	@ (8005158 <MX_TIM2_Init+0x94>)
 80050f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80050fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050fc:	4b16      	ldr	r3, [pc, #88]	@ (8005158 <MX_TIM2_Init+0x94>)
 80050fe:	2200      	movs	r2, #0
 8005100:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <MX_TIM2_Init+0x94>)
 8005104:	2200      	movs	r2, #0
 8005106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005108:	4813      	ldr	r0, [pc, #76]	@ (8005158 <MX_TIM2_Init+0x94>)
 800510a:	f003 faa3 	bl	8008654 <HAL_TIM_Base_Init>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005114:	f000 f970 	bl	80053f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800511c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4619      	mov	r1, r3
 8005124:	480c      	ldr	r0, [pc, #48]	@ (8005158 <MX_TIM2_Init+0x94>)
 8005126:	f003 fc37 	bl	8008998 <HAL_TIM_ConfigClockSource>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005130:	f000 f962 	bl	80053f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005134:	2300      	movs	r3, #0
 8005136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800513c:	463b      	mov	r3, r7
 800513e:	4619      	mov	r1, r3
 8005140:	4805      	ldr	r0, [pc, #20]	@ (8005158 <MX_TIM2_Init+0x94>)
 8005142:	f003 fe3f 	bl	8008dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800514c:	f000 f954 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	2000037c 	.word	0x2000037c

0800515c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005170:	463b      	mov	r3, r7
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005178:	4b1d      	ldr	r3, [pc, #116]	@ (80051f0 <MX_TIM3_Init+0x94>)
 800517a:	4a1e      	ldr	r2, [pc, #120]	@ (80051f4 <MX_TIM3_Init+0x98>)
 800517c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800517e:	4b1c      	ldr	r3, [pc, #112]	@ (80051f0 <MX_TIM3_Init+0x94>)
 8005180:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005184:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005186:	4b1a      	ldr	r3, [pc, #104]	@ (80051f0 <MX_TIM3_Init+0x94>)
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800518c:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <MX_TIM3_Init+0x94>)
 800518e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005194:	4b16      	ldr	r3, [pc, #88]	@ (80051f0 <MX_TIM3_Init+0x94>)
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519a:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <MX_TIM3_Init+0x94>)
 800519c:	2200      	movs	r2, #0
 800519e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051a0:	4813      	ldr	r0, [pc, #76]	@ (80051f0 <MX_TIM3_Init+0x94>)
 80051a2:	f003 fa57 	bl	8008654 <HAL_TIM_Base_Init>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80051ac:	f000 f924 	bl	80053f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80051b6:	f107 0308 	add.w	r3, r7, #8
 80051ba:	4619      	mov	r1, r3
 80051bc:	480c      	ldr	r0, [pc, #48]	@ (80051f0 <MX_TIM3_Init+0x94>)
 80051be:	f003 fbeb 	bl	8008998 <HAL_TIM_ConfigClockSource>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80051c8:	f000 f916 	bl	80053f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051cc:	2300      	movs	r3, #0
 80051ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051d4:	463b      	mov	r3, r7
 80051d6:	4619      	mov	r1, r3
 80051d8:	4805      	ldr	r0, [pc, #20]	@ (80051f0 <MX_TIM3_Init+0x94>)
 80051da:	f003 fdf3 	bl	8008dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80051e4:	f000 f908 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80051e8:	bf00      	nop
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200003c4 	.word	0x200003c4
 80051f4:	40000400 	.word	0x40000400

080051f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 80051fe:	4a12      	ldr	r2, [pc, #72]	@ (8005248 <MX_USART1_UART_Init+0x50>)
 8005200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005202:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 8005204:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8005208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800520a:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 800520c:	2200      	movs	r2, #0
 800520e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005210:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005216:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 8005218:	2200      	movs	r2, #0
 800521a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800521c:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 800521e:	220c      	movs	r2, #12
 8005220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005222:	4b08      	ldr	r3, [pc, #32]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 8005224:	2200      	movs	r2, #0
 8005226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 800522a:	2200      	movs	r2, #0
 800522c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800522e:	4805      	ldr	r0, [pc, #20]	@ (8005244 <MX_USART1_UART_Init+0x4c>)
 8005230:	f003 fe4a 	bl	8008ec8 <HAL_UART_Init>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800523a:	f000 f8dd 	bl	80053f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	2000040c 	.word	0x2000040c
 8005248:	40011000 	.word	0x40011000

0800524c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <MX_DMA_Init+0x3c>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525a:	4a0b      	ldr	r2, [pc, #44]	@ (8005288 <MX_DMA_Init+0x3c>)
 800525c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005260:	6313      	str	r3, [r2, #48]	@ 0x30
 8005262:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <MX_DMA_Init+0x3c>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	200f      	movs	r0, #15
 8005274:	f000 ff45 	bl	8006102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005278:	200f      	movs	r0, #15
 800527a:	f000 ff5e 	bl	800613a <HAL_NVIC_EnableIRQ>

}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	605a      	str	r2, [r3, #4]
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052aa:	4a4f      	ldr	r2, [pc, #316]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052ac:	f043 0304 	orr.w	r3, r3, #4
 80052b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80052b2:	4b4d      	ldr	r3, [pc, #308]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	4a48      	ldr	r2, [pc, #288]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ce:	4b46      	ldr	r3, [pc, #280]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	4b42      	ldr	r3, [pc, #264]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	4a41      	ldr	r2, [pc, #260]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ea:	4b3f      	ldr	r3, [pc, #252]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	607b      	str	r3, [r7, #4]
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	4a3a      	ldr	r2, [pc, #232]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6313      	str	r3, [r2, #48]	@ 0x30
 8005306:	4b38      	ldr	r3, [pc, #224]	@ (80053e8 <MX_GPIO_Init+0x15c>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8005312:	2200      	movs	r2, #0
 8005314:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8005318:	4834      	ldr	r0, [pc, #208]	@ (80053ec <MX_GPIO_Init+0x160>)
 800531a:	f001 fcaf 	bl	8006c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TP_CS_Pin|TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 800531e:	2200      	movs	r2, #0
 8005320:	f242 0107 	movw	r1, #8199	@ 0x2007
 8005324:	4832      	ldr	r0, [pc, #200]	@ (80053f0 <MX_GPIO_Init+0x164>)
 8005326:	f001 fca9 	bl	8006c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800532a:	2200      	movs	r2, #0
 800532c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005330:	4830      	ldr	r0, [pc, #192]	@ (80053f4 <MX_GPIO_Init+0x168>)
 8005332:	f001 fca3 	bl	8006c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005336:	2201      	movs	r2, #1
 8005338:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800533c:	482d      	ldr	r0, [pc, #180]	@ (80053f4 <MX_GPIO_Init+0x168>)
 800533e:	f001 fc9d 	bl	8006c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005342:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8005346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005348:	2301      	movs	r3, #1
 800534a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005350:	2300      	movs	r3, #0
 8005352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005354:	f107 0314 	add.w	r3, r7, #20
 8005358:	4619      	mov	r1, r3
 800535a:	4824      	ldr	r0, [pc, #144]	@ (80053ec <MX_GPIO_Init+0x160>)
 800535c:	f001 fb0a 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005360:	2308      	movs	r3, #8
 8005362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005364:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800536a:	2302      	movs	r3, #2
 800536c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	f107 0314 	add.w	r3, r7, #20
 8005372:	4619      	mov	r1, r3
 8005374:	481f      	ldr	r0, [pc, #124]	@ (80053f4 <MX_GPIO_Init+0x168>)
 8005376:	f001 fafd 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800537a:	2310      	movs	r3, #16
 800537c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8005386:	f107 0314 	add.w	r3, r7, #20
 800538a:	4619      	mov	r1, r3
 800538c:	4819      	ldr	r0, [pc, #100]	@ (80053f4 <MX_GPIO_Init+0x168>)
 800538e:	f001 faf1 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP_CS_Pin TFT_DC_Pin TFT_RST_Pin TFT_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin|TFT_DC_Pin|TFT_RST_Pin|TFT_CS_Pin;
 8005392:	f242 0307 	movw	r3, #8199	@ 0x2007
 8005396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005398:	2301      	movs	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a0:	2300      	movs	r3, #0
 80053a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a4:	f107 0314 	add.w	r3, r7, #20
 80053a8:	4619      	mov	r1, r3
 80053aa:	4811      	ldr	r0, [pc, #68]	@ (80053f0 <MX_GPIO_Init+0x164>)
 80053ac:	f001 fae2 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80053b0:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80053b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	480a      	ldr	r0, [pc, #40]	@ (80053f4 <MX_GPIO_Init+0x168>)
 80053ca:	f001 fad3 	bl	8006974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2101      	movs	r1, #1
 80053d2:	2009      	movs	r0, #9
 80053d4:	f000 fe95 	bl	8006102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80053d8:	2009      	movs	r0, #9
 80053da:	f000 feae 	bl	800613a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	@ 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40020800 	.word	0x40020800
 80053f0:	40020400 	.word	0x40020400
 80053f4:	40020000 	.word	0x40020000

080053f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053fc:	b672      	cpsid	i
}
 80053fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <Error_Handler+0x8>

08005404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <HAL_MspInit+0x4c>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	4a0f      	ldr	r2, [pc, #60]	@ (8005450 <HAL_MspInit+0x4c>)
 8005414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005418:	6453      	str	r3, [r2, #68]	@ 0x44
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <HAL_MspInit+0x4c>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_MspInit+0x4c>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	4a08      	ldr	r2, [pc, #32]	@ (8005450 <HAL_MspInit+0x4c>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005434:	6413      	str	r3, [r2, #64]	@ 0x40
 8005436:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <HAL_MspInit+0x4c>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40023800 	.word	0x40023800

08005454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	@ 0x38
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a72      	ldr	r2, [pc, #456]	@ (800563c <HAL_SPI_MspInit+0x1e8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d134      	bne.n	80054e0 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	623b      	str	r3, [r7, #32]
 800547a:	4b71      	ldr	r3, [pc, #452]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	4a70      	ldr	r2, [pc, #448]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 8005480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005484:	6453      	str	r3, [r2, #68]	@ 0x44
 8005486:	4b6e      	ldr	r3, [pc, #440]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	4b6a      	ldr	r3, [pc, #424]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549a:	4a69      	ldr	r2, [pc, #420]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054a2:	4b67      	ldr	r3, [pc, #412]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80054ae:	23e0      	movs	r3, #224	@ 0xe0
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b2:	2302      	movs	r3, #2
 80054b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ba:	2303      	movs	r3, #3
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054be:	2305      	movs	r3, #5
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054c6:	4619      	mov	r1, r3
 80054c8:	485e      	ldr	r0, [pc, #376]	@ (8005644 <HAL_SPI_MspInit+0x1f0>)
 80054ca:	f001 fa53 	bl	8006974 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	2023      	movs	r0, #35	@ 0x23
 80054d4:	f000 fe15 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80054d8:	2023      	movs	r0, #35	@ 0x23
 80054da:	f000 fe2e 	bl	800613a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80054de:	e0a9      	b.n	8005634 <HAL_SPI_MspInit+0x1e0>
  else if(hspi->Instance==SPI2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a58      	ldr	r2, [pc, #352]	@ (8005648 <HAL_SPI_MspInit+0x1f4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d162      	bne.n	80055b0 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	4b54      	ldr	r3, [pc, #336]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	4a53      	ldr	r2, [pc, #332]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80054f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054fa:	4b51      	ldr	r3, [pc, #324]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	4b4d      	ldr	r3, [pc, #308]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	4a4c      	ldr	r2, [pc, #304]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	6313      	str	r3, [r2, #48]	@ 0x30
 8005516:	4b4a      	ldr	r3, [pc, #296]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8005522:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005528:	2302      	movs	r3, #2
 800552a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552c:	2300      	movs	r3, #0
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	2303      	movs	r3, #3
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005534:	2305      	movs	r3, #5
 8005536:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800553c:	4619      	mov	r1, r3
 800553e:	4843      	ldr	r0, [pc, #268]	@ (800564c <HAL_SPI_MspInit+0x1f8>)
 8005540:	f001 fa18 	bl	8006974 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005544:	4b42      	ldr	r3, [pc, #264]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005546:	4a43      	ldr	r2, [pc, #268]	@ (8005654 <HAL_SPI_MspInit+0x200>)
 8005548:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800554a:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 800554c:	2200      	movs	r2, #0
 800554e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005550:	4b3f      	ldr	r3, [pc, #252]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005552:	2240      	movs	r2, #64	@ 0x40
 8005554:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800555c:	4b3c      	ldr	r3, [pc, #240]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 800555e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005562:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005564:	4b3a      	ldr	r3, [pc, #232]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005566:	2200      	movs	r2, #0
 8005568:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800556a:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 800556c:	2200      	movs	r2, #0
 800556e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005570:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005572:	2200      	movs	r2, #0
 8005574:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005576:	4b36      	ldr	r3, [pc, #216]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005578:	2200      	movs	r2, #0
 800557a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800557c:	4b34      	ldr	r3, [pc, #208]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 800557e:	2200      	movs	r2, #0
 8005580:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005582:	4833      	ldr	r0, [pc, #204]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005584:	f000 fdf4 	bl	8006170 <HAL_DMA_Init>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_SPI_MspInit+0x13e>
      Error_Handler();
 800558e:	f7ff ff33 	bl	80053f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2e      	ldr	r2, [pc, #184]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 8005596:	649a      	str	r2, [r3, #72]	@ 0x48
 8005598:	4a2d      	ldr	r2, [pc, #180]	@ (8005650 <HAL_SPI_MspInit+0x1fc>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 800559e:	2200      	movs	r2, #0
 80055a0:	2101      	movs	r1, #1
 80055a2:	2024      	movs	r0, #36	@ 0x24
 80055a4:	f000 fdad 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80055a8:	2024      	movs	r0, #36	@ 0x24
 80055aa:	f000 fdc6 	bl	800613a <HAL_NVIC_EnableIRQ>
}
 80055ae:	e041      	b.n	8005634 <HAL_SPI_MspInit+0x1e0>
  else if(hspi->Instance==SPI3)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a28      	ldr	r2, [pc, #160]	@ (8005658 <HAL_SPI_MspInit+0x204>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d13c      	bne.n	8005634 <HAL_SPI_MspInit+0x1e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	4b20      	ldr	r3, [pc, #128]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	4a18      	ldr	r2, [pc, #96]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e6:	4b16      	ldr	r3, [pc, #88]	@ (8005640 <HAL_SPI_MspInit+0x1ec>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f8:	2302      	movs	r3, #2
 80055fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005600:	2303      	movs	r3, #3
 8005602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005604:	2307      	movs	r3, #7
 8005606:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800560c:	4619      	mov	r1, r3
 800560e:	480f      	ldr	r0, [pc, #60]	@ (800564c <HAL_SPI_MspInit+0x1f8>)
 8005610:	f001 f9b0 	bl	8006974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005614:	2330      	movs	r3, #48	@ 0x30
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005618:	2302      	movs	r3, #2
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561c:	2300      	movs	r3, #0
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005620:	2303      	movs	r3, #3
 8005622:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005624:	2306      	movs	r3, #6
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800562c:	4619      	mov	r1, r3
 800562e:	4807      	ldr	r0, [pc, #28]	@ (800564c <HAL_SPI_MspInit+0x1f8>)
 8005630:	f001 f9a0 	bl	8006974 <HAL_GPIO_Init>
}
 8005634:	bf00      	nop
 8005636:	3738      	adds	r7, #56	@ 0x38
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40013000 	.word	0x40013000
 8005640:	40023800 	.word	0x40023800
 8005644:	40020000 	.word	0x40020000
 8005648:	40003800 	.word	0x40003800
 800564c:	40020400 	.word	0x40020400
 8005650:	2000031c 	.word	0x2000031c
 8005654:	40026070 	.word	0x40026070
 8005658:	40003c00 	.word	0x40003c00

0800565c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800566c:	d116      	bne.n	800569c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6413      	str	r3, [r2, #64]	@ 0x40
 800567e:	4b17      	ldr	r3, [pc, #92]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800568a:	2200      	movs	r2, #0
 800568c:	2101      	movs	r1, #1
 800568e:	201c      	movs	r0, #28
 8005690:	f000 fd37 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005694:	201c      	movs	r0, #28
 8005696:	f000 fd50 	bl	800613a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800569a:	e01a      	b.n	80056d2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0f      	ldr	r2, [pc, #60]	@ (80056e0 <HAL_TIM_Base_MspInit+0x84>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d115      	bne.n	80056d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ae:	4a0b      	ldr	r2, [pc, #44]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056b6:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <HAL_TIM_Base_MspInit+0x80>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2101      	movs	r1, #1
 80056c6:	201d      	movs	r0, #29
 80056c8:	f000 fd1b 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80056cc:	201d      	movs	r0, #29
 80056ce:	f000 fd34 	bl	800613a <HAL_NVIC_EnableIRQ>
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40000400 	.word	0x40000400

080056e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	@ 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	f107 0314 	add.w	r3, r7, #20
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1d      	ldr	r2, [pc, #116]	@ (8005778 <HAL_UART_MspInit+0x94>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d134      	bne.n	8005770 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	4b1c      	ldr	r3, [pc, #112]	@ (800577c <HAL_UART_MspInit+0x98>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005710:	f043 0310 	orr.w	r3, r3, #16
 8005714:	6453      	str	r3, [r2, #68]	@ 0x44
 8005716:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b15      	ldr	r3, [pc, #84]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	4a14      	ldr	r2, [pc, #80]	@ (800577c <HAL_UART_MspInit+0x98>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6313      	str	r3, [r2, #48]	@ 0x30
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800573e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005744:	2302      	movs	r3, #2
 8005746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574c:	2303      	movs	r3, #3
 800574e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005750:	2307      	movs	r3, #7
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4619      	mov	r1, r3
 800575a:	4809      	ldr	r0, [pc, #36]	@ (8005780 <HAL_UART_MspInit+0x9c>)
 800575c:	f001 f90a 	bl	8006974 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	2025      	movs	r0, #37	@ 0x25
 8005766:	f000 fccc 	bl	8006102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800576a:	2025      	movs	r0, #37	@ 0x25
 800576c:	f000 fce5 	bl	800613a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005770:	bf00      	nop
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40011000 	.word	0x40011000
 800577c:	40023800 	.word	0x40023800
 8005780:	40020000 	.word	0x40020000

08005784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <NMI_Handler+0x4>

0800578c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <HardFault_Handler+0x4>

08005794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <MemManage_Handler+0x4>

0800579c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <BusFault_Handler+0x4>

080057a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <UsageFault_Handler+0x4>

080057ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057da:	f000 fb73 	bl	8005ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80057e6:	2008      	movs	r0, #8
 80057e8:	f001 fa62 	bl	8006cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80057f4:	4802      	ldr	r0, [pc, #8]	@ (8005800 <DMA1_Stream4_IRQHandler+0x10>)
 80057f6:	f000 fe53 	bl	80064a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000031c 	.word	0x2000031c

08005804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005808:	4802      	ldr	r0, [pc, #8]	@ (8005814 <TIM2_IRQHandler+0x10>)
 800580a:	f002 ffd5 	bl	80087b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2000037c 	.word	0x2000037c

08005818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800581c:	4802      	ldr	r0, [pc, #8]	@ (8005828 <TIM3_IRQHandler+0x10>)
 800581e:	f002 ffcb 	bl	80087b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200003c4 	.word	0x200003c4

0800582c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005830:	4802      	ldr	r0, [pc, #8]	@ (800583c <SPI1_IRQHandler+0x10>)
 8005832:	f002 fc2f 	bl	8008094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000214 	.word	0x20000214

08005840 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005844:	4802      	ldr	r0, [pc, #8]	@ (8005850 <SPI2_IRQHandler+0x10>)
 8005846:	f002 fc25 	bl	8008094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	2000026c 	.word	0x2000026c

08005854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005858:	4802      	ldr	r0, [pc, #8]	@ (8005864 <USART1_IRQHandler+0x10>)
 800585a:	f003 fc35 	bl	80090c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000040c 	.word	0x2000040c

08005868 <readRegister>:
#include "sx1278.h"

uint8_t data_spi_tx[2] = { };
uint8_t data_spi_rx[2] = { };

uint8_t readRegister(uint8_t addr) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
	CS = 0;
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <readRegister+0x4c>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
	data_spi_tx[0] = addr & 0x7F;
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800587e:	b2da      	uxtb	r2, r3
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <readRegister+0x50>)
 8005882:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 8005884:	f04f 33ff 	mov.w	r3, #4294967295
 8005888:	2201      	movs	r2, #1
 800588a:	490b      	ldr	r1, [pc, #44]	@ (80058b8 <readRegister+0x50>)
 800588c:	480b      	ldr	r0, [pc, #44]	@ (80058bc <readRegister+0x54>)
 800588e:	f001 ff48 	bl	8007722 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, data_spi_rx, 1, HAL_MAX_DELAY);
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	2201      	movs	r2, #1
 8005898:	4909      	ldr	r1, [pc, #36]	@ (80058c0 <readRegister+0x58>)
 800589a:	4808      	ldr	r0, [pc, #32]	@ (80058bc <readRegister+0x54>)
 800589c:	f002 f885 	bl	80079aa <HAL_SPI_Receive>
	CS = 1;
 80058a0:	4b04      	ldr	r3, [pc, #16]	@ (80058b4 <readRegister+0x4c>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
	return data_spi_rx[0];
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <readRegister+0x58>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	424102b4 	.word	0x424102b4
 80058b8:	20000624 	.word	0x20000624
 80058bc:	200002c4 	.word	0x200002c4
 80058c0:	20000628 	.word	0x20000628

080058c4 <writeRegister>:

void writeRegister(uint8_t addr, uint8_t data) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	460a      	mov	r2, r1
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
	CS = 0;
 80058d4:	4b10      	ldr	r3, [pc, #64]	@ (8005918 <writeRegister+0x54>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
	data_spi_tx[0] = addr | 0x80;
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <writeRegister+0x58>)
 80058e4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	2201      	movs	r2, #1
 80058ec:	490b      	ldr	r1, [pc, #44]	@ (800591c <writeRegister+0x58>)
 80058ee:	480c      	ldr	r0, [pc, #48]	@ (8005920 <writeRegister+0x5c>)
 80058f0:	f001 ff17 	bl	8007722 <HAL_SPI_Transmit>
	data_spi_tx[0] = data;
 80058f4:	4a09      	ldr	r2, [pc, #36]	@ (800591c <writeRegister+0x58>)
 80058f6:	79bb      	ldrb	r3, [r7, #6]
 80058f8:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi3, data_spi_tx, 1, HAL_MAX_DELAY);
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	2201      	movs	r2, #1
 8005900:	4906      	ldr	r1, [pc, #24]	@ (800591c <writeRegister+0x58>)
 8005902:	4807      	ldr	r0, [pc, #28]	@ (8005920 <writeRegister+0x5c>)
 8005904:	f001 ff0d 	bl	8007722 <HAL_SPI_Transmit>
	CS = 1;
 8005908:	4b03      	ldr	r3, [pc, #12]	@ (8005918 <writeRegister+0x54>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	424102b4 	.word	0x424102b4
 800591c:	20000624 	.word	0x20000624
 8005920:	200002c4 	.word	0x200002c4

08005924 <standby_mode>:

void standby_mode() {
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8005928:	2181      	movs	r1, #129	@ 0x81
 800592a:	2001      	movs	r0, #1
 800592c:	f7ff ffca 	bl	80058c4 <writeRegister>
}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}

08005934 <sleep_mode>:

void sleep_mode() {
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8005938:	2180      	movs	r1, #128	@ 0x80
 800593a:	2001      	movs	r0, #1
 800593c:	f7ff ffc2 	bl	80058c4 <writeRegister>
}
 8005940:	bf00      	nop
 8005942:	bd80      	pop	{r7, pc}

08005944 <tx_mode>:

void tx_mode() {
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8005948:	2183      	movs	r1, #131	@ 0x83
 800594a:	2001      	movs	r0, #1
 800594c:	f7ff ffba 	bl	80058c4 <writeRegister>
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}

08005954 <rx_mode>:

void rx_mode() {
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8005958:	2185      	movs	r1, #133	@ 0x85
 800595a:	2001      	movs	r0, #1
 800595c:	f7ff ffb2 	bl	80058c4 <writeRegister>
}
 8005960:	bf00      	nop
 8005962:	bd80      	pop	{r7, pc}

08005964 <setFrequency>:

void setFrequency(unsigned long frequency) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	writeRegister(REG_FRF_MSB, (uint8_t) (frequency >> 16));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	0c1b      	lsrs	r3, r3, #16
 8005970:	b2db      	uxtb	r3, r3
 8005972:	4619      	mov	r1, r3
 8005974:	2006      	movs	r0, #6
 8005976:	f7ff ffa5 	bl	80058c4 <writeRegister>
	writeRegister(REG_FRF_MID, (uint8_t) (frequency >> 8));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0a1b      	lsrs	r3, r3, #8
 800597e:	b2db      	uxtb	r3, r3
 8005980:	4619      	mov	r1, r3
 8005982:	2007      	movs	r0, #7
 8005984:	f7ff ff9e 	bl	80058c4 <writeRegister>
	writeRegister(REG_FRF_LSB, (uint8_t) (frequency >> 0));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	4619      	mov	r1, r3
 800598e:	2008      	movs	r0, #8
 8005990:	f7ff ff98 	bl	80058c4 <writeRegister>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <sx1278_init>:

void sx1278_init(unsigned long frequency) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	RST_LORA = 0;
 80059a4:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <sx1278_init+0x90>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80059aa:	2001      	movs	r0, #1
 80059ac:	f000 faaa 	bl	8005f04 <HAL_Delay>
	RST_LORA = 1;
 80059b0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a2c <sx1278_init+0x90>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80059b6:	2001      	movs	r0, #1
 80059b8:	f000 faa4 	bl	8005f04 <HAL_Delay>
	standby_mode();
 80059bc:	f7ff ffb2 	bl	8005924 <standby_mode>
	HAL_Delay(1);
 80059c0:	2001      	movs	r0, #1
 80059c2:	f000 fa9f 	bl	8005f04 <HAL_Delay>
	sleep_mode();
 80059c6:	f7ff ffb5 	bl	8005934 <sleep_mode>

	setFrequency(frequency);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff ffca 	bl	8005964 <setFrequency>

	writeRegister(0x1d, 0x72); //BW = 125khz, CR = 4/5
 80059d0:	2172      	movs	r1, #114	@ 0x72
 80059d2:	201d      	movs	r0, #29
 80059d4:	f7ff ff76 	bl	80058c4 <writeRegister>
	writeRegister(0x1e, 0x70); //SF = 7
 80059d8:	2170      	movs	r1, #112	@ 0x70
 80059da:	201e      	movs	r0, #30
 80059dc:	f7ff ff72 	bl	80058c4 <writeRegister>

	writeRegister(0x0e, 0);
 80059e0:	2100      	movs	r1, #0
 80059e2:	200e      	movs	r0, #14
 80059e4:	f7ff ff6e 	bl	80058c4 <writeRegister>
	writeRegister(0x0f, 0);
 80059e8:	2100      	movs	r1, #0
 80059ea:	200f      	movs	r0, #15
 80059ec:	f7ff ff6a 	bl	80058c4 <writeRegister>
	writeRegister(0x0c, 0x23);
 80059f0:	2123      	movs	r1, #35	@ 0x23
 80059f2:	200c      	movs	r0, #12
 80059f4:	f7ff ff66 	bl	80058c4 <writeRegister>
	writeRegister(0x26, 0x04);
 80059f8:	2104      	movs	r1, #4
 80059fa:	2026      	movs	r0, #38	@ 0x26
 80059fc:	f7ff ff62 	bl	80058c4 <writeRegister>
	writeRegister(0x4d, 0x84);
 8005a00:	2184      	movs	r1, #132	@ 0x84
 8005a02:	204d      	movs	r0, #77	@ 0x4d
 8005a04:	f7ff ff5e 	bl	80058c4 <writeRegister>
	writeRegister(0x0b, 0x2b);
 8005a08:	212b      	movs	r1, #43	@ 0x2b
 8005a0a:	200b      	movs	r0, #11
 8005a0c:	f7ff ff5a 	bl	80058c4 <writeRegister>
	writeRegister(0x09, 0x8f);
 8005a10:	218f      	movs	r1, #143	@ 0x8f
 8005a12:	2009      	movs	r0, #9
 8005a14:	f7ff ff56 	bl	80058c4 <writeRegister>
	writeRegister(0x40, 0X40); // anh xa tx done
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	2040      	movs	r0, #64	@ 0x40
 8005a1c:	f7ff ff52 	bl	80058c4 <writeRegister>
	standby_mode();
 8005a20:	f7ff ff80 	bl	8005924 <standby_mode>
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	424102b8 	.word	0x424102b8

08005a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return 1;
 8005a34:	2301      	movs	r3, #1
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_kill>:

int _kill(int pid, int sig)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a4a:	f005 f863 	bl	800ab14 <__errno>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2216      	movs	r2, #22
 8005a52:	601a      	str	r2, [r3, #0]
  return -1;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_exit>:

void _exit (int status)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a68:	f04f 31ff 	mov.w	r1, #4294967295
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffe7 	bl	8005a40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a72:	bf00      	nop
 8005a74:	e7fd      	b.n	8005a72 <_exit+0x12>

08005a76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e00a      	b.n	8005a9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a88:	f3af 8000 	nop.w
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	60ba      	str	r2, [r7, #8]
 8005a94:	b2ca      	uxtb	r2, r1
 8005a96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	dbf0      	blt.n	8005a88 <_read+0x12>
  }

  return len;
 8005aa6:	687b      	ldr	r3, [r7, #4]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e009      	b.n	8005ad6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	60ba      	str	r2, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	dbf1      	blt.n	8005ac2 <_write+0x12>
  }
  return len;
 8005ade:	687b      	ldr	r3, [r7, #4]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_close>:

int _close(int file)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b10:	605a      	str	r2, [r3, #4]
  return 0;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <_isatty>:

int _isatty(int file)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b28:	2301      	movs	r3, #1
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b58:	4a14      	ldr	r2, [pc, #80]	@ (8005bac <_sbrk+0x5c>)
 8005b5a:	4b15      	ldr	r3, [pc, #84]	@ (8005bb0 <_sbrk+0x60>)
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b64:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <_sbrk+0x64>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b6c:	4b11      	ldr	r3, [pc, #68]	@ (8005bb4 <_sbrk+0x64>)
 8005b6e:	4a12      	ldr	r2, [pc, #72]	@ (8005bb8 <_sbrk+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b72:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <_sbrk+0x64>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4413      	add	r3, r2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d207      	bcs.n	8005b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b80:	f004 ffc8 	bl	800ab14 <__errno>
 8005b84:	4603      	mov	r3, r0
 8005b86:	220c      	movs	r2, #12
 8005b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e009      	b.n	8005ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b90:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <_sbrk+0x64>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b96:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <_sbrk+0x64>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4a05      	ldr	r2, [pc, #20]	@ (8005bb4 <_sbrk+0x64>)
 8005ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20020000 	.word	0x20020000
 8005bb0:	00000400 	.word	0x00000400
 8005bb4:	2000062c 	.word	0x2000062c
 8005bb8:	20000780 	.word	0x20000780

08005bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <SystemInit+0x20>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc6:	4a05      	ldr	r2, [pc, #20]	@ (8005bdc <SystemInit+0x20>)
 8005bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <remap>:


extern SPI_HandleTypeDef hspi1;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	ed87 0a05 	vstr	s0, [r7, #20]
 8005bea:	edc7 0a04 	vstr	s1, [r7, #16]
 8005bee:	ed87 1a03 	vstr	s2, [r7, #12]
 8005bf2:	edc7 1a02 	vstr	s3, [r7, #8]
 8005bf6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005bfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c06:	edd7 6a01 	vldr	s13, [r7, #4]
 8005c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <getRaw>:
	HAL_SPI_Transmit(&hspi1, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	4603      	mov	r3, r0
 8005c44:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2101      	movs	r1, #1
 8005c4a:	481a      	ldr	r0, [pc, #104]	@ (8005cb4 <getRaw+0x78>)
 8005c4c:	f001 f816 	bl	8006c7c <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_SPI_Transmit(&hspi1, &address, 1, 1000);
 8005c50:	1df9      	adds	r1, r7, #7
 8005c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c56:	2201      	movs	r2, #1
 8005c58:	4817      	ldr	r0, [pc, #92]	@ (8005cb8 <getRaw+0x7c>)
 8005c5a:	f001 fd62 	bl	8007722 <HAL_SPI_Transmit>
	address = 0x00;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &address, &data, sizeof(data), 1000);
 8005c62:	f107 020b 	add.w	r2, r7, #11
 8005c66:	1df9      	adds	r1, r7, #7
 8005c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4811      	ldr	r0, [pc, #68]	@ (8005cb8 <getRaw+0x7c>)
 8005c72:	f001 ffb3 	bl	8007bdc <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi1, &address, &data, sizeof(data), 1000);
 8005c7e:	f107 020b 	add.w	r2, r7, #11
 8005c82:	1df9      	adds	r1, r7, #7
 8005c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	480a      	ldr	r0, [pc, #40]	@ (8005cb8 <getRaw+0x7c>)
 8005c8e:	f001 ffa5 	bl	8007bdc <HAL_SPI_TransmitReceive>
	LSB = data;
 8005c92:	7afb      	ldrb	r3, [r7, #11]
 8005c94:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8005c96:	2201      	movs	r2, #1
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4806      	ldr	r0, [pc, #24]	@ (8005cb4 <getRaw+0x78>)
 8005c9c:	f000 ffee 	bl	8006c7c <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8005ca0:	89fb      	ldrh	r3, [r7, #14]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	89bb      	ldrh	r3, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	10db      	asrs	r3, r3, #3
 8005caa:	b29b      	uxth	r3, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	20000214 	.word	0x20000214

08005cbc <X>:

inline static uint16_t X(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005cc2:	20d0      	movs	r0, #208	@ 0xd0
 8005cc4:	f7ff ffba 	bl	8005c3c <getRaw>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd2:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8005d20 <X+0x64>
 8005cd6:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8005d24 <X+0x68>
 8005cda:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8005d28 <X+0x6c>
 8005cde:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005d2c <X+0x70>
 8005ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ce6:	f7ff ff7b 	bl	8005be0 <remap>
 8005cea:	eef0 7a40 	vmov.f32	s15, s0
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 3a90 	vmov	r3, s15
 8005cf6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005cfe:	3301      	adds	r3, #1
 8005d00:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <X+0x58>
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8005d0e:	d801      	bhi.n	8005d14 <X+0x58>
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	e000      	b.n	8005d16 <X+0x5a>
	else return 0;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	439f8000 	.word	0x439f8000
 8005d24:	00000000 	.word	0x00000000
 8005d28:	456d8000 	.word	0x456d8000
 8005d2c:	43960000 	.word	0x43960000

08005d30 <Y>:

inline static uint16_t Y(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8005d36:	2090      	movs	r0, #144	@ 0x90
 8005d38:	f7ff ff80 	bl	8005c3c <getRaw>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8005d94 <Y+0x64>
 8005d4a:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8005d98 <Y+0x68>
 8005d4e:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8005d9c <Y+0x6c>
 8005d52:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8005da0 <Y+0x70>
 8005d56:	eeb0 0a67 	vmov.f32	s0, s15
 8005d5a:	f7ff ff41 	bl	8005be0 <remap>
 8005d5e:	eef0 7a40 	vmov.f32	s15, s0
 8005d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d66:	ee17 3a90 	vmov	r3, s15
 8005d6a:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 8005d72:	3301      	adds	r3, #1
 8005d74:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <Y+0x58>
 8005d7c:	88fb      	ldrh	r3, [r7, #6]
 8005d7e:	f5b3 7fef 	cmp.w	r3, #478	@ 0x1de
 8005d82:	d801      	bhi.n	8005d88 <Y+0x58>
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	e000      	b.n	8005d8a <Y+0x5a>
	else return 0;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	43ef8000 	.word	0x43ef8000
 8005d98:	00000000 	.word	0x00000000
 8005d9c:	456a6000 	.word	0x456a6000
 8005da0:	43c80000 	.word	0x43c80000

08005da4 <getX>:

uint16_t getX(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
		}
		return x[0];
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
 8005daa:	f7ff ffc1 	bl	8005d30 <Y>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <getY>:

uint16_t getY(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
		}
		return y[0];
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
 8005dbe:	f7ff ff7d 	bl	8005cbc <X>
 8005dc2:	4603      	mov	r3, r0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005e04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005dd0:	f7ff fef4 	bl	8005bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005dd4:	480c      	ldr	r0, [pc, #48]	@ (8005e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005dd6:	490d      	ldr	r1, [pc, #52]	@ (8005e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ddc:	e002      	b.n	8005de4 <LoopCopyDataInit>

08005dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005de2:	3304      	adds	r3, #4

08005de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005de8:	d3f9      	bcc.n	8005dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dea:	4a0a      	ldr	r2, [pc, #40]	@ (8005e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005dec:	4c0a      	ldr	r4, [pc, #40]	@ (8005e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005df0:	e001      	b.n	8005df6 <LoopFillZerobss>

08005df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005df4:	3204      	adds	r2, #4

08005df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005df8:	d3fb      	bcc.n	8005df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dfa:	f004 fe91 	bl	800ab20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dfe:	f7fe fcc7 	bl	8004790 <main>
  bx  lr    
 8005e02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005e10:	0800f598 	.word	0x0800f598
  ldr r2, =_sbss
 8005e14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005e18:	20000780 	.word	0x20000780

08005e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e1c:	e7fe      	b.n	8005e1c <ADC_IRQHandler>
	...

08005e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e24:	4b0e      	ldr	r3, [pc, #56]	@ (8005e60 <HAL_Init+0x40>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a0d      	ldr	r2, [pc, #52]	@ (8005e60 <HAL_Init+0x40>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e30:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <HAL_Init+0x40>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0a      	ldr	r2, [pc, #40]	@ (8005e60 <HAL_Init+0x40>)
 8005e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e3c:	4b08      	ldr	r3, [pc, #32]	@ (8005e60 <HAL_Init+0x40>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a07      	ldr	r2, [pc, #28]	@ (8005e60 <HAL_Init+0x40>)
 8005e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f000 f94f 	bl	80060ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e4e:	200f      	movs	r0, #15
 8005e50:	f000 f808 	bl	8005e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e54:	f7ff fad6 	bl	8005404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023c00 	.word	0x40023c00

08005e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e6c:	4b12      	ldr	r3, [pc, #72]	@ (8005eb8 <HAL_InitTick+0x54>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b12      	ldr	r3, [pc, #72]	@ (8005ebc <HAL_InitTick+0x58>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 f967 	bl	8006156 <HAL_SYSTICK_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e00e      	b.n	8005eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b0f      	cmp	r3, #15
 8005e96:	d80a      	bhi.n	8005eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e98:	2200      	movs	r2, #0
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea0:	f000 f92f 	bl	8006102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ea4:	4a06      	ldr	r2, [pc, #24]	@ (8005ec0 <HAL_InitTick+0x5c>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e000      	b.n	8005eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	2000001c 	.word	0x2000001c
 8005ebc:	20000024 	.word	0x20000024
 8005ec0:	20000020 	.word	0x20000020

08005ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_IncTick+0x20>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <HAL_IncTick+0x24>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <HAL_IncTick+0x24>)
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000024 	.word	0x20000024
 8005ee8:	20000630 	.word	0x20000630

08005eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return uwTick;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <HAL_GetTick+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000630 	.word	0x20000630

08005f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f0c:	f7ff ffee 	bl	8005eec <HAL_GetTick>
 8005f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1c:	d005      	beq.n	8005f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <HAL_Delay+0x44>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f2a:	bf00      	nop
 8005f2c:	f7ff ffde 	bl	8005eec <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d8f7      	bhi.n	8005f2c <HAL_Delay+0x28>
  {
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000024 	.word	0x20000024

08005f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f90 <__NVIC_SetPriorityGrouping+0x44>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f7e:	4a04      	ldr	r2, [pc, #16]	@ (8005f90 <__NVIC_SetPriorityGrouping+0x44>)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	60d3      	str	r3, [r2, #12]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f98:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <__NVIC_GetPriorityGrouping+0x18>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	f003 0307 	and.w	r3, r3, #7
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	e000ed00 	.word	0xe000ed00

08005fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	db0b      	blt.n	8005fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	f003 021f 	and.w	r2, r3, #31
 8005fc8:	4907      	ldr	r1, [pc, #28]	@ (8005fe8 <__NVIC_EnableIRQ+0x38>)
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	e000e100 	.word	0xe000e100

08005fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	6039      	str	r1, [r7, #0]
 8005ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	db0a      	blt.n	8006016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	490c      	ldr	r1, [pc, #48]	@ (8006038 <__NVIC_SetPriority+0x4c>)
 8006006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600a:	0112      	lsls	r2, r2, #4
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	440b      	add	r3, r1
 8006010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006014:	e00a      	b.n	800602c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4908      	ldr	r1, [pc, #32]	@ (800603c <__NVIC_SetPriority+0x50>)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	3b04      	subs	r3, #4
 8006024:	0112      	lsls	r2, r2, #4
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	440b      	add	r3, r1
 800602a:	761a      	strb	r2, [r3, #24]
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	e000e100 	.word	0xe000e100
 800603c:	e000ed00 	.word	0xe000ed00

08006040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006040:	b480      	push	{r7}
 8006042:	b089      	sub	sp, #36	@ 0x24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f1c3 0307 	rsb	r3, r3, #7
 800605a:	2b04      	cmp	r3, #4
 800605c:	bf28      	it	cs
 800605e:	2304      	movcs	r3, #4
 8006060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	3304      	adds	r3, #4
 8006066:	2b06      	cmp	r3, #6
 8006068:	d902      	bls.n	8006070 <NVIC_EncodePriority+0x30>
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3b03      	subs	r3, #3
 800606e:	e000      	b.n	8006072 <NVIC_EncodePriority+0x32>
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006074:	f04f 32ff 	mov.w	r2, #4294967295
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43da      	mvns	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	401a      	ands	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006088:	f04f 31ff 	mov.w	r1, #4294967295
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	fa01 f303 	lsl.w	r3, r1, r3
 8006092:	43d9      	mvns	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006098:	4313      	orrs	r3, r2
         );
}
 800609a:	4618      	mov	r0, r3
 800609c:	3724      	adds	r7, #36	@ 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060b8:	d301      	bcc.n	80060be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060ba:	2301      	movs	r3, #1
 80060bc:	e00f      	b.n	80060de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060be:	4a0a      	ldr	r2, [pc, #40]	@ (80060e8 <SysTick_Config+0x40>)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060c6:	210f      	movs	r1, #15
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	f7ff ff8e 	bl	8005fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <SysTick_Config+0x40>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060d6:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <SysTick_Config+0x40>)
 80060d8:	2207      	movs	r2, #7
 80060da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	e000e010 	.word	0xe000e010

080060ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff29 	bl	8005f4c <__NVIC_SetPriorityGrouping>
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006102:	b580      	push	{r7, lr}
 8006104:	b086      	sub	sp, #24
 8006106:	af00      	add	r7, sp, #0
 8006108:	4603      	mov	r3, r0
 800610a:	60b9      	str	r1, [r7, #8]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006114:	f7ff ff3e 	bl	8005f94 <__NVIC_GetPriorityGrouping>
 8006118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	6978      	ldr	r0, [r7, #20]
 8006120:	f7ff ff8e 	bl	8006040 <NVIC_EncodePriority>
 8006124:	4602      	mov	r2, r0
 8006126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff ff5d 	bl	8005fec <__NVIC_SetPriority>
}
 8006132:	bf00      	nop
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	4603      	mov	r3, r0
 8006142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff ff31 	bl	8005fb0 <__NVIC_EnableIRQ>
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ffa2 	bl	80060a8 <SysTick_Config>
 8006164:	4603      	mov	r3, r0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800617c:	f7ff feb6 	bl	8005eec <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e099      	b.n	80062c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ac:	e00f      	b.n	80061ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061ae:	f7ff fe9d 	bl	8005eec <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b05      	cmp	r3, #5
 80061ba:	d908      	bls.n	80061ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2203      	movs	r2, #3
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e078      	b.n	80062c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e8      	bne.n	80061ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4b38      	ldr	r3, [pc, #224]	@ (80062c8 <HAL_DMA_Init+0x158>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	2b04      	cmp	r3, #4
 8006226:	d107      	bne.n	8006238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	4313      	orrs	r3, r2
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	2b04      	cmp	r3, #4
 8006260:	d117      	bne.n	8006292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb01 	bl	800687c <DMA_CheckFifoParam>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2240      	movs	r2, #64	@ 0x40
 8006284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800628e:	2301      	movs	r3, #1
 8006290:	e016      	b.n	80062c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fab8 	bl	8006810 <DMA_CalcBaseAndBitshift>
 80062a0:	4603      	mov	r3, r0
 80062a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a8:	223f      	movs	r2, #63	@ 0x3f
 80062aa:	409a      	lsls	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	f010803f 	.word	0xf010803f

080062cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_DMA_Start_IT+0x26>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e040      	b.n	8006374 <HAL_DMA_Start_IT+0xa8>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	d12f      	bne.n	8006366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2202      	movs	r2, #2
 800630a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fa4a 	bl	80067b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006324:	223f      	movs	r2, #63	@ 0x3f
 8006326:	409a      	lsls	r2, r3
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0216 	orr.w	r2, r2, #22
 800633a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0208 	orr.w	r2, r2, #8
 8006352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e005      	b.n	8006372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800636e:	2302      	movs	r3, #2
 8006370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800638a:	f7ff fdaf 	bl	8005eec <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d008      	beq.n	80063ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2280      	movs	r2, #128	@ 0x80
 80063a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e052      	b.n	8006454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0216 	bic.w	r2, r2, #22
 80063bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_DMA_Abort+0x62>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d007      	beq.n	80063ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0208 	bic.w	r2, r2, #8
 80063ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0201 	bic.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063fe:	e013      	b.n	8006428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006400:	f7ff fd74 	bl	8005eec <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b05      	cmp	r3, #5
 800640c:	d90c      	bls.n	8006428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2203      	movs	r2, #3
 8006418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e015      	b.n	8006454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e4      	bne.n	8006400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643a:	223f      	movs	r2, #63	@ 0x3f
 800643c:	409a      	lsls	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d004      	beq.n	800647a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2280      	movs	r2, #128	@ 0x80
 8006474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e00c      	b.n	8006494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2205      	movs	r2, #5
 800647e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064ac:	4b8e      	ldr	r3, [pc, #568]	@ (80066e8 <HAL_DMA_IRQHandler+0x248>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a8e      	ldr	r2, [pc, #568]	@ (80066ec <HAL_DMA_IRQHandler+0x24c>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	0a9b      	lsrs	r3, r3, #10
 80064b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ca:	2208      	movs	r2, #8
 80064cc:	409a      	lsls	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d01a      	beq.n	800650c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d013      	beq.n	800650c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f8:	2208      	movs	r2, #8
 80064fa:	409a      	lsls	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	f043 0201 	orr.w	r2, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006510:	2201      	movs	r2, #1
 8006512:	409a      	lsls	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d012      	beq.n	8006542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652e:	2201      	movs	r2, #1
 8006530:	409a      	lsls	r2, r3
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	f043 0202 	orr.w	r2, r3, #2
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	2204      	movs	r2, #4
 8006548:	409a      	lsls	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d012      	beq.n	8006578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	2204      	movs	r2, #4
 8006566:	409a      	lsls	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	f043 0204 	orr.w	r2, r3, #4
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	2210      	movs	r2, #16
 800657e:	409a      	lsls	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d043      	beq.n	8006610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d03c      	beq.n	8006610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659a:	2210      	movs	r2, #16
 800659c:	409a      	lsls	r2, r3
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d018      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d108      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d024      	beq.n	8006610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	e01f      	b.n	8006610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01b      	beq.n	8006610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
 80065e0:	e016      	b.n	8006610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d107      	bne.n	8006600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0208 	bic.w	r2, r2, #8
 80065fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d003      	beq.n	8006610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006614:	2220      	movs	r2, #32
 8006616:	409a      	lsls	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 808f 	beq.w	8006740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8087 	beq.w	8006740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006636:	2220      	movs	r2, #32
 8006638:	409a      	lsls	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b05      	cmp	r3, #5
 8006648:	d136      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0216 	bic.w	r2, r2, #22
 8006658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <HAL_DMA_IRQHandler+0x1da>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0208 	bic.w	r2, r2, #8
 8006688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668e:	223f      	movs	r2, #63	@ 0x3f
 8006690:	409a      	lsls	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d07e      	beq.n	80067ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	4798      	blx	r3
        }
        return;
 80066b6:	e079      	b.n	80067ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01d      	beq.n	8006702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d031      	beq.n	8006740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	e02c      	b.n	8006740 <HAL_DMA_IRQHandler+0x2a0>
 80066e6:	bf00      	nop
 80066e8:	2000001c 	.word	0x2000001c
 80066ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d023      	beq.n	8006740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
 8006700:	e01e      	b.n	8006740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10f      	bne.n	8006730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0210 	bic.w	r2, r2, #16
 800671e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006744:	2b00      	cmp	r3, #0
 8006746:	d032      	beq.n	80067ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d022      	beq.n	800679a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2205      	movs	r2, #5
 8006758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0201 	bic.w	r2, r2, #1
 800676a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	3301      	adds	r3, #1
 8006770:	60bb      	str	r3, [r7, #8]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	429a      	cmp	r2, r3
 8006776:	d307      	bcc.n	8006788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f2      	bne.n	800676c <HAL_DMA_IRQHandler+0x2cc>
 8006786:	e000      	b.n	800678a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	e000      	b.n	80067ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80067ac:	bf00      	nop
    }
  }
}
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	d108      	bne.n	80067f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067f2:	e007      	b.n	8006804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	3b10      	subs	r3, #16
 8006820:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <DMA_CalcBaseAndBitshift+0x64>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800682a:	4a13      	ldr	r2, [pc, #76]	@ (8006878 <DMA_CalcBaseAndBitshift+0x68>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b03      	cmp	r3, #3
 800683c:	d909      	bls.n	8006852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006850:	e007      	b.n	8006862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	aaaaaaab 	.word	0xaaaaaaab
 8006878:	0800f210 	.word	0x0800f210

0800687c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11f      	bne.n	80068d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d856      	bhi.n	800694a <DMA_CheckFifoParam+0xce>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <DMA_CheckFifoParam+0x28>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c7 	.word	0x080068c7
 80068ac:	080068b5 	.word	0x080068b5
 80068b0:	0800694b 	.word	0x0800694b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d046      	beq.n	800694e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c4:	e043      	b.n	800694e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80068ce:	d140      	bne.n	8006952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d4:	e03d      	b.n	8006952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068de:	d121      	bne.n	8006924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d837      	bhi.n	8006956 <DMA_CheckFifoParam+0xda>
 80068e6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <DMA_CheckFifoParam+0x70>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006903 	.word	0x08006903
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006915 	.word	0x08006915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e030      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d025      	beq.n	800695a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006912:	e022      	b.n	800695a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800691c:	d11f      	bne.n	800695e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006922:	e01c      	b.n	800695e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d903      	bls.n	8006932 <DMA_CheckFifoParam+0xb6>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d003      	beq.n	8006938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006930:	e018      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e015      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e00b      	b.n	8006962 <DMA_CheckFifoParam+0xe6>
      break;
 800694a:	bf00      	nop
 800694c:	e00a      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800694e:	bf00      	nop
 8006950:	e008      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006952:	bf00      	nop
 8006954:	e006      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006956:	bf00      	nop
 8006958:	e004      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;   
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006962:	bf00      	nop
    }
  } 
  
  return status; 
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	@ 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	e159      	b.n	8006c44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006990:	2201      	movs	r2, #1
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	fa02 f303 	lsl.w	r3, r2, r3
 8006998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4013      	ands	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	f040 8148 	bne.w	8006c3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d005      	beq.n	80069c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d130      	bne.n	8006a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	2203      	movs	r2, #3
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43db      	mvns	r3, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069fc:	2201      	movs	r2, #1
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	fa02 f303 	lsl.w	r3, r2, r3
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 0201 	and.w	r2, r3, #1
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69ba      	ldr	r2, [r7, #24]
 8006a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d017      	beq.n	8006a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	2203      	movs	r2, #3
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d123      	bne.n	8006ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	08da      	lsrs	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3208      	adds	r2, #8
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	220f      	movs	r2, #15
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	08da      	lsrs	r2, r3, #3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3208      	adds	r2, #8
 8006ab2:	69b9      	ldr	r1, [r7, #24]
 8006ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	43db      	mvns	r3, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4013      	ands	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f003 0203 	and.w	r2, r3, #3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80a2 	beq.w	8006c3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	4b57      	ldr	r3, [pc, #348]	@ (8006c5c <HAL_GPIO_Init+0x2e8>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	4a56      	ldr	r2, [pc, #344]	@ (8006c5c <HAL_GPIO_Init+0x2e8>)
 8006b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b0a:	4b54      	ldr	r3, [pc, #336]	@ (8006c5c <HAL_GPIO_Init+0x2e8>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b16:	4a52      	ldr	r2, [pc, #328]	@ (8006c60 <HAL_GPIO_Init+0x2ec>)
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	220f      	movs	r2, #15
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a49      	ldr	r2, [pc, #292]	@ (8006c64 <HAL_GPIO_Init+0x2f0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d019      	beq.n	8006b76 <HAL_GPIO_Init+0x202>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a48      	ldr	r2, [pc, #288]	@ (8006c68 <HAL_GPIO_Init+0x2f4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d013      	beq.n	8006b72 <HAL_GPIO_Init+0x1fe>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a47      	ldr	r2, [pc, #284]	@ (8006c6c <HAL_GPIO_Init+0x2f8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00d      	beq.n	8006b6e <HAL_GPIO_Init+0x1fa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a46      	ldr	r2, [pc, #280]	@ (8006c70 <HAL_GPIO_Init+0x2fc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <HAL_GPIO_Init+0x1f6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a45      	ldr	r2, [pc, #276]	@ (8006c74 <HAL_GPIO_Init+0x300>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d101      	bne.n	8006b66 <HAL_GPIO_Init+0x1f2>
 8006b62:	2304      	movs	r3, #4
 8006b64:	e008      	b.n	8006b78 <HAL_GPIO_Init+0x204>
 8006b66:	2307      	movs	r3, #7
 8006b68:	e006      	b.n	8006b78 <HAL_GPIO_Init+0x204>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e004      	b.n	8006b78 <HAL_GPIO_Init+0x204>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e002      	b.n	8006b78 <HAL_GPIO_Init+0x204>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <HAL_GPIO_Init+0x204>
 8006b76:	2300      	movs	r3, #0
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	f002 0203 	and.w	r2, r2, #3
 8006b7e:	0092      	lsls	r2, r2, #2
 8006b80:	4093      	lsls	r3, r2
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b88:	4935      	ldr	r1, [pc, #212]	@ (8006c60 <HAL_GPIO_Init+0x2ec>)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	3302      	adds	r3, #2
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b96:	4b38      	ldr	r3, [pc, #224]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bba:	4a2f      	ldr	r2, [pc, #188]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006be4:	4a24      	ldr	r2, [pc, #144]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bea:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c14:	4b18      	ldr	r3, [pc, #96]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	43db      	mvns	r3, r3
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	4013      	ands	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c38:	4a0f      	ldr	r2, [pc, #60]	@ (8006c78 <HAL_GPIO_Init+0x304>)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	3301      	adds	r3, #1
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	f67f aea2 	bls.w	8006990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	3724      	adds	r7, #36	@ 0x24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40013800 	.word	0x40013800
 8006c64:	40020000 	.word	0x40020000
 8006c68:	40020400 	.word	0x40020400
 8006c6c:	40020800 	.word	0x40020800
 8006c70:	40020c00 	.word	0x40020c00
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40013c00 	.word	0x40013c00

08006c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c8c:	787b      	ldrb	r3, [r7, #1]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c92:	887a      	ldrh	r2, [r7, #2]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c98:	e003      	b.n	8006ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c9a:	887b      	ldrh	r3, [r7, #2]
 8006c9c:	041a      	lsls	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	619a      	str	r2, [r3, #24]
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006cba:	4b08      	ldr	r3, [pc, #32]	@ (8006cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d006      	beq.n	8006cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006cc6:	4a05      	ldr	r2, [pc, #20]	@ (8006cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006cc8:	88fb      	ldrh	r3, [r7, #6]
 8006cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fd fbea 	bl	80044a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40013c00 	.word	0x40013c00

08006ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e267      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d075      	beq.n	8006dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006cfe:	4b88      	ldr	r3, [pc, #544]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d00c      	beq.n	8006d24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d0a:	4b85      	ldr	r3, [pc, #532]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d112      	bne.n	8006d3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d16:	4b82      	ldr	r3, [pc, #520]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d22:	d10b      	bne.n	8006d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d24:	4b7e      	ldr	r3, [pc, #504]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d05b      	beq.n	8006de8 <HAL_RCC_OscConfig+0x108>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d157      	bne.n	8006de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e242      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d44:	d106      	bne.n	8006d54 <HAL_RCC_OscConfig+0x74>
 8006d46:	4b76      	ldr	r3, [pc, #472]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a75      	ldr	r2, [pc, #468]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e01d      	b.n	8006d90 <HAL_RCC_OscConfig+0xb0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d5c:	d10c      	bne.n	8006d78 <HAL_RCC_OscConfig+0x98>
 8006d5e:	4b70      	ldr	r3, [pc, #448]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a6f      	ldr	r2, [pc, #444]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e00b      	b.n	8006d90 <HAL_RCC_OscConfig+0xb0>
 8006d78:	4b69      	ldr	r3, [pc, #420]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a68      	ldr	r2, [pc, #416]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4b66      	ldr	r3, [pc, #408]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a65      	ldr	r2, [pc, #404]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d013      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7ff f8a8 	bl	8005eec <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da0:	f7ff f8a4 	bl	8005eec <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	@ 0x64
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e207      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	4b5b      	ldr	r3, [pc, #364]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0xc0>
 8006dbe:	e014      	b.n	8006dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7ff f894 	bl	8005eec <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc8:	f7ff f890 	bl	8005eec <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b64      	cmp	r3, #100	@ 0x64
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e1f3      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dda:	4b51      	ldr	r3, [pc, #324]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0xe8>
 8006de6:	e000      	b.n	8006dea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d063      	beq.n	8006ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006df6:	4b4a      	ldr	r3, [pc, #296]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e02:	4b47      	ldr	r3, [pc, #284]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d11c      	bne.n	8006e48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e0e:	4b44      	ldr	r3, [pc, #272]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d116      	bne.n	8006e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e1a:	4b41      	ldr	r3, [pc, #260]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_RCC_OscConfig+0x152>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d001      	beq.n	8006e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e1c7      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b3b      	ldr	r3, [pc, #236]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4937      	ldr	r1, [pc, #220]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e46:	e03a      	b.n	8006ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d020      	beq.n	8006e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e50:	4b34      	ldr	r3, [pc, #208]	@ (8006f24 <HAL_RCC_OscConfig+0x244>)
 8006e52:	2201      	movs	r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e56:	f7ff f849 	bl	8005eec <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5e:	f7ff f845 	bl	8005eec <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e1a8      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e70:	4b2b      	ldr	r3, [pc, #172]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7c:	4b28      	ldr	r3, [pc, #160]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	00db      	lsls	r3, r3, #3
 8006e8a:	4925      	ldr	r1, [pc, #148]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]
 8006e90:	e015      	b.n	8006ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e92:	4b24      	ldr	r3, [pc, #144]	@ (8006f24 <HAL_RCC_OscConfig+0x244>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7ff f828 	bl	8005eec <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ea0:	f7ff f824 	bl	8005eec <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e187      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ed2:	4b15      	ldr	r3, [pc, #84]	@ (8006f28 <HAL_RCC_OscConfig+0x248>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed8:	f7ff f808 	bl	8005eec <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee0:	f7ff f804 	bl	8005eec <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e167      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x200>
 8006efe:	e01b      	b.n	8006f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f00:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <HAL_RCC_OscConfig+0x248>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f06:	f7fe fff1 	bl	8005eec <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f0c:	e00e      	b.n	8006f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f0e:	f7fe ffed 	bl	8005eec <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d907      	bls.n	8006f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e150      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
 8006f20:	40023800 	.word	0x40023800
 8006f24:	42470000 	.word	0x42470000
 8006f28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	4b88      	ldr	r3, [pc, #544]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1ea      	bne.n	8006f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0304 	and.w	r3, r3, #4
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 8097 	beq.w	8007074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4a:	4b81      	ldr	r3, [pc, #516]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10f      	bne.n	8006f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f66:	4b7a      	ldr	r3, [pc, #488]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f76:	4b77      	ldr	r3, [pc, #476]	@ (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d118      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f82:	4b74      	ldr	r3, [pc, #464]	@ (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a73      	ldr	r2, [pc, #460]	@ (8007154 <HAL_RCC_OscConfig+0x474>)
 8006f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f8e:	f7fe ffad 	bl	8005eec <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f96:	f7fe ffa9 	bl	8005eec <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e10c      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8007154 <HAL_RCC_OscConfig+0x474>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d0f0      	beq.n	8006f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d106      	bne.n	8006fca <HAL_RCC_OscConfig+0x2ea>
 8006fbc:	4b64      	ldr	r3, [pc, #400]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	4a63      	ldr	r2, [pc, #396]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f043 0301 	orr.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc8:	e01c      	b.n	8007004 <HAL_RCC_OscConfig+0x324>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x30c>
 8006fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fd8:	f043 0304 	orr.w	r3, r3, #4
 8006fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fde:	4b5c      	ldr	r3, [pc, #368]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fea:	e00b      	b.n	8007004 <HAL_RCC_OscConfig+0x324>
 8006fec:	4b58      	ldr	r3, [pc, #352]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff0:	4a57      	ldr	r2, [pc, #348]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff8:	4b55      	ldr	r3, [pc, #340]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffc:	4a54      	ldr	r2, [pc, #336]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8006ffe:	f023 0304 	bic.w	r3, r3, #4
 8007002:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700c:	f7fe ff6e 	bl	8005eec <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007012:	e00a      	b.n	800702a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007014:	f7fe ff6a 	bl	8005eec <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007022:	4293      	cmp	r3, r2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0cb      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702a:	4b49      	ldr	r3, [pc, #292]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0ee      	beq.n	8007014 <HAL_RCC_OscConfig+0x334>
 8007036:	e014      	b.n	8007062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007038:	f7fe ff58 	bl	8005eec <HAL_GetTick>
 800703c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800703e:	e00a      	b.n	8007056 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007040:	f7fe ff54 	bl	8005eec <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e0b5      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007056:	4b3e      	ldr	r3, [pc, #248]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ee      	bne.n	8007040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d105      	bne.n	8007074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007068:	4b39      	ldr	r3, [pc, #228]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	4a38      	ldr	r2, [pc, #224]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007072:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80a1 	beq.w	80071c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800707e:	4b34      	ldr	r3, [pc, #208]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b08      	cmp	r3, #8
 8007088:	d05c      	beq.n	8007144 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d141      	bne.n	8007116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007092:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <HAL_RCC_OscConfig+0x478>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007098:	f7fe ff28 	bl	8005eec <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a0:	f7fe ff24 	bl	8005eec <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e087      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b2:	4b27      	ldr	r3, [pc, #156]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f0      	bne.n	80070a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69da      	ldr	r2, [r3, #28]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	019b      	lsls	r3, r3, #6
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	3b01      	subs	r3, #1
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	491b      	ldr	r1, [pc, #108]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007158 <HAL_RCC_OscConfig+0x478>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fe fefd 	bl	8005eec <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f6:	f7fe fef9 	bl	8005eec <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e05c      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007108:	4b11      	ldr	r3, [pc, #68]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x416>
 8007114:	e054      	b.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007116:	4b10      	ldr	r3, [pc, #64]	@ (8007158 <HAL_RCC_OscConfig+0x478>)
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800711c:	f7fe fee6 	bl	8005eec <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007124:	f7fe fee2 	bl	8005eec <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e045      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007136:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RCC_OscConfig+0x470>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f0      	bne.n	8007124 <HAL_RCC_OscConfig+0x444>
 8007142:	e03d      	b.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d107      	bne.n	800715c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e038      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
 8007150:	40023800 	.word	0x40023800
 8007154:	40007000 	.word	0x40007000
 8007158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800715c:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <HAL_RCC_OscConfig+0x4ec>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d028      	beq.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d121      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d11a      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800718c:	4013      	ands	r3, r2
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007194:	4293      	cmp	r3, r2
 8007196:	d111      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	3b01      	subs	r3, #1
 80071a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d107      	bne.n	80071bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d001      	beq.n	80071c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40023800 	.word	0x40023800

080071d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0cc      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071e4:	4b68      	ldr	r3, [pc, #416]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d90c      	bls.n	800720c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071f2:	4b65      	ldr	r3, [pc, #404]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	4b63      	ldr	r3, [pc, #396]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d001      	beq.n	800720c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0b8      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007224:	4b59      	ldr	r3, [pc, #356]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4a58      	ldr	r2, [pc, #352]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800722a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800722e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800723c:	4b53      	ldr	r3, [pc, #332]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a52      	ldr	r2, [pc, #328]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007248:	4b50      	ldr	r3, [pc, #320]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	494d      	ldr	r1, [pc, #308]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	4313      	orrs	r3, r2
 8007258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d044      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d107      	bne.n	800727e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726e:	4b47      	ldr	r3, [pc, #284]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d119      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e07f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d003      	beq.n	800728e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800728a:	2b03      	cmp	r3, #3
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800728e:	4b3f      	ldr	r3, [pc, #252]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e06f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800729e:	4b3b      	ldr	r3, [pc, #236]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e067      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ae:	4b37      	ldr	r3, [pc, #220]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 0203 	bic.w	r2, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4934      	ldr	r1, [pc, #208]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072c0:	f7fe fe14 	bl	8005eec <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	e00a      	b.n	80072de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c8:	f7fe fe10 	bl	8005eec <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e04f      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	4b2b      	ldr	r3, [pc, #172]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 020c 	and.w	r2, r3, #12
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1eb      	bne.n	80072c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072f0:	4b25      	ldr	r3, [pc, #148]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20c      	bcs.n	8007318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072fe:	4b22      	ldr	r3, [pc, #136]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007306:	4b20      	ldr	r3, [pc, #128]	@ (8007388 <HAL_RCC_ClockConfig+0x1b8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d001      	beq.n	8007318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e032      	b.n	800737e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007324:	4b19      	ldr	r3, [pc, #100]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	4916      	ldr	r1, [pc, #88]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d009      	beq.n	8007356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007342:	4b12      	ldr	r3, [pc, #72]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	490e      	ldr	r1, [pc, #56]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007356:	f000 f821 	bl	800739c <HAL_RCC_GetSysClockFreq>
 800735a:	4602      	mov	r2, r0
 800735c:	4b0b      	ldr	r3, [pc, #44]	@ (800738c <HAL_RCC_ClockConfig+0x1bc>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	490a      	ldr	r1, [pc, #40]	@ (8007390 <HAL_RCC_ClockConfig+0x1c0>)
 8007368:	5ccb      	ldrb	r3, [r1, r3]
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	4a09      	ldr	r2, [pc, #36]	@ (8007394 <HAL_RCC_ClockConfig+0x1c4>)
 8007370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007372:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <HAL_RCC_ClockConfig+0x1c8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fd74 	bl	8005e64 <HAL_InitTick>

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40023c00 	.word	0x40023c00
 800738c:	40023800 	.word	0x40023800
 8007390:	0800f1f8 	.word	0x0800f1f8
 8007394:	2000001c 	.word	0x2000001c
 8007398:	20000020 	.word	0x20000020

0800739c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800739c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073a0:	b094      	sub	sp, #80	@ 0x50
 80073a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073b4:	4b79      	ldr	r3, [pc, #484]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 030c 	and.w	r3, r3, #12
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d00d      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x40>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	f200 80e1 	bhi.w	8007588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0x34>
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d003      	beq.n	80073d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073ce:	e0db      	b.n	8007588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073d0:	4b73      	ldr	r3, [pc, #460]	@ (80075a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80073d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073d4:	e0db      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073d6:	4b73      	ldr	r3, [pc, #460]	@ (80075a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80073d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073da:	e0d8      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073dc:	4b6f      	ldr	r3, [pc, #444]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073e6:	4b6d      	ldr	r3, [pc, #436]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d063      	beq.n	80074ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073f2:	4b6a      	ldr	r3, [pc, #424]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	2200      	movs	r2, #0
 80073fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007404:	633b      	str	r3, [r7, #48]	@ 0x30
 8007406:	2300      	movs	r3, #0
 8007408:	637b      	str	r3, [r7, #52]	@ 0x34
 800740a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800740e:	4622      	mov	r2, r4
 8007410:	462b      	mov	r3, r5
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f04f 0100 	mov.w	r1, #0
 800741a:	0159      	lsls	r1, r3, #5
 800741c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007420:	0150      	lsls	r0, r2, #5
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4621      	mov	r1, r4
 8007428:	1a51      	subs	r1, r2, r1
 800742a:	6139      	str	r1, [r7, #16]
 800742c:	4629      	mov	r1, r5
 800742e:	eb63 0301 	sbc.w	r3, r3, r1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007440:	4659      	mov	r1, fp
 8007442:	018b      	lsls	r3, r1, #6
 8007444:	4651      	mov	r1, sl
 8007446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800744a:	4651      	mov	r1, sl
 800744c:	018a      	lsls	r2, r1, #6
 800744e:	4651      	mov	r1, sl
 8007450:	ebb2 0801 	subs.w	r8, r2, r1
 8007454:	4659      	mov	r1, fp
 8007456:	eb63 0901 	sbc.w	r9, r3, r1
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800746a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800746e:	4690      	mov	r8, r2
 8007470:	4699      	mov	r9, r3
 8007472:	4623      	mov	r3, r4
 8007474:	eb18 0303 	adds.w	r3, r8, r3
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	462b      	mov	r3, r5
 800747c:	eb49 0303 	adc.w	r3, r9, r3
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800748e:	4629      	mov	r1, r5
 8007490:	024b      	lsls	r3, r1, #9
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007498:	4621      	mov	r1, r4
 800749a:	024a      	lsls	r2, r1, #9
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a2:	2200      	movs	r2, #0
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074ac:	f7f9 fba4 	bl	8000bf8 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4613      	mov	r3, r2
 80074b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074b8:	e058      	b.n	800756c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ba:	4b38      	ldr	r3, [pc, #224]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	099b      	lsrs	r3, r3, #6
 80074c0:	2200      	movs	r2, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	4611      	mov	r1, r2
 80074c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80074ca:	623b      	str	r3, [r7, #32]
 80074cc:	2300      	movs	r3, #0
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80074d4:	4642      	mov	r2, r8
 80074d6:	464b      	mov	r3, r9
 80074d8:	f04f 0000 	mov.w	r0, #0
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	0159      	lsls	r1, r3, #5
 80074e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074e6:	0150      	lsls	r0, r2, #5
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4641      	mov	r1, r8
 80074ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80074f2:	4649      	mov	r1, r9
 80074f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800750c:	ebb2 040a 	subs.w	r4, r2, sl
 8007510:	eb63 050b 	sbc.w	r5, r3, fp
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	00eb      	lsls	r3, r5, #3
 800751e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007522:	00e2      	lsls	r2, r4, #3
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	4643      	mov	r3, r8
 800752a:	18e3      	adds	r3, r4, r3
 800752c:	603b      	str	r3, [r7, #0]
 800752e:	464b      	mov	r3, r9
 8007530:	eb45 0303 	adc.w	r3, r5, r3
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007542:	4629      	mov	r1, r5
 8007544:	028b      	lsls	r3, r1, #10
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800754c:	4621      	mov	r1, r4
 800754e:	028a      	lsls	r2, r1, #10
 8007550:	4610      	mov	r0, r2
 8007552:	4619      	mov	r1, r3
 8007554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007556:	2200      	movs	r2, #0
 8007558:	61bb      	str	r3, [r7, #24]
 800755a:	61fa      	str	r2, [r7, #28]
 800755c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007560:	f7f9 fb4a 	bl	8000bf8 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4613      	mov	r3, r2
 800756a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800756c:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <HAL_RCC_GetSysClockFreq+0x200>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	0c1b      	lsrs	r3, r3, #16
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	3301      	adds	r3, #1
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800757c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800757e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007586:	e002      	b.n	800758e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007588:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800758a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800758c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800758e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007590:	4618      	mov	r0, r3
 8007592:	3750      	adds	r7, #80	@ 0x50
 8007594:	46bd      	mov	sp, r7
 8007596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	007a1200 	.word	0x007a1200

080075a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075ac:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	2000001c 	.word	0x2000001c

080075c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075c4:	f7ff fff0 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	0a9b      	lsrs	r3, r3, #10
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4903      	ldr	r1, [pc, #12]	@ (80075e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	0800f208 	.word	0x0800f208

080075e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075ec:	f7ff ffdc 	bl	80075a8 <HAL_RCC_GetHCLKFreq>
 80075f0:	4602      	mov	r2, r0
 80075f2:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	0b5b      	lsrs	r3, r3, #13
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	4903      	ldr	r1, [pc, #12]	@ (800760c <HAL_RCC_GetPCLK2Freq+0x24>)
 80075fe:	5ccb      	ldrb	r3, [r1, r3]
 8007600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007604:	4618      	mov	r0, r3
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40023800 	.word	0x40023800
 800760c:	0800f208 	.word	0x0800f208

08007610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e07b      	b.n	800771a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d108      	bne.n	800763c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007632:	d009      	beq.n	8007648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	61da      	str	r2, [r3, #28]
 800763a:	e005      	b.n	8007648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7fd fef6 	bl	8005454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800767e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076cc:	ea42 0103 	orr.w	r1, r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	f003 0104 	and.w	r1, r3, #4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	f003 0210 	and.w	r2, r3, #16
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007732:	f7fe fbdb 	bl	8005eec <HAL_GetTick>
 8007736:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b01      	cmp	r3, #1
 8007746:	d001      	beq.n	800774c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
 800774a:	e12a      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_SPI_Transmit+0x36>
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e122      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_SPI_Transmit+0x48>
 8007766:	2302      	movs	r3, #2
 8007768:	e11b      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2203      	movs	r2, #3
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077b8:	d10f      	bne.n	80077da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b40      	cmp	r3, #64	@ 0x40
 80077e6:	d007      	beq.n	80077f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007800:	d152      	bne.n	80078a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_SPI_Transmit+0xee>
 800780a:	8b7b      	ldrh	r3, [r7, #26]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d145      	bne.n	800789c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007814:	881a      	ldrh	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007820:	1c9a      	adds	r2, r3, #2
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007834:	e032      	b.n	800789c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b02      	cmp	r3, #2
 8007842:	d112      	bne.n	800786a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007868:	e018      	b.n	800789c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800786a:	f7fe fb3f 	bl	8005eec <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	683a      	ldr	r2, [r7, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d803      	bhi.n	8007882 <HAL_SPI_Transmit+0x160>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d102      	bne.n	8007888 <HAL_SPI_Transmit+0x166>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e082      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1c7      	bne.n	8007836 <HAL_SPI_Transmit+0x114>
 80078a6:	e053      	b.n	8007950 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SPI_Transmit+0x194>
 80078b0:	8b7b      	ldrh	r3, [r7, #26]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d147      	bne.n	8007946 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078dc:	e033      	b.n	8007946 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d113      	bne.n	8007914 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	7812      	ldrb	r2, [r2, #0]
 80078f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007912:	e018      	b.n	8007946 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007914:	f7fe faea 	bl	8005eec <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d803      	bhi.n	800792c <HAL_SPI_Transmit+0x20a>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d102      	bne.n	8007932 <HAL_SPI_Transmit+0x210>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e02d      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1c6      	bne.n	80078de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fe29 	bl	80085ac <SPI_EndRxTxTransaction>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b088      	sub	sp, #32
 80079ae:	af02      	add	r7, sp, #8
 80079b0:	60f8      	str	r0, [r7, #12]
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	603b      	str	r3, [r7, #0]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d001      	beq.n	80079ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80079c6:	2302      	movs	r3, #2
 80079c8:	e104      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079d2:	d112      	bne.n	80079fa <HAL_SPI_Receive+0x50>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10e      	bne.n	80079fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2204      	movs	r2, #4
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f8f3 	bl	8007bdc <HAL_SPI_TransmitReceive>
 80079f6:	4603      	mov	r3, r0
 80079f8:	e0ec      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079fa:	f7fe fa77 	bl	8005eec <HAL_GetTick>
 80079fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <HAL_SPI_Receive+0x62>
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0e1      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_SPI_Receive+0x74>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e0da      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	88fa      	ldrh	r2, [r7, #6]
 8007a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	88fa      	ldrh	r2, [r7, #6]
 8007a44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a6c:	d10f      	bne.n	8007a8e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a98:	2b40      	cmp	r3, #64	@ 0x40
 8007a9a:	d007      	beq.n	8007aac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d170      	bne.n	8007b96 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ab4:	e035      	b.n	8007b22 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d115      	bne.n	8007af0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f103 020c 	add.w	r2, r3, #12
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007aee:	e018      	b.n	8007b22 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af0:	f7fe f9fc 	bl	8005eec <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d803      	bhi.n	8007b08 <HAL_SPI_Receive+0x15e>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b06:	d102      	bne.n	8007b0e <HAL_SPI_Receive+0x164>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e058      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1c4      	bne.n	8007ab6 <HAL_SPI_Receive+0x10c>
 8007b2c:	e038      	b.n	8007ba0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d113      	bne.n	8007b64 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	b292      	uxth	r2, r2
 8007b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4e:	1c9a      	adds	r2, r3, #2
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b62:	e018      	b.n	8007b96 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b64:	f7fe f9c2 	bl	8005eec <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d803      	bhi.n	8007b7c <HAL_SPI_Receive+0x1d2>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d102      	bne.n	8007b82 <HAL_SPI_Receive+0x1d8>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e01e      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1c6      	bne.n	8007b2e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fc9b 	bl	80084e0 <SPI_EndRxTransaction>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
  }
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	@ 0x28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
 8007be8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bea:	2301      	movs	r3, #1
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bee:	f7fe f97d 	bl	8005eec <HAL_GetTick>
 8007bf2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bfa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c02:	887b      	ldrh	r3, [r7, #2]
 8007c04:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d00c      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x4a>
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c12:	d106      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <HAL_SPI_TransmitReceive+0x46>
 8007c1c:	7ffb      	ldrb	r3, [r7, #31]
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d001      	beq.n	8007c26 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
 8007c24:	e17f      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_SPI_TransmitReceive+0x5c>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <HAL_SPI_TransmitReceive+0x5c>
 8007c32:	887b      	ldrh	r3, [r7, #2]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e174      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_SPI_TransmitReceive+0x6e>
 8007c46:	2302      	movs	r3, #2
 8007c48:	e16d      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d003      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2205      	movs	r2, #5
 8007c62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	887a      	ldrh	r2, [r7, #2]
 8007c76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	887a      	ldrh	r2, [r7, #2]
 8007c88:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	887a      	ldrh	r2, [r7, #2]
 8007c8e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca6:	2b40      	cmp	r3, #64	@ 0x40
 8007ca8:	d007      	beq.n	8007cba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cc2:	d17e      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_SPI_TransmitReceive+0xf6>
 8007ccc:	8afb      	ldrh	r3, [r7, #22]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d16c      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce2:	1c9a      	adds	r2, r3, #2
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf6:	e059      	b.n	8007dac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d11b      	bne.n	8007d3e <HAL_SPI_TransmitReceive+0x162>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d016      	beq.n	8007d3e <HAL_SPI_TransmitReceive+0x162>
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d113      	bne.n	8007d3e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	881a      	ldrh	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d119      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x1a4>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d014      	beq.n	8007d80 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d60:	b292      	uxth	r2, r2
 8007d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d68:	1c9a      	adds	r2, r3, #2
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d80:	f7fe f8b4 	bl	8005eec <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d80d      	bhi.n	8007dac <HAL_SPI_TransmitReceive+0x1d0>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d96:	d009      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e0bc      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1a0      	bne.n	8007cf8 <HAL_SPI_TransmitReceive+0x11c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d19b      	bne.n	8007cf8 <HAL_SPI_TransmitReceive+0x11c>
 8007dc0:	e082      	b.n	8007ec8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x1f4>
 8007dca:	8afb      	ldrh	r3, [r7, #22]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d171      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007df6:	e05d      	b.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d11c      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x264>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d017      	beq.n	8007e40 <HAL_SPI_TransmitReceive+0x264>
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d114      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	7812      	ldrb	r2, [r2, #0]
 8007e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d119      	bne.n	8007e82 <HAL_SPI_TransmitReceive+0x2a6>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d014      	beq.n	8007e82 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e82:	f7fe f833 	bl	8005eec <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d803      	bhi.n	8007e9a <HAL_SPI_TransmitReceive+0x2be>
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d102      	bne.n	8007ea0 <HAL_SPI_TransmitReceive+0x2c4>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e038      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d19c      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x21c>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d197      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ec8:	6a3a      	ldr	r2, [r7, #32]
 8007eca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fb6d 	bl	80085ac <SPI_EndRxTxTransaction>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d008      	beq.n	8007eea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e01d      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
  }
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3728      	adds	r7, #40	@ 0x28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d001      	beq.n	8007f4e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e097      	b.n	800807e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_SPI_Transmit_DMA+0x2a>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e08f      	b.n	800807e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit_DMA+0x3c>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e088      	b.n	800807e <HAL_SPI_Transmit_DMA+0x14e>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2203      	movs	r2, #3
 8007f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fba:	d10f      	bne.n	8007fdc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe0:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <HAL_SPI_Transmit_DMA+0x158>)
 8007fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe8:	4a28      	ldr	r2, [pc, #160]	@ (800808c <HAL_SPI_Transmit_DMA+0x15c>)
 8007fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff0:	4a27      	ldr	r2, [pc, #156]	@ (8008090 <HAL_SPI_Transmit_DMA+0x160>)
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	4619      	mov	r1, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	330c      	adds	r3, #12
 800800c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008012:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008014:	f7fe f95a 	bl	80062cc <HAL_DMA_Start_IT>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	f043 0210 	orr.w	r2, r3, #16
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e023      	b.n	800807e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d007      	beq.n	8008054 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0220 	orr.w	r2, r2, #32
 800806a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0202 	orr.w	r2, r2, #2
 800807a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	0800834d 	.word	0x0800834d
 800808c:	080082a5 	.word	0x080082a5
 8008090:	08008369 	.word	0x08008369

08008094 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10e      	bne.n	80080d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d009      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
    return;
 80080d2:	e0ce      	b.n	8008272 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_SPI_IRQHandler+0x5e>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
    return;
 80080f0:	e0bf      	b.n	8008272 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <HAL_SPI_IRQHandler+0x7e>
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80b0 	beq.w	8008272 <HAL_SPI_IRQHandler+0x1de>
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80aa 	beq.w	8008272 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d023      	beq.n	8008170 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b03      	cmp	r3, #3
 8008132:	d011      	beq.n	8008158 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008138:	f043 0204 	orr.w	r2, r3, #4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	e00b      	b.n	8008170 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	693b      	ldr	r3, [r7, #16]
        return;
 800816e:	e080      	b.n	8008272 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d014      	beq.n	80081a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817e:	f043 0201 	orr.w	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	f043 0208 	orr.w	r2, r3, #8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d04f      	beq.n	8008270 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d104      	bne.n	80081fc <HAL_SPI_IRQHandler+0x168>
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d034      	beq.n	8008266 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0203 	bic.w	r2, r2, #3
 800820a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d011      	beq.n	8008238 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008218:	4a17      	ldr	r2, [pc, #92]	@ (8008278 <HAL_SPI_IRQHandler+0x1e4>)
 800821a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe f91b 	bl	800645c <HAL_DMA_Abort_IT>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008230:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800823c:	2b00      	cmp	r3, #0
 800823e:	d016      	beq.n	800826e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008244:	4a0c      	ldr	r2, [pc, #48]	@ (8008278 <HAL_SPI_IRQHandler+0x1e4>)
 8008246:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe f905 	bl	800645c <HAL_DMA_Abort_IT>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008264:	e003      	b.n	800826e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f812 	bl	8008290 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800826c:	e000      	b.n	8008270 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800826e:	bf00      	nop
    return;
 8008270:	bf00      	nop
  }
}
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	080083a9 	.word	0x080083a9

0800827c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082b2:	f7fd fe1b 	bl	8005eec <HAL_GetTick>
 80082b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c6:	d03b      	beq.n	8008340 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0220 	bic.w	r2, r2, #32
 80082d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0202 	bic.w	r2, r2, #2
 80082e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	2164      	movs	r1, #100	@ 0x64
 80082ec:	6978      	ldr	r0, [r7, #20]
 80082ee:	f000 f95d 	bl	80085ac <SPI_EndRxTxTransaction>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fc:	f043 0220 	orr.w	r2, r3, #32
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2200      	movs	r2, #0
 8008326:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008338:	6978      	ldr	r0, [r7, #20]
 800833a:	f7ff ffa9 	bl	8008290 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800833e:	e002      	b.n	8008346 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008340:	6978      	ldr	r0, [r7, #20]
 8008342:	f7f9 fd55 	bl	8001df0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008358:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff ff8e 	bl	800827c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008360:	bf00      	nop
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0203 	bic.w	r2, r2, #3
 8008384:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838a:	f043 0210 	orr.w	r2, r3, #16
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7ff ff78 	bl	8008290 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff ff64 	bl	8008290 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	4613      	mov	r3, r2
 80083de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083e0:	f7fd fd84 	bl	8005eec <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4413      	add	r3, r2
 80083ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083f0:	f7fd fd7c 	bl	8005eec <HAL_GetTick>
 80083f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083f6:	4b39      	ldr	r3, [pc, #228]	@ (80084dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	015b      	lsls	r3, r3, #5
 80083fc:	0d1b      	lsrs	r3, r3, #20
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	fb02 f303 	mul.w	r3, r2, r3
 8008404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008406:	e054      	b.n	80084b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d050      	beq.n	80084b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008410:	f7fd fd6c 	bl	8005eec <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	429a      	cmp	r2, r3
 800841e:	d902      	bls.n	8008426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d13d      	bne.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800843e:	d111      	bne.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008448:	d004      	beq.n	8008454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008452:	d107      	bne.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800846c:	d10f      	bne.n	800848e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800848c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e017      	b.n	80084d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4013      	ands	r3, r2
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	429a      	cmp	r2, r3
 80084c0:	bf0c      	ite	eq
 80084c2:	2301      	moveq	r3, #1
 80084c4:	2300      	movne	r3, #0
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d19b      	bne.n	8008408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3720      	adds	r7, #32
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000001c 	.word	0x2000001c

080084e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084f4:	d111      	bne.n	800851a <SPI_EndRxTransaction+0x3a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fe:	d004      	beq.n	800850a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008508:	d107      	bne.n	800851a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008522:	d12a      	bne.n	800857a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800852c:	d012      	beq.n	8008554 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	2180      	movs	r1, #128	@ 0x80
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff ff49 	bl	80083d0 <SPI_WaitFlagStateUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d02d      	beq.n	80085a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008548:	f043 0220 	orr.w	r2, r3, #32
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e026      	b.n	80085a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	2101      	movs	r1, #1
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff ff36 	bl	80083d0 <SPI_WaitFlagStateUntilTimeout>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01a      	beq.n	80085a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856e:	f043 0220 	orr.w	r2, r3, #32
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e013      	b.n	80085a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2200      	movs	r2, #0
 8008582:	2101      	movs	r1, #1
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff ff23 	bl	80083d0 <SPI_WaitFlagStateUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008594:	f043 0220 	orr.w	r2, r3, #32
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e000      	b.n	80085a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
	...

080085ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	2201      	movs	r2, #1
 80085c0:	2102      	movs	r1, #2
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff ff04 	bl	80083d0 <SPI_WaitFlagStateUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d2:	f043 0220 	orr.w	r2, r3, #32
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e032      	b.n	8008644 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085de:	4b1b      	ldr	r3, [pc, #108]	@ (800864c <SPI_EndRxTxTransaction+0xa0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008650 <SPI_EndRxTxTransaction+0xa4>)
 80085e4:	fba2 2303 	umull	r2, r3, r2, r3
 80085e8:	0d5b      	lsrs	r3, r3, #21
 80085ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085fc:	d112      	bne.n	8008624 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2200      	movs	r2, #0
 8008606:	2180      	movs	r1, #128	@ 0x80
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff fee1 	bl	80083d0 <SPI_WaitFlagStateUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d016      	beq.n	8008642 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e00f      	b.n	8008644 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	3b01      	subs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863a:	2b80      	cmp	r3, #128	@ 0x80
 800863c:	d0f2      	beq.n	8008624 <SPI_EndRxTxTransaction+0x78>
 800863e:	e000      	b.n	8008642 <SPI_EndRxTxTransaction+0x96>
        break;
 8008640:	bf00      	nop
  }

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2000001c 	.word	0x2000001c
 8008650:	165e9f81 	.word	0x165e9f81

08008654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e041      	b.n	80086ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fc ffee 	bl	800565c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fa70 	bl	8008b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d001      	beq.n	800870c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e044      	b.n	8008796 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f042 0201 	orr.w	r2, r2, #1
 8008722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1e      	ldr	r2, [pc, #120]	@ (80087a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d018      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0x6c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008736:	d013      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0x6c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a1a      	ldr	r2, [pc, #104]	@ (80087a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00e      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0x6c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a19      	ldr	r2, [pc, #100]	@ (80087ac <HAL_TIM_Base_Start_IT+0xb8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d009      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0x6c>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIM_Base_Start_IT+0x6c>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d111      	bne.n	8008784 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b06      	cmp	r3, #6
 8008770:	d010      	beq.n	8008794 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f042 0201 	orr.w	r2, r2, #1
 8008780:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008782:	e007      	b.n	8008794 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0201 	orr.w	r2, r2, #1
 8008792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40014000 	.word	0x40014000

080087b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d020      	beq.n	800881c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01b      	beq.n	800881c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0202 	mvn.w	r2, #2
 80087ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f999 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 8008808:	e005      	b.n	8008816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f98b 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f99c 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d020      	beq.n	8008868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01b      	beq.n	8008868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0204 	mvn.w	r2, #4
 8008838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f973 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 8008854:	e005      	b.n	8008862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f965 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f976 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d020      	beq.n	80088b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01b      	beq.n	80088b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0208 	mvn.w	r2, #8
 8008884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2204      	movs	r2, #4
 800888a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f94d 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f93f 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f950 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d020      	beq.n	8008900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01b      	beq.n	8008900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0210 	mvn.w	r2, #16
 80088d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2208      	movs	r2, #8
 80088d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f927 	bl	8008b3a <HAL_TIM_IC_CaptureCallback>
 80088ec:	e005      	b.n	80088fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f919 	bl	8008b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f92a 	bl	8008b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0201 	mvn.w	r2, #1
 800891c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fb fd8e 	bl	8004440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fab6 	bl	8008eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f8fb 	bl	8008b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0220 	mvn.w	r2, #32
 8008988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa88 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_TIM_ConfigClockSource+0x1c>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e0b4      	b.n	8008b1e <HAL_TIM_ConfigClockSource+0x186>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089ec:	d03e      	beq.n	8008a6c <HAL_TIM_ConfigClockSource+0xd4>
 80089ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089f2:	f200 8087 	bhi.w	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fa:	f000 8086 	beq.w	8008b0a <HAL_TIM_ConfigClockSource+0x172>
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a02:	d87f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a04:	2b70      	cmp	r3, #112	@ 0x70
 8008a06:	d01a      	beq.n	8008a3e <HAL_TIM_ConfigClockSource+0xa6>
 8008a08:	2b70      	cmp	r3, #112	@ 0x70
 8008a0a:	d87b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a0c:	2b60      	cmp	r3, #96	@ 0x60
 8008a0e:	d050      	beq.n	8008ab2 <HAL_TIM_ConfigClockSource+0x11a>
 8008a10:	2b60      	cmp	r3, #96	@ 0x60
 8008a12:	d877      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a14:	2b50      	cmp	r3, #80	@ 0x50
 8008a16:	d03c      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0xfa>
 8008a18:	2b50      	cmp	r3, #80	@ 0x50
 8008a1a:	d873      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a1c:	2b40      	cmp	r3, #64	@ 0x40
 8008a1e:	d058      	beq.n	8008ad2 <HAL_TIM_ConfigClockSource+0x13a>
 8008a20:	2b40      	cmp	r3, #64	@ 0x40
 8008a22:	d86f      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a24:	2b30      	cmp	r3, #48	@ 0x30
 8008a26:	d064      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a28:	2b30      	cmp	r3, #48	@ 0x30
 8008a2a:	d86b      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d060      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d867      	bhi.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d05c      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	d05a      	beq.n	8008af2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a3c:	e062      	b.n	8008b04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4e:	f000 f999 	bl	8008d84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	609a      	str	r2, [r3, #8]
      break;
 8008a6a:	e04f      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a7c:	f000 f982 	bl	8008d84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a8e:	609a      	str	r2, [r3, #8]
      break;
 8008a90:	e03c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f000 f8f6 	bl	8008c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2150      	movs	r1, #80	@ 0x50
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f94f 	bl	8008d4e <TIM_ITRx_SetConfig>
      break;
 8008ab0:	e02c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f000 f915 	bl	8008cee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2160      	movs	r1, #96	@ 0x60
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f93f 	bl	8008d4e <TIM_ITRx_SetConfig>
      break;
 8008ad0:	e01c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f000 f8d6 	bl	8008c90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2140      	movs	r1, #64	@ 0x40
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 f92f 	bl	8008d4e <TIM_ITRx_SetConfig>
      break;
 8008af0:	e00c      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f000 f926 	bl	8008d4e <TIM_ITRx_SetConfig>
      break;
 8008b02:	e003      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
      break;
 8008b08:	e000      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a3a      	ldr	r2, [pc, #232]	@ (8008c74 <TIM_Base_SetConfig+0xfc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00f      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b96:	d00b      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a37      	ldr	r2, [pc, #220]	@ (8008c78 <TIM_Base_SetConfig+0x100>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d007      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a36      	ldr	r2, [pc, #216]	@ (8008c7c <TIM_Base_SetConfig+0x104>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_Base_SetConfig+0x38>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a35      	ldr	r2, [pc, #212]	@ (8008c80 <TIM_Base_SetConfig+0x108>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d108      	bne.n	8008bc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c74 <TIM_Base_SetConfig+0xfc>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01b      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd0:	d017      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a28      	ldr	r2, [pc, #160]	@ (8008c78 <TIM_Base_SetConfig+0x100>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a27      	ldr	r2, [pc, #156]	@ (8008c7c <TIM_Base_SetConfig+0x104>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a26      	ldr	r2, [pc, #152]	@ (8008c80 <TIM_Base_SetConfig+0x108>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a25      	ldr	r2, [pc, #148]	@ (8008c84 <TIM_Base_SetConfig+0x10c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a24      	ldr	r2, [pc, #144]	@ (8008c88 <TIM_Base_SetConfig+0x110>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_Base_SetConfig+0x8a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a23      	ldr	r2, [pc, #140]	@ (8008c8c <TIM_Base_SetConfig+0x114>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d108      	bne.n	8008c14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c74 <TIM_Base_SetConfig+0xfc>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d103      	bne.n	8008c48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	611a      	str	r2, [r3, #16]
  }
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40010000 	.word	0x40010000
 8008c78:	40000400 	.word	0x40000400
 8008c7c:	40000800 	.word	0x40000800
 8008c80:	40000c00 	.word	0x40000c00
 8008c84:	40014000 	.word	0x40014000
 8008c88:	40014400 	.word	0x40014400
 8008c8c:	40014800 	.word	0x40014800

08008c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f023 0201 	bic.w	r2, r3, #1
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	011b      	lsls	r3, r3, #4
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f023 030a 	bic.w	r3, r3, #10
 8008ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	621a      	str	r2, [r3, #32]
}
 8008ce2:	bf00      	nop
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b087      	sub	sp, #28
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f023 0210 	bic.w	r2, r3, #16
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	031b      	lsls	r3, r3, #12
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b085      	sub	sp, #20
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f043 0307 	orr.w	r3, r3, #7
 8008d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	609a      	str	r2, [r3, #8]
}
 8008d78:	bf00      	nop
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	021a      	lsls	r2, r3, #8
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	431a      	orrs	r2, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	609a      	str	r2, [r3, #8]
}
 8008db8:	bf00      	nop
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d101      	bne.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e050      	b.n	8008e7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d018      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e28:	d013      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a18      	ldr	r2, [pc, #96]	@ (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00e      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a16      	ldr	r2, [pc, #88]	@ (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d009      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a15      	ldr	r2, [pc, #84]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d004      	beq.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a13      	ldr	r2, [pc, #76]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d10c      	bne.n	8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40010000 	.word	0x40010000
 8008e90:	40000400 	.word	0x40000400
 8008e94:	40000800 	.word	0x40000800
 8008e98:	40000c00 	.word	0x40000c00
 8008e9c:	40014000 	.word	0x40014000

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e042      	b.n	8008f60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fc fbf8 	bl	80056e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2224      	movs	r2, #36	@ 0x24
 8008ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fdbd 	bl	8009a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	@ 0x28
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	4613      	mov	r3, r2
 8008f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d175      	bne.n	8009074 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_UART_Transmit+0x2c>
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e06e      	b.n	8009076 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2221      	movs	r2, #33	@ 0x21
 8008fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fa6:	f7fc ffa1 	bl	8005eec <HAL_GetTick>
 8008faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	88fa      	ldrh	r2, [r7, #6]
 8008fb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	88fa      	ldrh	r2, [r7, #6]
 8008fb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc0:	d108      	bne.n	8008fd4 <HAL_UART_Transmit+0x6c>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e003      	b.n	8008fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fdc:	e02e      	b.n	800903c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2180      	movs	r1, #128	@ 0x80
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fb1f 	bl	800962c <UART_WaitOnFlagUntilTimeout>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e03a      	b.n	8009076 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	3302      	adds	r3, #2
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	e007      	b.n	800902e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	3301      	adds	r3, #1
 800902c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009040:	b29b      	uxth	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1cb      	bne.n	8008fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	2140      	movs	r1, #64	@ 0x40
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 faeb 	bl	800962c <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e006      	b.n	8009076 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2220      	movs	r2, #32
 800906c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	4613      	mov	r3, r2
 800908a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b20      	cmp	r3, #32
 8009096:	d112      	bne.n	80090be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Receive_IT+0x26>
 800909e:	88fb      	ldrh	r3, [r7, #6]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e00b      	b.n	80090c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	461a      	mov	r2, r3
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 fb12 	bl	80096de <UART_Start_Receive_IT>
 80090ba:	4603      	mov	r3, r0
 80090bc:	e000      	b.n	80090c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80090be:	2302      	movs	r3, #2
  }
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b0ba      	sub	sp, #232	@ 0xe8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	695b      	ldr	r3, [r3, #20]
 80090ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10f      	bne.n	800912e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800910e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <HAL_UART_IRQHandler+0x66>
 800911a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fbf2 	bl	8009910 <UART_Receive_IT>
      return;
 800912c:	e25b      	b.n	80095e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800912e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80de 	beq.w	80092f4 <HAL_UART_IRQHandler+0x22c>
 8009138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d106      	bne.n	8009152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009148:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 80d1 	beq.w	80092f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <HAL_UART_IRQHandler+0xae>
 800915e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d005      	beq.n	8009176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800916e:	f043 0201 	orr.w	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00b      	beq.n	800919a <HAL_UART_IRQHandler+0xd2>
 8009182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d005      	beq.n	800919a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f043 0202 	orr.w	r2, r3, #2
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800919a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <HAL_UART_IRQHandler+0xf6>
 80091a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b6:	f043 0204 	orr.w	r2, r3, #4
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d011      	beq.n	80091ee <HAL_UART_IRQHandler+0x126>
 80091ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d105      	bne.n	80091e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d005      	beq.n	80091ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e6:	f043 0208 	orr.w	r2, r3, #8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 81f2 	beq.w	80095dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_UART_IRQHandler+0x14e>
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb7d 	bl	8009910 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695b      	ldr	r3, [r3, #20]
 800921c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009220:	2b40      	cmp	r3, #64	@ 0x40
 8009222:	bf0c      	ite	eq
 8009224:	2301      	moveq	r3, #1
 8009226:	2300      	movne	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <HAL_UART_IRQHandler+0x17a>
 800923a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800923e:	2b00      	cmp	r3, #0
 8009240:	d04f      	beq.n	80092e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fa85 	bl	8009752 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009252:	2b40      	cmp	r3, #64	@ 0x40
 8009254:	d141      	bne.n	80092da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3314      	adds	r3, #20
 800925c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009264:	e853 3f00 	ldrex	r3, [r3]
 8009268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800926c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3314      	adds	r3, #20
 800927e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009282:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800928e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800929a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1d9      	bne.n	8009256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d013      	beq.n	80092d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ae:	4a7e      	ldr	r2, [pc, #504]	@ (80094a8 <HAL_UART_IRQHandler+0x3e0>)
 80092b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fd f8d0 	bl	800645c <HAL_DMA_Abort_IT>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d016      	beq.n	80092f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d0:	e00e      	b.n	80092f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f994 	bl	8009600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d8:	e00a      	b.n	80092f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f990 	bl	8009600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	e006      	b.n	80092f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f98c 	bl	8009600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80092ee:	e175      	b.n	80095dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f0:	bf00      	nop
    return;
 80092f2:	e173      	b.n	80095dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	f040 814f 	bne.w	800959c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8148 	beq.w	800959c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009310:	f003 0310 	and.w	r3, r3, #16
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8141 	beq.w	800959c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60bb      	str	r3, [r7, #8]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	60bb      	str	r3, [r7, #8]
 800932e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800933a:	2b40      	cmp	r3, #64	@ 0x40
 800933c:	f040 80b6 	bne.w	80094ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800934c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8145 	beq.w	80095e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800935a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800935e:	429a      	cmp	r2, r3
 8009360:	f080 813e 	bcs.w	80095e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800936a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009376:	f000 8088 	beq.w	800948a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	330c      	adds	r3, #12
 8009380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009384:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009388:	e853 3f00 	ldrex	r3, [r3]
 800938c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009394:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	330c      	adds	r3, #12
 80093a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80093a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80093be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1d9      	bne.n	800937a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3314      	adds	r3, #20
 80093cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093d8:	f023 0301 	bic.w	r3, r3, #1
 80093dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3314      	adds	r3, #20
 80093e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80093ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e1      	bne.n	80093c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3314      	adds	r3, #20
 8009408:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	3314      	adds	r3, #20
 8009422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009428:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800942c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e3      	bne.n	8009402 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800945a:	f023 0310 	bic.w	r3, r3, #16
 800945e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800946c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800946e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800947a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e3      	bne.n	8009448 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009484:	4618      	mov	r0, r3
 8009486:	f7fc ff79 	bl	800637c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2202      	movs	r2, #2
 800948e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009498:	b29b      	uxth	r3, r3
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	b29b      	uxth	r3, r3
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f8b7 	bl	8009614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094a6:	e09b      	b.n	80095e0 <HAL_UART_IRQHandler+0x518>
 80094a8:	08009819 	.word	0x08009819
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 808e 	beq.w	80095e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80094c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 8089 	beq.w	80095e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	330c      	adds	r3, #12
 80094d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	330c      	adds	r3, #12
 80094f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e3      	bne.n	80094d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3314      	adds	r3, #20
 8009510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	623b      	str	r3, [r7, #32]
   return(result);
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3314      	adds	r3, #20
 800952a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800952e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e3      	bne.n	800950a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0310 	bic.w	r3, r3, #16
 8009566:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	330c      	adds	r3, #12
 8009570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009574:	61fa      	str	r2, [r7, #28]
 8009576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	69b9      	ldr	r1, [r7, #24]
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	617b      	str	r3, [r7, #20]
   return(result);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e3      	bne.n	8009550 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800958e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f83d 	bl	8009614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800959a:	e023      	b.n	80095e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <HAL_UART_IRQHandler+0x4f4>
 80095a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d003      	beq.n	80095bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f943 	bl	8009840 <UART_Transmit_IT>
    return;
 80095ba:	e014      	b.n	80095e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00e      	beq.n	80095e6 <HAL_UART_IRQHandler+0x51e>
 80095c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f983 	bl	80098e0 <UART_EndTransmit_IT>
    return;
 80095da:	e004      	b.n	80095e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80095dc:	bf00      	nop
 80095de:	e002      	b.n	80095e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095e0:	bf00      	nop
 80095e2:	e000      	b.n	80095e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80095e4:	bf00      	nop
  }
}
 80095e6:	37e8      	adds	r7, #232	@ 0xe8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963c:	e03b      	b.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009644:	d037      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009646:	f7fc fc51 	bl	8005eec <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	6a3a      	ldr	r2, [r7, #32]
 8009652:	429a      	cmp	r2, r3
 8009654:	d302      	bcc.n	800965c <UART_WaitOnFlagUntilTimeout+0x30>
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e03a      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0304 	and.w	r3, r3, #4
 800966a:	2b00      	cmp	r3, #0
 800966c:	d023      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b80      	cmp	r3, #128	@ 0x80
 8009672:	d020      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d01d      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b08      	cmp	r3, #8
 8009686:	d116      	bne.n	80096b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f857 	bl	8009752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2208      	movs	r2, #8
 80096a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e00f      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4013      	ands	r3, r2
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	bf0c      	ite	eq
 80096c6:	2301      	moveq	r3, #1
 80096c8:	2300      	movne	r3, #0
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d0b4      	beq.n	800963e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	4613      	mov	r3, r2
 80096ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	88fa      	ldrh	r2, [r7, #6]
 80096f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	88fa      	ldrh	r2, [r7, #6]
 80096fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2222      	movs	r2, #34	@ 0x22
 8009708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009722:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695a      	ldr	r2, [r3, #20]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68da      	ldr	r2, [r3, #12]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f042 0220 	orr.w	r2, r2, #32
 8009742:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009752:	b480      	push	{r7}
 8009754:	b095      	sub	sp, #84	@ 0x54
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	330c      	adds	r3, #12
 8009760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800977a:	643a      	str	r2, [r7, #64]	@ 0x40
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e5      	bne.n	800975a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3314      	adds	r3, #20
 8009794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	61fb      	str	r3, [r7, #28]
   return(result);
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3314      	adds	r3, #20
 80097ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e5      	bne.n	800978e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d119      	bne.n	80097fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	e853 3f00 	ldrex	r3, [r3]
 80097d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f023 0310 	bic.w	r3, r3, #16
 80097e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097ea:	61ba      	str	r2, [r7, #24]
 80097ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	6979      	ldr	r1, [r7, #20]
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	613b      	str	r3, [r7, #16]
   return(result);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e5      	bne.n	80097ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2220      	movs	r2, #32
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800980c:	bf00      	nop
 800980e:	3754      	adds	r7, #84	@ 0x54
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fee4 	bl	8009600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b21      	cmp	r3, #33	@ 0x21
 8009852:	d13e      	bne.n	80098d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985c:	d114      	bne.n	8009888 <UART_Transmit_IT+0x48>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d110      	bne.n	8009888 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800987a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	1c9a      	adds	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	621a      	str	r2, [r3, #32]
 8009886:	e008      	b.n	800989a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6211      	str	r1, [r2, #32]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4619      	mov	r1, r3
 80098a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10f      	bne.n	80098ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68da      	ldr	r2, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e000      	b.n	80098d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80098d2:	2302      	movs	r3, #2
  }
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff fe73 	bl	80095ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08c      	sub	sp, #48	@ 0x30
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b22      	cmp	r3, #34	@ 0x22
 8009922:	f040 80ae 	bne.w	8009a82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800992e:	d117      	bne.n	8009960 <UART_Receive_IT+0x50>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d113      	bne.n	8009960 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	b29b      	uxth	r3, r3
 800994a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994e:	b29a      	uxth	r2, r3
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	629a      	str	r2, [r3, #40]	@ 0x28
 800995e:	e026      	b.n	80099ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009972:	d007      	beq.n	8009984 <UART_Receive_IT+0x74>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <UART_Receive_IT+0x82>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b2da      	uxtb	r2, r3
 800998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	e008      	b.n	80099a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	4619      	mov	r1, r3
 80099bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d15d      	bne.n	8009a7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68da      	ldr	r2, [r3, #12]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0220 	bic.w	r2, r2, #32
 80099d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d135      	bne.n	8009a74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	330c      	adds	r3, #12
 8009a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f023 0310 	bic.w	r3, r3, #16
 8009a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	330c      	adds	r3, #12
 8009a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a2e:	623a      	str	r2, [r7, #32]
 8009a30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	69f9      	ldr	r1, [r7, #28]
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d10a      	bne.n	8009a66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a50:	2300      	movs	r3, #0
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7ff fdd1 	bl	8009614 <HAL_UARTEx_RxEventCallback>
 8009a72:	e002      	b.n	8009a7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fa fd39 	bl	80044ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e002      	b.n	8009a84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e000      	b.n	8009a84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009a82:	2302      	movs	r3, #2
  }
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3730      	adds	r7, #48	@ 0x30
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a90:	b0c0      	sub	sp, #256	@ 0x100
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa8:	68d9      	ldr	r1, [r3, #12]
 8009aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	ea40 0301 	orr.w	r3, r0, r1
 8009ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ae4:	f021 010c 	bic.w	r1, r1, #12
 8009ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009af2:	430b      	orrs	r3, r1
 8009af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b06:	6999      	ldr	r1, [r3, #24]
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	ea40 0301 	orr.w	r3, r0, r1
 8009b12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8009d58 <UART_SetConfig+0x2cc>)
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d005      	beq.n	8009b2c <UART_SetConfig+0xa0>
 8009b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	4b8d      	ldr	r3, [pc, #564]	@ (8009d5c <UART_SetConfig+0x2d0>)
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d104      	bne.n	8009b36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b2c:	f7fd fd5c 	bl	80075e8 <HAL_RCC_GetPCLK2Freq>
 8009b30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b34:	e003      	b.n	8009b3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b36:	f7fd fd43 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 8009b3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b48:	f040 810c 	bne.w	8009d64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009b5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009b5e:	4622      	mov	r2, r4
 8009b60:	462b      	mov	r3, r5
 8009b62:	1891      	adds	r1, r2, r2
 8009b64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b66:	415b      	adcs	r3, r3
 8009b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b6e:	4621      	mov	r1, r4
 8009b70:	eb12 0801 	adds.w	r8, r2, r1
 8009b74:	4629      	mov	r1, r5
 8009b76:	eb43 0901 	adc.w	r9, r3, r1
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	f04f 0300 	mov.w	r3, #0
 8009b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b8e:	4690      	mov	r8, r2
 8009b90:	4699      	mov	r9, r3
 8009b92:	4623      	mov	r3, r4
 8009b94:	eb18 0303 	adds.w	r3, r8, r3
 8009b98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	eb49 0303 	adc.w	r3, r9, r3
 8009ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009bba:	460b      	mov	r3, r1
 8009bbc:	18db      	adds	r3, r3, r3
 8009bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	eb42 0303 	adc.w	r3, r2, r3
 8009bc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009bcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009bd0:	f7f7 f812 	bl	8000bf8 <__aeabi_uldivmod>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	4b61      	ldr	r3, [pc, #388]	@ (8009d60 <UART_SetConfig+0x2d4>)
 8009bda:	fba3 2302 	umull	r2, r3, r3, r2
 8009bde:	095b      	lsrs	r3, r3, #5
 8009be0:	011c      	lsls	r4, r3, #4
 8009be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009bf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	1891      	adds	r1, r2, r2
 8009bfa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009bfc:	415b      	adcs	r3, r3
 8009bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c04:	4641      	mov	r1, r8
 8009c06:	eb12 0a01 	adds.w	sl, r2, r1
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	eb43 0b01 	adc.w	fp, r3, r1
 8009c10:	f04f 0200 	mov.w	r2, #0
 8009c14:	f04f 0300 	mov.w	r3, #0
 8009c18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c24:	4692      	mov	sl, r2
 8009c26:	469b      	mov	fp, r3
 8009c28:	4643      	mov	r3, r8
 8009c2a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c32:	464b      	mov	r3, r9
 8009c34:	eb4b 0303 	adc.w	r3, fp, r3
 8009c38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c50:	460b      	mov	r3, r1
 8009c52:	18db      	adds	r3, r3, r3
 8009c54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c56:	4613      	mov	r3, r2
 8009c58:	eb42 0303 	adc.w	r3, r2, r3
 8009c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009c62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009c66:	f7f6 ffc7 	bl	8000bf8 <__aeabi_uldivmod>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4b3b      	ldr	r3, [pc, #236]	@ (8009d60 <UART_SetConfig+0x2d4>)
 8009c72:	fba3 2301 	umull	r2, r3, r3, r1
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	2264      	movs	r2, #100	@ 0x64
 8009c7a:	fb02 f303 	mul.w	r3, r2, r3
 8009c7e:	1acb      	subs	r3, r1, r3
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009c86:	4b36      	ldr	r3, [pc, #216]	@ (8009d60 <UART_SetConfig+0x2d4>)
 8009c88:	fba3 2302 	umull	r2, r3, r3, r2
 8009c8c:	095b      	lsrs	r3, r3, #5
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c94:	441c      	add	r4, r3
 8009c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ca0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009ca4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	1891      	adds	r1, r2, r2
 8009cae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cb0:	415b      	adcs	r3, r3
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009cb8:	4641      	mov	r1, r8
 8009cba:	1851      	adds	r1, r2, r1
 8009cbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	414b      	adcs	r3, r1
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	00cb      	lsls	r3, r1, #3
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cda:	4651      	mov	r1, sl
 8009cdc:	00ca      	lsls	r2, r1, #3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	189b      	adds	r3, r3, r2
 8009ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cec:	464b      	mov	r3, r9
 8009cee:	460a      	mov	r2, r1
 8009cf0:	eb42 0303 	adc.w	r3, r2, r3
 8009cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	18db      	adds	r3, r3, r3
 8009d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d12:	4613      	mov	r3, r2
 8009d14:	eb42 0303 	adc.w	r3, r2, r3
 8009d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d22:	f7f6 ff69 	bl	8000bf8 <__aeabi_uldivmod>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d60 <UART_SetConfig+0x2d4>)
 8009d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d30:	095b      	lsrs	r3, r3, #5
 8009d32:	2164      	movs	r1, #100	@ 0x64
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	3332      	adds	r3, #50	@ 0x32
 8009d3e:	4a08      	ldr	r2, [pc, #32]	@ (8009d60 <UART_SetConfig+0x2d4>)
 8009d40:	fba2 2303 	umull	r2, r3, r2, r3
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	f003 0207 	and.w	r2, r3, #7
 8009d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4422      	add	r2, r4
 8009d52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d54:	e106      	b.n	8009f64 <UART_SetConfig+0x4d8>
 8009d56:	bf00      	nop
 8009d58:	40011000 	.word	0x40011000
 8009d5c:	40011400 	.word	0x40011400
 8009d60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009d72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009d76:	4642      	mov	r2, r8
 8009d78:	464b      	mov	r3, r9
 8009d7a:	1891      	adds	r1, r2, r2
 8009d7c:	6239      	str	r1, [r7, #32]
 8009d7e:	415b      	adcs	r3, r3
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d86:	4641      	mov	r1, r8
 8009d88:	1854      	adds	r4, r2, r1
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	eb43 0501 	adc.w	r5, r3, r1
 8009d90:	f04f 0200 	mov.w	r2, #0
 8009d94:	f04f 0300 	mov.w	r3, #0
 8009d98:	00eb      	lsls	r3, r5, #3
 8009d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d9e:	00e2      	lsls	r2, r4, #3
 8009da0:	4614      	mov	r4, r2
 8009da2:	461d      	mov	r5, r3
 8009da4:	4643      	mov	r3, r8
 8009da6:	18e3      	adds	r3, r4, r3
 8009da8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dac:	464b      	mov	r3, r9
 8009dae:	eb45 0303 	adc.w	r3, r5, r3
 8009db2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009dc6:	f04f 0200 	mov.w	r2, #0
 8009dca:	f04f 0300 	mov.w	r3, #0
 8009dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	008b      	lsls	r3, r1, #2
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ddc:	4621      	mov	r1, r4
 8009dde:	008a      	lsls	r2, r1, #2
 8009de0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009de4:	f7f6 ff08 	bl	8000bf8 <__aeabi_uldivmod>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4b60      	ldr	r3, [pc, #384]	@ (8009f70 <UART_SetConfig+0x4e4>)
 8009dee:	fba3 2302 	umull	r2, r3, r3, r2
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	011c      	lsls	r4, r3, #4
 8009df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e08:	4642      	mov	r2, r8
 8009e0a:	464b      	mov	r3, r9
 8009e0c:	1891      	adds	r1, r2, r2
 8009e0e:	61b9      	str	r1, [r7, #24]
 8009e10:	415b      	adcs	r3, r3
 8009e12:	61fb      	str	r3, [r7, #28]
 8009e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e18:	4641      	mov	r1, r8
 8009e1a:	1851      	adds	r1, r2, r1
 8009e1c:	6139      	str	r1, [r7, #16]
 8009e1e:	4649      	mov	r1, r9
 8009e20:	414b      	adcs	r3, r1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	f04f 0200 	mov.w	r2, #0
 8009e28:	f04f 0300 	mov.w	r3, #0
 8009e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e30:	4659      	mov	r1, fp
 8009e32:	00cb      	lsls	r3, r1, #3
 8009e34:	4651      	mov	r1, sl
 8009e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e3a:	4651      	mov	r1, sl
 8009e3c:	00ca      	lsls	r2, r1, #3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	4619      	mov	r1, r3
 8009e42:	4603      	mov	r3, r0
 8009e44:	4642      	mov	r2, r8
 8009e46:	189b      	adds	r3, r3, r2
 8009e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	460a      	mov	r2, r1
 8009e50:	eb42 0303 	adc.w	r3, r2, r3
 8009e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009e64:	f04f 0200 	mov.w	r2, #0
 8009e68:	f04f 0300 	mov.w	r3, #0
 8009e6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009e70:	4649      	mov	r1, r9
 8009e72:	008b      	lsls	r3, r1, #2
 8009e74:	4641      	mov	r1, r8
 8009e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e7a:	4641      	mov	r1, r8
 8009e7c:	008a      	lsls	r2, r1, #2
 8009e7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009e82:	f7f6 feb9 	bl	8000bf8 <__aeabi_uldivmod>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	4b38      	ldr	r3, [pc, #224]	@ (8009f70 <UART_SetConfig+0x4e4>)
 8009e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e92:	095b      	lsrs	r3, r3, #5
 8009e94:	2264      	movs	r2, #100	@ 0x64
 8009e96:	fb02 f303 	mul.w	r3, r2, r3
 8009e9a:	1acb      	subs	r3, r1, r3
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	3332      	adds	r3, #50	@ 0x32
 8009ea0:	4a33      	ldr	r2, [pc, #204]	@ (8009f70 <UART_SetConfig+0x4e4>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	095b      	lsrs	r3, r3, #5
 8009ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009eac:	441c      	add	r4, r3
 8009eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009eb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009eb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ebc:	4642      	mov	r2, r8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	1891      	adds	r1, r2, r2
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	415b      	adcs	r3, r3
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ecc:	4641      	mov	r1, r8
 8009ece:	1851      	adds	r1, r2, r1
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	414b      	adcs	r3, r1
 8009ed6:	607b      	str	r3, [r7, #4]
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 0300 	mov.w	r3, #0
 8009ee0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	00cb      	lsls	r3, r1, #3
 8009ee8:	4651      	mov	r1, sl
 8009eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009eee:	4651      	mov	r1, sl
 8009ef0:	00ca      	lsls	r2, r1, #3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4642      	mov	r2, r8
 8009efa:	189b      	adds	r3, r3, r2
 8009efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009efe:	464b      	mov	r3, r9
 8009f00:	460a      	mov	r2, r1
 8009f02:	eb42 0303 	adc.w	r3, r2, r3
 8009f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f12:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f20:	4649      	mov	r1, r9
 8009f22:	008b      	lsls	r3, r1, #2
 8009f24:	4641      	mov	r1, r8
 8009f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	008a      	lsls	r2, r1, #2
 8009f2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f32:	f7f6 fe61 	bl	8000bf8 <__aeabi_uldivmod>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f70 <UART_SetConfig+0x4e4>)
 8009f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f40:	095b      	lsrs	r3, r3, #5
 8009f42:	2164      	movs	r1, #100	@ 0x64
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	3332      	adds	r3, #50	@ 0x32
 8009f4e:	4a08      	ldr	r2, [pc, #32]	@ (8009f70 <UART_SetConfig+0x4e4>)
 8009f50:	fba2 2303 	umull	r2, r3, r2, r3
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	f003 020f 	and.w	r2, r3, #15
 8009f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4422      	add	r2, r4
 8009f62:	609a      	str	r2, [r3, #8]
}
 8009f64:	bf00      	nop
 8009f66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f70:	51eb851f 	.word	0x51eb851f

08009f74 <__cvt>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	ec57 6b10 	vmov	r6, r7, d0
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	4619      	mov	r1, r3
 8009f82:	463b      	mov	r3, r7
 8009f84:	bfbb      	ittet	lt
 8009f86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f8a:	461f      	movlt	r7, r3
 8009f8c:	2300      	movge	r3, #0
 8009f8e:	232d      	movlt	r3, #45	@ 0x2d
 8009f90:	700b      	strb	r3, [r1, #0]
 8009f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f98:	4691      	mov	r9, r2
 8009f9a:	f023 0820 	bic.w	r8, r3, #32
 8009f9e:	bfbc      	itt	lt
 8009fa0:	4632      	movlt	r2, r6
 8009fa2:	4616      	movlt	r6, r2
 8009fa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fa8:	d005      	beq.n	8009fb6 <__cvt+0x42>
 8009faa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009fae:	d100      	bne.n	8009fb2 <__cvt+0x3e>
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	e000      	b.n	8009fb8 <__cvt+0x44>
 8009fb6:	2103      	movs	r1, #3
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	ab02      	add	r3, sp, #8
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	ec47 6b10 	vmov	d0, r6, r7
 8009fc4:	4653      	mov	r3, sl
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	f000 fe6a 	bl	800aca0 <_dtoa_r>
 8009fcc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	d119      	bne.n	800a008 <__cvt+0x94>
 8009fd4:	f019 0f01 	tst.w	r9, #1
 8009fd8:	d00e      	beq.n	8009ff8 <__cvt+0x84>
 8009fda:	eb00 0904 	add.w	r9, r0, r4
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	4639      	mov	r1, r7
 8009fe6:	f7f6 fd77 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fea:	b108      	cbz	r0, 8009ff0 <__cvt+0x7c>
 8009fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ff0:	2230      	movs	r2, #48	@ 0x30
 8009ff2:	9b03      	ldr	r3, [sp, #12]
 8009ff4:	454b      	cmp	r3, r9
 8009ff6:	d31e      	bcc.n	800a036 <__cvt+0xc2>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ffc:	1b5b      	subs	r3, r3, r5
 8009ffe:	4628      	mov	r0, r5
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	b004      	add	sp, #16
 800a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a008:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a00c:	eb00 0904 	add.w	r9, r0, r4
 800a010:	d1e5      	bne.n	8009fde <__cvt+0x6a>
 800a012:	7803      	ldrb	r3, [r0, #0]
 800a014:	2b30      	cmp	r3, #48	@ 0x30
 800a016:	d10a      	bne.n	800a02e <__cvt+0xba>
 800a018:	2200      	movs	r2, #0
 800a01a:	2300      	movs	r3, #0
 800a01c:	4630      	mov	r0, r6
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a024:	b918      	cbnz	r0, 800a02e <__cvt+0xba>
 800a026:	f1c4 0401 	rsb	r4, r4, #1
 800a02a:	f8ca 4000 	str.w	r4, [sl]
 800a02e:	f8da 3000 	ldr.w	r3, [sl]
 800a032:	4499      	add	r9, r3
 800a034:	e7d3      	b.n	8009fde <__cvt+0x6a>
 800a036:	1c59      	adds	r1, r3, #1
 800a038:	9103      	str	r1, [sp, #12]
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e7d9      	b.n	8009ff2 <__cvt+0x7e>

0800a03e <__exponent>:
 800a03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a040:	2900      	cmp	r1, #0
 800a042:	bfba      	itte	lt
 800a044:	4249      	neglt	r1, r1
 800a046:	232d      	movlt	r3, #45	@ 0x2d
 800a048:	232b      	movge	r3, #43	@ 0x2b
 800a04a:	2909      	cmp	r1, #9
 800a04c:	7002      	strb	r2, [r0, #0]
 800a04e:	7043      	strb	r3, [r0, #1]
 800a050:	dd29      	ble.n	800a0a6 <__exponent+0x68>
 800a052:	f10d 0307 	add.w	r3, sp, #7
 800a056:	461d      	mov	r5, r3
 800a058:	270a      	movs	r7, #10
 800a05a:	461a      	mov	r2, r3
 800a05c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a060:	fb07 1416 	mls	r4, r7, r6, r1
 800a064:	3430      	adds	r4, #48	@ 0x30
 800a066:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a06a:	460c      	mov	r4, r1
 800a06c:	2c63      	cmp	r4, #99	@ 0x63
 800a06e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a072:	4631      	mov	r1, r6
 800a074:	dcf1      	bgt.n	800a05a <__exponent+0x1c>
 800a076:	3130      	adds	r1, #48	@ 0x30
 800a078:	1e94      	subs	r4, r2, #2
 800a07a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a07e:	1c41      	adds	r1, r0, #1
 800a080:	4623      	mov	r3, r4
 800a082:	42ab      	cmp	r3, r5
 800a084:	d30a      	bcc.n	800a09c <__exponent+0x5e>
 800a086:	f10d 0309 	add.w	r3, sp, #9
 800a08a:	1a9b      	subs	r3, r3, r2
 800a08c:	42ac      	cmp	r4, r5
 800a08e:	bf88      	it	hi
 800a090:	2300      	movhi	r3, #0
 800a092:	3302      	adds	r3, #2
 800a094:	4403      	add	r3, r0
 800a096:	1a18      	subs	r0, r3, r0
 800a098:	b003      	add	sp, #12
 800a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a09c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0a4:	e7ed      	b.n	800a082 <__exponent+0x44>
 800a0a6:	2330      	movs	r3, #48	@ 0x30
 800a0a8:	3130      	adds	r1, #48	@ 0x30
 800a0aa:	7083      	strb	r3, [r0, #2]
 800a0ac:	70c1      	strb	r1, [r0, #3]
 800a0ae:	1d03      	adds	r3, r0, #4
 800a0b0:	e7f1      	b.n	800a096 <__exponent+0x58>
	...

0800a0b4 <_printf_float>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	b08d      	sub	sp, #52	@ 0x34
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	f000 fcdb 	bl	800aa80 <_localeconv_r>
 800a0ca:	6803      	ldr	r3, [r0, #0]
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7f6 f8d6 	bl	8000280 <strlen>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0dc:	9005      	str	r0, [sp, #20]
 800a0de:	3307      	adds	r3, #7
 800a0e0:	f023 0307 	bic.w	r3, r3, #7
 800a0e4:	f103 0208 	add.w	r2, r3, #8
 800a0e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0ec:	f8d4 b000 	ldr.w	fp, [r4]
 800a0f0:	f8c8 2000 	str.w	r2, [r8]
 800a0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0fc:	9307      	str	r3, [sp, #28]
 800a0fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800a102:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10a:	4b9c      	ldr	r3, [pc, #624]	@ (800a37c <_printf_float+0x2c8>)
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295
 800a110:	f7f6 fd14 	bl	8000b3c <__aeabi_dcmpun>
 800a114:	bb70      	cbnz	r0, 800a174 <_printf_float+0xc0>
 800a116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11a:	4b98      	ldr	r3, [pc, #608]	@ (800a37c <_printf_float+0x2c8>)
 800a11c:	f04f 32ff 	mov.w	r2, #4294967295
 800a120:	f7f6 fcee 	bl	8000b00 <__aeabi_dcmple>
 800a124:	bb30      	cbnz	r0, 800a174 <_printf_float+0xc0>
 800a126:	2200      	movs	r2, #0
 800a128:	2300      	movs	r3, #0
 800a12a:	4640      	mov	r0, r8
 800a12c:	4649      	mov	r1, r9
 800a12e:	f7f6 fcdd 	bl	8000aec <__aeabi_dcmplt>
 800a132:	b110      	cbz	r0, 800a13a <_printf_float+0x86>
 800a134:	232d      	movs	r3, #45	@ 0x2d
 800a136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a13a:	4a91      	ldr	r2, [pc, #580]	@ (800a380 <_printf_float+0x2cc>)
 800a13c:	4b91      	ldr	r3, [pc, #580]	@ (800a384 <_printf_float+0x2d0>)
 800a13e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a142:	bf94      	ite	ls
 800a144:	4690      	movls	r8, r2
 800a146:	4698      	movhi	r8, r3
 800a148:	2303      	movs	r3, #3
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	f02b 0304 	bic.w	r3, fp, #4
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	f04f 0900 	mov.w	r9, #0
 800a156:	9700      	str	r7, [sp, #0]
 800a158:	4633      	mov	r3, r6
 800a15a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a15c:	4621      	mov	r1, r4
 800a15e:	4628      	mov	r0, r5
 800a160:	f000 f9d2 	bl	800a508 <_printf_common>
 800a164:	3001      	adds	r0, #1
 800a166:	f040 808d 	bne.w	800a284 <_printf_float+0x1d0>
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	b00d      	add	sp, #52	@ 0x34
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	4642      	mov	r2, r8
 800a176:	464b      	mov	r3, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	4649      	mov	r1, r9
 800a17c:	f7f6 fcde 	bl	8000b3c <__aeabi_dcmpun>
 800a180:	b140      	cbz	r0, 800a194 <_printf_float+0xe0>
 800a182:	464b      	mov	r3, r9
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfbc      	itt	lt
 800a188:	232d      	movlt	r3, #45	@ 0x2d
 800a18a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a18e:	4a7e      	ldr	r2, [pc, #504]	@ (800a388 <_printf_float+0x2d4>)
 800a190:	4b7e      	ldr	r3, [pc, #504]	@ (800a38c <_printf_float+0x2d8>)
 800a192:	e7d4      	b.n	800a13e <_printf_float+0x8a>
 800a194:	6863      	ldr	r3, [r4, #4]
 800a196:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a19a:	9206      	str	r2, [sp, #24]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	d13b      	bne.n	800a218 <_printf_float+0x164>
 800a1a0:	2306      	movs	r3, #6
 800a1a2:	6063      	str	r3, [r4, #4]
 800a1a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800a1b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a1b4:	ab09      	add	r3, sp, #36	@ 0x24
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	ec49 8b10 	vmov	d0, r8, r9
 800a1be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7ff fed6 	bl	8009f74 <__cvt>
 800a1c8:	9b06      	ldr	r3, [sp, #24]
 800a1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1cc:	2b47      	cmp	r3, #71	@ 0x47
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	d129      	bne.n	800a226 <_printf_float+0x172>
 800a1d2:	1cc8      	adds	r0, r1, #3
 800a1d4:	db02      	blt.n	800a1dc <_printf_float+0x128>
 800a1d6:	6863      	ldr	r3, [r4, #4]
 800a1d8:	4299      	cmp	r1, r3
 800a1da:	dd41      	ble.n	800a260 <_printf_float+0x1ac>
 800a1dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1e0:	fa5f fa8a 	uxtb.w	sl, sl
 800a1e4:	3901      	subs	r1, #1
 800a1e6:	4652      	mov	r2, sl
 800a1e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ee:	f7ff ff26 	bl	800a03e <__exponent>
 800a1f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1f4:	1813      	adds	r3, r2, r0
 800a1f6:	2a01      	cmp	r2, #1
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	dc02      	bgt.n	800a204 <_printf_float+0x150>
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	07d2      	lsls	r2, r2, #31
 800a202:	d501      	bpl.n	800a208 <_printf_float+0x154>
 800a204:	3301      	adds	r3, #1
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0a2      	beq.n	800a156 <_printf_float+0xa2>
 800a210:	232d      	movs	r3, #45	@ 0x2d
 800a212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a216:	e79e      	b.n	800a156 <_printf_float+0xa2>
 800a218:	9a06      	ldr	r2, [sp, #24]
 800a21a:	2a47      	cmp	r2, #71	@ 0x47
 800a21c:	d1c2      	bne.n	800a1a4 <_printf_float+0xf0>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1c0      	bne.n	800a1a4 <_printf_float+0xf0>
 800a222:	2301      	movs	r3, #1
 800a224:	e7bd      	b.n	800a1a2 <_printf_float+0xee>
 800a226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a22a:	d9db      	bls.n	800a1e4 <_printf_float+0x130>
 800a22c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a230:	d118      	bne.n	800a264 <_printf_float+0x1b0>
 800a232:	2900      	cmp	r1, #0
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	dd0b      	ble.n	800a250 <_printf_float+0x19c>
 800a238:	6121      	str	r1, [r4, #16]
 800a23a:	b913      	cbnz	r3, 800a242 <_printf_float+0x18e>
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	07d0      	lsls	r0, r2, #31
 800a240:	d502      	bpl.n	800a248 <_printf_float+0x194>
 800a242:	3301      	adds	r3, #1
 800a244:	440b      	add	r3, r1
 800a246:	6123      	str	r3, [r4, #16]
 800a248:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a24a:	f04f 0900 	mov.w	r9, #0
 800a24e:	e7db      	b.n	800a208 <_printf_float+0x154>
 800a250:	b913      	cbnz	r3, 800a258 <_printf_float+0x1a4>
 800a252:	6822      	ldr	r2, [r4, #0]
 800a254:	07d2      	lsls	r2, r2, #31
 800a256:	d501      	bpl.n	800a25c <_printf_float+0x1a8>
 800a258:	3302      	adds	r3, #2
 800a25a:	e7f4      	b.n	800a246 <_printf_float+0x192>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e7f2      	b.n	800a246 <_printf_float+0x192>
 800a260:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a266:	4299      	cmp	r1, r3
 800a268:	db05      	blt.n	800a276 <_printf_float+0x1c2>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6121      	str	r1, [r4, #16]
 800a26e:	07d8      	lsls	r0, r3, #31
 800a270:	d5ea      	bpl.n	800a248 <_printf_float+0x194>
 800a272:	1c4b      	adds	r3, r1, #1
 800a274:	e7e7      	b.n	800a246 <_printf_float+0x192>
 800a276:	2900      	cmp	r1, #0
 800a278:	bfd4      	ite	le
 800a27a:	f1c1 0202 	rsble	r2, r1, #2
 800a27e:	2201      	movgt	r2, #1
 800a280:	4413      	add	r3, r2
 800a282:	e7e0      	b.n	800a246 <_printf_float+0x192>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	055a      	lsls	r2, r3, #21
 800a288:	d407      	bmi.n	800a29a <_printf_float+0x1e6>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	4642      	mov	r2, r8
 800a28e:	4631      	mov	r1, r6
 800a290:	4628      	mov	r0, r5
 800a292:	47b8      	blx	r7
 800a294:	3001      	adds	r0, #1
 800a296:	d12b      	bne.n	800a2f0 <_printf_float+0x23c>
 800a298:	e767      	b.n	800a16a <_printf_float+0xb6>
 800a29a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a29e:	f240 80dd 	bls.w	800a45c <_printf_float+0x3a8>
 800a2a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f7f6 fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d033      	beq.n	800a31a <_printf_float+0x266>
 800a2b2:	4a37      	ldr	r2, [pc, #220]	@ (800a390 <_printf_float+0x2dc>)
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f43f af54 	beq.w	800a16a <_printf_float+0xb6>
 800a2c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2c6:	4543      	cmp	r3, r8
 800a2c8:	db02      	blt.n	800a2d0 <_printf_float+0x21c>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	07d8      	lsls	r0, r3, #31
 800a2ce:	d50f      	bpl.n	800a2f0 <_printf_float+0x23c>
 800a2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d4:	4631      	mov	r1, r6
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b8      	blx	r7
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f43f af45 	beq.w	800a16a <_printf_float+0xb6>
 800a2e0:	f04f 0900 	mov.w	r9, #0
 800a2e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2e8:	f104 0a1a 	add.w	sl, r4, #26
 800a2ec:	45c8      	cmp	r8, r9
 800a2ee:	dc09      	bgt.n	800a304 <_printf_float+0x250>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	079b      	lsls	r3, r3, #30
 800a2f4:	f100 8103 	bmi.w	800a4fe <_printf_float+0x44a>
 800a2f8:	68e0      	ldr	r0, [r4, #12]
 800a2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2fc:	4298      	cmp	r0, r3
 800a2fe:	bfb8      	it	lt
 800a300:	4618      	movlt	r0, r3
 800a302:	e734      	b.n	800a16e <_printf_float+0xba>
 800a304:	2301      	movs	r3, #1
 800a306:	4652      	mov	r2, sl
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f af2b 	beq.w	800a16a <_printf_float+0xb6>
 800a314:	f109 0901 	add.w	r9, r9, #1
 800a318:	e7e8      	b.n	800a2ec <_printf_float+0x238>
 800a31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dc39      	bgt.n	800a394 <_printf_float+0x2e0>
 800a320:	4a1b      	ldr	r2, [pc, #108]	@ (800a390 <_printf_float+0x2dc>)
 800a322:	2301      	movs	r3, #1
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	47b8      	blx	r7
 800a32a:	3001      	adds	r0, #1
 800a32c:	f43f af1d 	beq.w	800a16a <_printf_float+0xb6>
 800a330:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a334:	ea59 0303 	orrs.w	r3, r9, r3
 800a338:	d102      	bne.n	800a340 <_printf_float+0x28c>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d5d7      	bpl.n	800a2f0 <_printf_float+0x23c>
 800a340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	47b8      	blx	r7
 800a34a:	3001      	adds	r0, #1
 800a34c:	f43f af0d 	beq.w	800a16a <_printf_float+0xb6>
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	f104 0b1a 	add.w	fp, r4, #26
 800a358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35a:	425b      	negs	r3, r3
 800a35c:	4553      	cmp	r3, sl
 800a35e:	dc01      	bgt.n	800a364 <_printf_float+0x2b0>
 800a360:	464b      	mov	r3, r9
 800a362:	e793      	b.n	800a28c <_printf_float+0x1d8>
 800a364:	2301      	movs	r3, #1
 800a366:	465a      	mov	r2, fp
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f aefb 	beq.w	800a16a <_printf_float+0xb6>
 800a374:	f10a 0a01 	add.w	sl, sl, #1
 800a378:	e7ee      	b.n	800a358 <_printf_float+0x2a4>
 800a37a:	bf00      	nop
 800a37c:	7fefffff 	.word	0x7fefffff
 800a380:	0800f218 	.word	0x0800f218
 800a384:	0800f21c 	.word	0x0800f21c
 800a388:	0800f220 	.word	0x0800f220
 800a38c:	0800f224 	.word	0x0800f224
 800a390:	0800f228 	.word	0x0800f228
 800a394:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a396:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a39a:	4553      	cmp	r3, sl
 800a39c:	bfa8      	it	ge
 800a39e:	4653      	movge	r3, sl
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	4699      	mov	r9, r3
 800a3a4:	dc36      	bgt.n	800a414 <_printf_float+0x360>
 800a3a6:	f04f 0b00 	mov.w	fp, #0
 800a3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ae:	f104 021a 	add.w	r2, r4, #26
 800a3b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	eba3 0309 	sub.w	r3, r3, r9
 800a3ba:	455b      	cmp	r3, fp
 800a3bc:	dc31      	bgt.n	800a422 <_printf_float+0x36e>
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	459a      	cmp	sl, r3
 800a3c2:	dc3a      	bgt.n	800a43a <_printf_float+0x386>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07da      	lsls	r2, r3, #31
 800a3c8:	d437      	bmi.n	800a43a <_printf_float+0x386>
 800a3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3cc:	ebaa 0903 	sub.w	r9, sl, r3
 800a3d0:	9b06      	ldr	r3, [sp, #24]
 800a3d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a3d6:	4599      	cmp	r9, r3
 800a3d8:	bfa8      	it	ge
 800a3da:	4699      	movge	r9, r3
 800a3dc:	f1b9 0f00 	cmp.w	r9, #0
 800a3e0:	dc33      	bgt.n	800a44a <_printf_float+0x396>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ea:	f104 0b1a 	add.w	fp, r4, #26
 800a3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a3f4:	eba3 0309 	sub.w	r3, r3, r9
 800a3f8:	4543      	cmp	r3, r8
 800a3fa:	f77f af79 	ble.w	800a2f0 <_printf_float+0x23c>
 800a3fe:	2301      	movs	r3, #1
 800a400:	465a      	mov	r2, fp
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f aeae 	beq.w	800a16a <_printf_float+0xb6>
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	e7ec      	b.n	800a3ee <_printf_float+0x33a>
 800a414:	4642      	mov	r2, r8
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1c2      	bne.n	800a3a6 <_printf_float+0x2f2>
 800a420:	e6a3      	b.n	800a16a <_printf_float+0xb6>
 800a422:	2301      	movs	r3, #1
 800a424:	4631      	mov	r1, r6
 800a426:	4628      	mov	r0, r5
 800a428:	9206      	str	r2, [sp, #24]
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae9c 	beq.w	800a16a <_printf_float+0xb6>
 800a432:	9a06      	ldr	r2, [sp, #24]
 800a434:	f10b 0b01 	add.w	fp, fp, #1
 800a438:	e7bb      	b.n	800a3b2 <_printf_float+0x2fe>
 800a43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	d1c0      	bne.n	800a3ca <_printf_float+0x316>
 800a448:	e68f      	b.n	800a16a <_printf_float+0xb6>
 800a44a:	9a06      	ldr	r2, [sp, #24]
 800a44c:	464b      	mov	r3, r9
 800a44e:	4442      	add	r2, r8
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	d1c3      	bne.n	800a3e2 <_printf_float+0x32e>
 800a45a:	e686      	b.n	800a16a <_printf_float+0xb6>
 800a45c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a460:	f1ba 0f01 	cmp.w	sl, #1
 800a464:	dc01      	bgt.n	800a46a <_printf_float+0x3b6>
 800a466:	07db      	lsls	r3, r3, #31
 800a468:	d536      	bpl.n	800a4d8 <_printf_float+0x424>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4642      	mov	r2, r8
 800a46e:	4631      	mov	r1, r6
 800a470:	4628      	mov	r0, r5
 800a472:	47b8      	blx	r7
 800a474:	3001      	adds	r0, #1
 800a476:	f43f ae78 	beq.w	800a16a <_printf_float+0xb6>
 800a47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f ae70 	beq.w	800a16a <_printf_float+0xb6>
 800a48a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a496:	f7f6 fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a49a:	b9c0      	cbnz	r0, 800a4ce <_printf_float+0x41a>
 800a49c:	4653      	mov	r3, sl
 800a49e:	f108 0201 	add.w	r2, r8, #1
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d10c      	bne.n	800a4c6 <_printf_float+0x412>
 800a4ac:	e65d      	b.n	800a16a <_printf_float+0xb6>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	465a      	mov	r2, fp
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	47b8      	blx	r7
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	f43f ae56 	beq.w	800a16a <_printf_float+0xb6>
 800a4be:	f108 0801 	add.w	r8, r8, #1
 800a4c2:	45d0      	cmp	r8, sl
 800a4c4:	dbf3      	blt.n	800a4ae <_printf_float+0x3fa>
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4cc:	e6df      	b.n	800a28e <_printf_float+0x1da>
 800a4ce:	f04f 0800 	mov.w	r8, #0
 800a4d2:	f104 0b1a 	add.w	fp, r4, #26
 800a4d6:	e7f4      	b.n	800a4c2 <_printf_float+0x40e>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4642      	mov	r2, r8
 800a4dc:	e7e1      	b.n	800a4a2 <_printf_float+0x3ee>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	464a      	mov	r2, r9
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	47b8      	blx	r7
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	f43f ae3e 	beq.w	800a16a <_printf_float+0xb6>
 800a4ee:	f108 0801 	add.w	r8, r8, #1
 800a4f2:	68e3      	ldr	r3, [r4, #12]
 800a4f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4f6:	1a5b      	subs	r3, r3, r1
 800a4f8:	4543      	cmp	r3, r8
 800a4fa:	dcf0      	bgt.n	800a4de <_printf_float+0x42a>
 800a4fc:	e6fc      	b.n	800a2f8 <_printf_float+0x244>
 800a4fe:	f04f 0800 	mov.w	r8, #0
 800a502:	f104 0919 	add.w	r9, r4, #25
 800a506:	e7f4      	b.n	800a4f2 <_printf_float+0x43e>

0800a508 <_printf_common>:
 800a508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	4616      	mov	r6, r2
 800a50e:	4698      	mov	r8, r3
 800a510:	688a      	ldr	r2, [r1, #8]
 800a512:	690b      	ldr	r3, [r1, #16]
 800a514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a518:	4293      	cmp	r3, r2
 800a51a:	bfb8      	it	lt
 800a51c:	4613      	movlt	r3, r2
 800a51e:	6033      	str	r3, [r6, #0]
 800a520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a524:	4607      	mov	r7, r0
 800a526:	460c      	mov	r4, r1
 800a528:	b10a      	cbz	r2, 800a52e <_printf_common+0x26>
 800a52a:	3301      	adds	r3, #1
 800a52c:	6033      	str	r3, [r6, #0]
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	0699      	lsls	r1, r3, #26
 800a532:	bf42      	ittt	mi
 800a534:	6833      	ldrmi	r3, [r6, #0]
 800a536:	3302      	addmi	r3, #2
 800a538:	6033      	strmi	r3, [r6, #0]
 800a53a:	6825      	ldr	r5, [r4, #0]
 800a53c:	f015 0506 	ands.w	r5, r5, #6
 800a540:	d106      	bne.n	800a550 <_printf_common+0x48>
 800a542:	f104 0a19 	add.w	sl, r4, #25
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	6832      	ldr	r2, [r6, #0]
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	42ab      	cmp	r3, r5
 800a54e:	dc26      	bgt.n	800a59e <_printf_common+0x96>
 800a550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a554:	6822      	ldr	r2, [r4, #0]
 800a556:	3b00      	subs	r3, #0
 800a558:	bf18      	it	ne
 800a55a:	2301      	movne	r3, #1
 800a55c:	0692      	lsls	r2, r2, #26
 800a55e:	d42b      	bmi.n	800a5b8 <_printf_common+0xb0>
 800a560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a564:	4641      	mov	r1, r8
 800a566:	4638      	mov	r0, r7
 800a568:	47c8      	blx	r9
 800a56a:	3001      	adds	r0, #1
 800a56c:	d01e      	beq.n	800a5ac <_printf_common+0xa4>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	6922      	ldr	r2, [r4, #16]
 800a572:	f003 0306 	and.w	r3, r3, #6
 800a576:	2b04      	cmp	r3, #4
 800a578:	bf02      	ittt	eq
 800a57a:	68e5      	ldreq	r5, [r4, #12]
 800a57c:	6833      	ldreq	r3, [r6, #0]
 800a57e:	1aed      	subeq	r5, r5, r3
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	bf0c      	ite	eq
 800a584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a588:	2500      	movne	r5, #0
 800a58a:	4293      	cmp	r3, r2
 800a58c:	bfc4      	itt	gt
 800a58e:	1a9b      	subgt	r3, r3, r2
 800a590:	18ed      	addgt	r5, r5, r3
 800a592:	2600      	movs	r6, #0
 800a594:	341a      	adds	r4, #26
 800a596:	42b5      	cmp	r5, r6
 800a598:	d11a      	bne.n	800a5d0 <_printf_common+0xc8>
 800a59a:	2000      	movs	r0, #0
 800a59c:	e008      	b.n	800a5b0 <_printf_common+0xa8>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4652      	mov	r2, sl
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	47c8      	blx	r9
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d103      	bne.n	800a5b4 <_printf_common+0xac>
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	e7c6      	b.n	800a546 <_printf_common+0x3e>
 800a5b8:	18e1      	adds	r1, r4, r3
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	2030      	movs	r0, #48	@ 0x30
 800a5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5c2:	4422      	add	r2, r4
 800a5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	e7c7      	b.n	800a560 <_printf_common+0x58>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	4641      	mov	r1, r8
 800a5d6:	4638      	mov	r0, r7
 800a5d8:	47c8      	blx	r9
 800a5da:	3001      	adds	r0, #1
 800a5dc:	d0e6      	beq.n	800a5ac <_printf_common+0xa4>
 800a5de:	3601      	adds	r6, #1
 800a5e0:	e7d9      	b.n	800a596 <_printf_common+0x8e>
	...

0800a5e4 <_printf_i>:
 800a5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	7e0f      	ldrb	r7, [r1, #24]
 800a5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5ec:	2f78      	cmp	r7, #120	@ 0x78
 800a5ee:	4691      	mov	r9, r2
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	469a      	mov	sl, r3
 800a5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5fa:	d807      	bhi.n	800a60c <_printf_i+0x28>
 800a5fc:	2f62      	cmp	r7, #98	@ 0x62
 800a5fe:	d80a      	bhi.n	800a616 <_printf_i+0x32>
 800a600:	2f00      	cmp	r7, #0
 800a602:	f000 80d2 	beq.w	800a7aa <_printf_i+0x1c6>
 800a606:	2f58      	cmp	r7, #88	@ 0x58
 800a608:	f000 80b9 	beq.w	800a77e <_printf_i+0x19a>
 800a60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a614:	e03a      	b.n	800a68c <_printf_i+0xa8>
 800a616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a61a:	2b15      	cmp	r3, #21
 800a61c:	d8f6      	bhi.n	800a60c <_printf_i+0x28>
 800a61e:	a101      	add	r1, pc, #4	@ (adr r1, 800a624 <_printf_i+0x40>)
 800a620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a691 	.word	0x0800a691
 800a62c:	0800a60d 	.word	0x0800a60d
 800a630:	0800a60d 	.word	0x0800a60d
 800a634:	0800a60d 	.word	0x0800a60d
 800a638:	0800a60d 	.word	0x0800a60d
 800a63c:	0800a691 	.word	0x0800a691
 800a640:	0800a60d 	.word	0x0800a60d
 800a644:	0800a60d 	.word	0x0800a60d
 800a648:	0800a60d 	.word	0x0800a60d
 800a64c:	0800a60d 	.word	0x0800a60d
 800a650:	0800a791 	.word	0x0800a791
 800a654:	0800a6bb 	.word	0x0800a6bb
 800a658:	0800a74b 	.word	0x0800a74b
 800a65c:	0800a60d 	.word	0x0800a60d
 800a660:	0800a60d 	.word	0x0800a60d
 800a664:	0800a7b3 	.word	0x0800a7b3
 800a668:	0800a60d 	.word	0x0800a60d
 800a66c:	0800a6bb 	.word	0x0800a6bb
 800a670:	0800a60d 	.word	0x0800a60d
 800a674:	0800a60d 	.word	0x0800a60d
 800a678:	0800a753 	.word	0x0800a753
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	1d1a      	adds	r2, r3, #4
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6032      	str	r2, [r6, #0]
 800a684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a68c:	2301      	movs	r3, #1
 800a68e:	e09d      	b.n	800a7cc <_printf_i+0x1e8>
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	1d19      	adds	r1, r3, #4
 800a696:	6031      	str	r1, [r6, #0]
 800a698:	0606      	lsls	r6, r0, #24
 800a69a:	d501      	bpl.n	800a6a0 <_printf_i+0xbc>
 800a69c:	681d      	ldr	r5, [r3, #0]
 800a69e:	e003      	b.n	800a6a8 <_printf_i+0xc4>
 800a6a0:	0645      	lsls	r5, r0, #25
 800a6a2:	d5fb      	bpl.n	800a69c <_printf_i+0xb8>
 800a6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	da03      	bge.n	800a6b4 <_printf_i+0xd0>
 800a6ac:	232d      	movs	r3, #45	@ 0x2d
 800a6ae:	426d      	negs	r5, r5
 800a6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6b4:	4859      	ldr	r0, [pc, #356]	@ (800a81c <_printf_i+0x238>)
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	e011      	b.n	800a6de <_printf_i+0xfa>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	0608      	lsls	r0, r1, #24
 800a6c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6c4:	d402      	bmi.n	800a6cc <_printf_i+0xe8>
 800a6c6:	0649      	lsls	r1, r1, #25
 800a6c8:	bf48      	it	mi
 800a6ca:	b2ad      	uxthmi	r5, r5
 800a6cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ce:	4853      	ldr	r0, [pc, #332]	@ (800a81c <_printf_i+0x238>)
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	bf14      	ite	ne
 800a6d4:	230a      	movne	r3, #10
 800a6d6:	2308      	moveq	r3, #8
 800a6d8:	2100      	movs	r1, #0
 800a6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6de:	6866      	ldr	r6, [r4, #4]
 800a6e0:	60a6      	str	r6, [r4, #8]
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	bfa2      	ittt	ge
 800a6e6:	6821      	ldrge	r1, [r4, #0]
 800a6e8:	f021 0104 	bicge.w	r1, r1, #4
 800a6ec:	6021      	strge	r1, [r4, #0]
 800a6ee:	b90d      	cbnz	r5, 800a6f4 <_printf_i+0x110>
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	d04b      	beq.n	800a78c <_printf_i+0x1a8>
 800a6f4:	4616      	mov	r6, r2
 800a6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800a6fe:	5dc7      	ldrb	r7, [r0, r7]
 800a700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a704:	462f      	mov	r7, r5
 800a706:	42bb      	cmp	r3, r7
 800a708:	460d      	mov	r5, r1
 800a70a:	d9f4      	bls.n	800a6f6 <_printf_i+0x112>
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d10b      	bne.n	800a728 <_printf_i+0x144>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	07df      	lsls	r7, r3, #31
 800a714:	d508      	bpl.n	800a728 <_printf_i+0x144>
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4299      	cmp	r1, r3
 800a71c:	bfde      	ittt	le
 800a71e:	2330      	movle	r3, #48	@ 0x30
 800a720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a724:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a728:	1b92      	subs	r2, r2, r6
 800a72a:	6122      	str	r2, [r4, #16]
 800a72c:	f8cd a000 	str.w	sl, [sp]
 800a730:	464b      	mov	r3, r9
 800a732:	aa03      	add	r2, sp, #12
 800a734:	4621      	mov	r1, r4
 800a736:	4640      	mov	r0, r8
 800a738:	f7ff fee6 	bl	800a508 <_printf_common>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d14a      	bne.n	800a7d6 <_printf_i+0x1f2>
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	b004      	add	sp, #16
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f043 0320 	orr.w	r3, r3, #32
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	4833      	ldr	r0, [pc, #204]	@ (800a820 <_printf_i+0x23c>)
 800a754:	2778      	movs	r7, #120	@ 0x78
 800a756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a75a:	6823      	ldr	r3, [r4, #0]
 800a75c:	6831      	ldr	r1, [r6, #0]
 800a75e:	061f      	lsls	r7, r3, #24
 800a760:	f851 5b04 	ldr.w	r5, [r1], #4
 800a764:	d402      	bmi.n	800a76c <_printf_i+0x188>
 800a766:	065f      	lsls	r7, r3, #25
 800a768:	bf48      	it	mi
 800a76a:	b2ad      	uxthmi	r5, r5
 800a76c:	6031      	str	r1, [r6, #0]
 800a76e:	07d9      	lsls	r1, r3, #31
 800a770:	bf44      	itt	mi
 800a772:	f043 0320 	orrmi.w	r3, r3, #32
 800a776:	6023      	strmi	r3, [r4, #0]
 800a778:	b11d      	cbz	r5, 800a782 <_printf_i+0x19e>
 800a77a:	2310      	movs	r3, #16
 800a77c:	e7ac      	b.n	800a6d8 <_printf_i+0xf4>
 800a77e:	4827      	ldr	r0, [pc, #156]	@ (800a81c <_printf_i+0x238>)
 800a780:	e7e9      	b.n	800a756 <_printf_i+0x172>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f023 0320 	bic.w	r3, r3, #32
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	e7f6      	b.n	800a77a <_printf_i+0x196>
 800a78c:	4616      	mov	r6, r2
 800a78e:	e7bd      	b.n	800a70c <_printf_i+0x128>
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	6825      	ldr	r5, [r4, #0]
 800a794:	6961      	ldr	r1, [r4, #20]
 800a796:	1d18      	adds	r0, r3, #4
 800a798:	6030      	str	r0, [r6, #0]
 800a79a:	062e      	lsls	r6, r5, #24
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	d501      	bpl.n	800a7a4 <_printf_i+0x1c0>
 800a7a0:	6019      	str	r1, [r3, #0]
 800a7a2:	e002      	b.n	800a7aa <_printf_i+0x1c6>
 800a7a4:	0668      	lsls	r0, r5, #25
 800a7a6:	d5fb      	bpl.n	800a7a0 <_printf_i+0x1bc>
 800a7a8:	8019      	strh	r1, [r3, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	4616      	mov	r6, r2
 800a7b0:	e7bc      	b.n	800a72c <_printf_i+0x148>
 800a7b2:	6833      	ldr	r3, [r6, #0]
 800a7b4:	1d1a      	adds	r2, r3, #4
 800a7b6:	6032      	str	r2, [r6, #0]
 800a7b8:	681e      	ldr	r6, [r3, #0]
 800a7ba:	6862      	ldr	r2, [r4, #4]
 800a7bc:	2100      	movs	r1, #0
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7f5 fd0e 	bl	80001e0 <memchr>
 800a7c4:	b108      	cbz	r0, 800a7ca <_printf_i+0x1e6>
 800a7c6:	1b80      	subs	r0, r0, r6
 800a7c8:	6060      	str	r0, [r4, #4]
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7d4:	e7aa      	b.n	800a72c <_printf_i+0x148>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	4632      	mov	r2, r6
 800a7da:	4649      	mov	r1, r9
 800a7dc:	4640      	mov	r0, r8
 800a7de:	47d0      	blx	sl
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d0ad      	beq.n	800a740 <_printf_i+0x15c>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	079b      	lsls	r3, r3, #30
 800a7e8:	d413      	bmi.n	800a812 <_printf_i+0x22e>
 800a7ea:	68e0      	ldr	r0, [r4, #12]
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	4298      	cmp	r0, r3
 800a7f0:	bfb8      	it	lt
 800a7f2:	4618      	movlt	r0, r3
 800a7f4:	e7a6      	b.n	800a744 <_printf_i+0x160>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	47d0      	blx	sl
 800a800:	3001      	adds	r0, #1
 800a802:	d09d      	beq.n	800a740 <_printf_i+0x15c>
 800a804:	3501      	adds	r5, #1
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	9903      	ldr	r1, [sp, #12]
 800a80a:	1a5b      	subs	r3, r3, r1
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	dcf2      	bgt.n	800a7f6 <_printf_i+0x212>
 800a810:	e7eb      	b.n	800a7ea <_printf_i+0x206>
 800a812:	2500      	movs	r5, #0
 800a814:	f104 0619 	add.w	r6, r4, #25
 800a818:	e7f5      	b.n	800a806 <_printf_i+0x222>
 800a81a:	bf00      	nop
 800a81c:	0800f22a 	.word	0x0800f22a
 800a820:	0800f23b 	.word	0x0800f23b

0800a824 <std>:
 800a824:	2300      	movs	r3, #0
 800a826:	b510      	push	{r4, lr}
 800a828:	4604      	mov	r4, r0
 800a82a:	e9c0 3300 	strd	r3, r3, [r0]
 800a82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a832:	6083      	str	r3, [r0, #8]
 800a834:	8181      	strh	r1, [r0, #12]
 800a836:	6643      	str	r3, [r0, #100]	@ 0x64
 800a838:	81c2      	strh	r2, [r0, #14]
 800a83a:	6183      	str	r3, [r0, #24]
 800a83c:	4619      	mov	r1, r3
 800a83e:	2208      	movs	r2, #8
 800a840:	305c      	adds	r0, #92	@ 0x5c
 800a842:	f000 f914 	bl	800aa6e <memset>
 800a846:	4b0d      	ldr	r3, [pc, #52]	@ (800a87c <std+0x58>)
 800a848:	6263      	str	r3, [r4, #36]	@ 0x24
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <std+0x5c>)
 800a84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a84e:	4b0d      	ldr	r3, [pc, #52]	@ (800a884 <std+0x60>)
 800a850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a852:	4b0d      	ldr	r3, [pc, #52]	@ (800a888 <std+0x64>)
 800a854:	6323      	str	r3, [r4, #48]	@ 0x30
 800a856:	4b0d      	ldr	r3, [pc, #52]	@ (800a88c <std+0x68>)
 800a858:	6224      	str	r4, [r4, #32]
 800a85a:	429c      	cmp	r4, r3
 800a85c:	d006      	beq.n	800a86c <std+0x48>
 800a85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a862:	4294      	cmp	r4, r2
 800a864:	d002      	beq.n	800a86c <std+0x48>
 800a866:	33d0      	adds	r3, #208	@ 0xd0
 800a868:	429c      	cmp	r4, r3
 800a86a:	d105      	bne.n	800a878 <std+0x54>
 800a86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a874:	f000 b978 	b.w	800ab68 <__retarget_lock_init_recursive>
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	bf00      	nop
 800a87c:	0800a9e9 	.word	0x0800a9e9
 800a880:	0800aa0b 	.word	0x0800aa0b
 800a884:	0800aa43 	.word	0x0800aa43
 800a888:	0800aa67 	.word	0x0800aa67
 800a88c:	20000634 	.word	0x20000634

0800a890 <stdio_exit_handler>:
 800a890:	4a02      	ldr	r2, [pc, #8]	@ (800a89c <stdio_exit_handler+0xc>)
 800a892:	4903      	ldr	r1, [pc, #12]	@ (800a8a0 <stdio_exit_handler+0x10>)
 800a894:	4803      	ldr	r0, [pc, #12]	@ (800a8a4 <stdio_exit_handler+0x14>)
 800a896:	f000 b869 	b.w	800a96c <_fwalk_sglue>
 800a89a:	bf00      	nop
 800a89c:	20000028 	.word	0x20000028
 800a8a0:	0800c4e5 	.word	0x0800c4e5
 800a8a4:	20000038 	.word	0x20000038

0800a8a8 <cleanup_stdio>:
 800a8a8:	6841      	ldr	r1, [r0, #4]
 800a8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a8dc <cleanup_stdio+0x34>)
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	d001      	beq.n	800a8b8 <cleanup_stdio+0x10>
 800a8b4:	f001 fe16 	bl	800c4e4 <_fflush_r>
 800a8b8:	68a1      	ldr	r1, [r4, #8]
 800a8ba:	4b09      	ldr	r3, [pc, #36]	@ (800a8e0 <cleanup_stdio+0x38>)
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	d002      	beq.n	800a8c6 <cleanup_stdio+0x1e>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f001 fe0f 	bl	800c4e4 <_fflush_r>
 800a8c6:	68e1      	ldr	r1, [r4, #12]
 800a8c8:	4b06      	ldr	r3, [pc, #24]	@ (800a8e4 <cleanup_stdio+0x3c>)
 800a8ca:	4299      	cmp	r1, r3
 800a8cc:	d004      	beq.n	800a8d8 <cleanup_stdio+0x30>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f001 be06 	b.w	800c4e4 <_fflush_r>
 800a8d8:	bd10      	pop	{r4, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000634 	.word	0x20000634
 800a8e0:	2000069c 	.word	0x2000069c
 800a8e4:	20000704 	.word	0x20000704

0800a8e8 <global_stdio_init.part.0>:
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <global_stdio_init.part.0+0x30>)
 800a8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800a91c <global_stdio_init.part.0+0x34>)
 800a8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a920 <global_stdio_init.part.0+0x38>)
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2104      	movs	r1, #4
 800a8f8:	f7ff ff94 	bl	800a824 <std>
 800a8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a900:	2201      	movs	r2, #1
 800a902:	2109      	movs	r1, #9
 800a904:	f7ff ff8e 	bl	800a824 <std>
 800a908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a90c:	2202      	movs	r2, #2
 800a90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a912:	2112      	movs	r1, #18
 800a914:	f7ff bf86 	b.w	800a824 <std>
 800a918:	2000076c 	.word	0x2000076c
 800a91c:	20000634 	.word	0x20000634
 800a920:	0800a891 	.word	0x0800a891

0800a924 <__sfp_lock_acquire>:
 800a924:	4801      	ldr	r0, [pc, #4]	@ (800a92c <__sfp_lock_acquire+0x8>)
 800a926:	f000 b920 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800a92a:	bf00      	nop
 800a92c:	20000775 	.word	0x20000775

0800a930 <__sfp_lock_release>:
 800a930:	4801      	ldr	r0, [pc, #4]	@ (800a938 <__sfp_lock_release+0x8>)
 800a932:	f000 b91b 	b.w	800ab6c <__retarget_lock_release_recursive>
 800a936:	bf00      	nop
 800a938:	20000775 	.word	0x20000775

0800a93c <__sinit>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4604      	mov	r4, r0
 800a940:	f7ff fff0 	bl	800a924 <__sfp_lock_acquire>
 800a944:	6a23      	ldr	r3, [r4, #32]
 800a946:	b11b      	cbz	r3, 800a950 <__sinit+0x14>
 800a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94c:	f7ff bff0 	b.w	800a930 <__sfp_lock_release>
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <__sinit+0x28>)
 800a952:	6223      	str	r3, [r4, #32]
 800a954:	4b04      	ldr	r3, [pc, #16]	@ (800a968 <__sinit+0x2c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1f5      	bne.n	800a948 <__sinit+0xc>
 800a95c:	f7ff ffc4 	bl	800a8e8 <global_stdio_init.part.0>
 800a960:	e7f2      	b.n	800a948 <__sinit+0xc>
 800a962:	bf00      	nop
 800a964:	0800a8a9 	.word	0x0800a8a9
 800a968:	2000076c 	.word	0x2000076c

0800a96c <_fwalk_sglue>:
 800a96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a970:	4607      	mov	r7, r0
 800a972:	4688      	mov	r8, r1
 800a974:	4614      	mov	r4, r2
 800a976:	2600      	movs	r6, #0
 800a978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a97c:	f1b9 0901 	subs.w	r9, r9, #1
 800a980:	d505      	bpl.n	800a98e <_fwalk_sglue+0x22>
 800a982:	6824      	ldr	r4, [r4, #0]
 800a984:	2c00      	cmp	r4, #0
 800a986:	d1f7      	bne.n	800a978 <_fwalk_sglue+0xc>
 800a988:	4630      	mov	r0, r6
 800a98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d907      	bls.n	800a9a4 <_fwalk_sglue+0x38>
 800a994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a998:	3301      	adds	r3, #1
 800a99a:	d003      	beq.n	800a9a4 <_fwalk_sglue+0x38>
 800a99c:	4629      	mov	r1, r5
 800a99e:	4638      	mov	r0, r7
 800a9a0:	47c0      	blx	r8
 800a9a2:	4306      	orrs	r6, r0
 800a9a4:	3568      	adds	r5, #104	@ 0x68
 800a9a6:	e7e9      	b.n	800a97c <_fwalk_sglue+0x10>

0800a9a8 <siprintf>:
 800a9a8:	b40e      	push	{r1, r2, r3}
 800a9aa:	b500      	push	{lr}
 800a9ac:	b09c      	sub	sp, #112	@ 0x70
 800a9ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800a9b0:	9002      	str	r0, [sp, #8]
 800a9b2:	9006      	str	r0, [sp, #24]
 800a9b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9b8:	4809      	ldr	r0, [pc, #36]	@ (800a9e0 <siprintf+0x38>)
 800a9ba:	9107      	str	r1, [sp, #28]
 800a9bc:	9104      	str	r1, [sp, #16]
 800a9be:	4909      	ldr	r1, [pc, #36]	@ (800a9e4 <siprintf+0x3c>)
 800a9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c4:	9105      	str	r1, [sp, #20]
 800a9c6:	6800      	ldr	r0, [r0, #0]
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	a902      	add	r1, sp, #8
 800a9cc:	f001 fc0a 	bl	800c1e4 <_svfiprintf_r>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	b01c      	add	sp, #112	@ 0x70
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	20000034 	.word	0x20000034
 800a9e4:	ffff0208 	.word	0xffff0208

0800a9e8 <__sread>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f0:	f000 f86c 	bl	800aacc <_read_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	bfab      	itete	ge
 800a9f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a9fc:	181b      	addge	r3, r3, r0
 800a9fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa02:	bfac      	ite	ge
 800aa04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa06:	81a3      	strhlt	r3, [r4, #12]
 800aa08:	bd10      	pop	{r4, pc}

0800aa0a <__swrite>:
 800aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0e:	461f      	mov	r7, r3
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	05db      	lsls	r3, r3, #23
 800aa14:	4605      	mov	r5, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	4616      	mov	r6, r2
 800aa1a:	d505      	bpl.n	800aa28 <__swrite+0x1e>
 800aa1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa20:	2302      	movs	r3, #2
 800aa22:	2200      	movs	r2, #0
 800aa24:	f000 f840 	bl	800aaa8 <_lseek_r>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa32:	81a3      	strh	r3, [r4, #12]
 800aa34:	4632      	mov	r2, r6
 800aa36:	463b      	mov	r3, r7
 800aa38:	4628      	mov	r0, r5
 800aa3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3e:	f000 b857 	b.w	800aaf0 <_write_r>

0800aa42 <__sseek>:
 800aa42:	b510      	push	{r4, lr}
 800aa44:	460c      	mov	r4, r1
 800aa46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa4a:	f000 f82d 	bl	800aaa8 <_lseek_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	bf15      	itete	ne
 800aa54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa5e:	81a3      	strheq	r3, [r4, #12]
 800aa60:	bf18      	it	ne
 800aa62:	81a3      	strhne	r3, [r4, #12]
 800aa64:	bd10      	pop	{r4, pc}

0800aa66 <__sclose>:
 800aa66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6a:	f000 b80d 	b.w	800aa88 <_close_r>

0800aa6e <memset>:
 800aa6e:	4402      	add	r2, r0
 800aa70:	4603      	mov	r3, r0
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d100      	bne.n	800aa78 <memset+0xa>
 800aa76:	4770      	bx	lr
 800aa78:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7c:	e7f9      	b.n	800aa72 <memset+0x4>
	...

0800aa80 <_localeconv_r>:
 800aa80:	4800      	ldr	r0, [pc, #0]	@ (800aa84 <_localeconv_r+0x4>)
 800aa82:	4770      	bx	lr
 800aa84:	20000174 	.word	0x20000174

0800aa88 <_close_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d06      	ldr	r5, [pc, #24]	@ (800aaa4 <_close_r+0x1c>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7fb f828 	bl	8005ae8 <_close>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_close_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_close_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000770 	.word	0x20000770

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d07      	ldr	r5, [pc, #28]	@ (800aac8 <_lseek_r+0x20>)
 800aaac:	4604      	mov	r4, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7fb f83d 	bl	8005b36 <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000770 	.word	0x20000770

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d07      	ldr	r5, [pc, #28]	@ (800aaec <_read_r+0x20>)
 800aad0:	4604      	mov	r4, r0
 800aad2:	4608      	mov	r0, r1
 800aad4:	4611      	mov	r1, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7fa ffcb 	bl	8005a76 <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	20000770 	.word	0x20000770

0800aaf0 <_write_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	@ (800ab10 <_write_r+0x20>)
 800aaf4:	4604      	mov	r4, r0
 800aaf6:	4608      	mov	r0, r1
 800aaf8:	4611      	mov	r1, r2
 800aafa:	2200      	movs	r2, #0
 800aafc:	602a      	str	r2, [r5, #0]
 800aafe:	461a      	mov	r2, r3
 800ab00:	f7fa ffd6 	bl	8005ab0 <_write>
 800ab04:	1c43      	adds	r3, r0, #1
 800ab06:	d102      	bne.n	800ab0e <_write_r+0x1e>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	b103      	cbz	r3, 800ab0e <_write_r+0x1e>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000770 	.word	0x20000770

0800ab14 <__errno>:
 800ab14:	4b01      	ldr	r3, [pc, #4]	@ (800ab1c <__errno+0x8>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20000034 	.word	0x20000034

0800ab20 <__libc_init_array>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4d0d      	ldr	r5, [pc, #52]	@ (800ab58 <__libc_init_array+0x38>)
 800ab24:	4c0d      	ldr	r4, [pc, #52]	@ (800ab5c <__libc_init_array+0x3c>)
 800ab26:	1b64      	subs	r4, r4, r5
 800ab28:	10a4      	asrs	r4, r4, #2
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d109      	bne.n	800ab44 <__libc_init_array+0x24>
 800ab30:	4d0b      	ldr	r5, [pc, #44]	@ (800ab60 <__libc_init_array+0x40>)
 800ab32:	4c0c      	ldr	r4, [pc, #48]	@ (800ab64 <__libc_init_array+0x44>)
 800ab34:	f002 f866 	bl	800cc04 <_init>
 800ab38:	1b64      	subs	r4, r4, r5
 800ab3a:	10a4      	asrs	r4, r4, #2
 800ab3c:	2600      	movs	r6, #0
 800ab3e:	42a6      	cmp	r6, r4
 800ab40:	d105      	bne.n	800ab4e <__libc_init_array+0x2e>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab48:	4798      	blx	r3
 800ab4a:	3601      	adds	r6, #1
 800ab4c:	e7ee      	b.n	800ab2c <__libc_init_array+0xc>
 800ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab52:	4798      	blx	r3
 800ab54:	3601      	adds	r6, #1
 800ab56:	e7f2      	b.n	800ab3e <__libc_init_array+0x1e>
 800ab58:	0800f590 	.word	0x0800f590
 800ab5c:	0800f590 	.word	0x0800f590
 800ab60:	0800f590 	.word	0x0800f590
 800ab64:	0800f594 	.word	0x0800f594

0800ab68 <__retarget_lock_init_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_acquire_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <__retarget_lock_release_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <memcpy>:
 800ab6e:	440a      	add	r2, r1
 800ab70:	4291      	cmp	r1, r2
 800ab72:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab76:	d100      	bne.n	800ab7a <memcpy+0xc>
 800ab78:	4770      	bx	lr
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab84:	4291      	cmp	r1, r2
 800ab86:	d1f9      	bne.n	800ab7c <memcpy+0xe>
 800ab88:	bd10      	pop	{r4, pc}

0800ab8a <quorem>:
 800ab8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8e:	6903      	ldr	r3, [r0, #16]
 800ab90:	690c      	ldr	r4, [r1, #16]
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	4607      	mov	r7, r0
 800ab96:	db7e      	blt.n	800ac96 <quorem+0x10c>
 800ab98:	3c01      	subs	r4, #1
 800ab9a:	f101 0814 	add.w	r8, r1, #20
 800ab9e:	00a3      	lsls	r3, r4, #2
 800aba0:	f100 0514 	add.w	r5, r0, #20
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abb4:	3301      	adds	r3, #1
 800abb6:	429a      	cmp	r2, r3
 800abb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800abc0:	d32e      	bcc.n	800ac20 <quorem+0x96>
 800abc2:	f04f 0a00 	mov.w	sl, #0
 800abc6:	46c4      	mov	ip, r8
 800abc8:	46ae      	mov	lr, r5
 800abca:	46d3      	mov	fp, sl
 800abcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abd0:	b298      	uxth	r0, r3
 800abd2:	fb06 a000 	mla	r0, r6, r0, sl
 800abd6:	0c02      	lsrs	r2, r0, #16
 800abd8:	0c1b      	lsrs	r3, r3, #16
 800abda:	fb06 2303 	mla	r3, r6, r3, r2
 800abde:	f8de 2000 	ldr.w	r2, [lr]
 800abe2:	b280      	uxth	r0, r0
 800abe4:	b292      	uxth	r2, r2
 800abe6:	1a12      	subs	r2, r2, r0
 800abe8:	445a      	add	r2, fp
 800abea:	f8de 0000 	ldr.w	r0, [lr]
 800abee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abf8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abfc:	b292      	uxth	r2, r2
 800abfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac02:	45e1      	cmp	r9, ip
 800ac04:	f84e 2b04 	str.w	r2, [lr], #4
 800ac08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac0c:	d2de      	bcs.n	800abcc <quorem+0x42>
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	58eb      	ldr	r3, [r5, r3]
 800ac12:	b92b      	cbnz	r3, 800ac20 <quorem+0x96>
 800ac14:	9b01      	ldr	r3, [sp, #4]
 800ac16:	3b04      	subs	r3, #4
 800ac18:	429d      	cmp	r5, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	d32f      	bcc.n	800ac7e <quorem+0xf4>
 800ac1e:	613c      	str	r4, [r7, #16]
 800ac20:	4638      	mov	r0, r7
 800ac22:	f001 f97b 	bl	800bf1c <__mcmp>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	db25      	blt.n	800ac76 <quorem+0xec>
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac32:	f8d1 c000 	ldr.w	ip, [r1]
 800ac36:	fa1f fe82 	uxth.w	lr, r2
 800ac3a:	fa1f f38c 	uxth.w	r3, ip
 800ac3e:	eba3 030e 	sub.w	r3, r3, lr
 800ac42:	4403      	add	r3, r0
 800ac44:	0c12      	lsrs	r2, r2, #16
 800ac46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac54:	45c1      	cmp	r9, r8
 800ac56:	f841 3b04 	str.w	r3, [r1], #4
 800ac5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac5e:	d2e6      	bcs.n	800ac2e <quorem+0xa4>
 800ac60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac68:	b922      	cbnz	r2, 800ac74 <quorem+0xea>
 800ac6a:	3b04      	subs	r3, #4
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	d30b      	bcc.n	800ac8a <quorem+0x100>
 800ac72:	613c      	str	r4, [r7, #16]
 800ac74:	3601      	adds	r6, #1
 800ac76:	4630      	mov	r0, r6
 800ac78:	b003      	add	sp, #12
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	3b04      	subs	r3, #4
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	d1cb      	bne.n	800ac1e <quorem+0x94>
 800ac86:	3c01      	subs	r4, #1
 800ac88:	e7c6      	b.n	800ac18 <quorem+0x8e>
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	3b04      	subs	r3, #4
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	d1ef      	bne.n	800ac72 <quorem+0xe8>
 800ac92:	3c01      	subs	r4, #1
 800ac94:	e7ea      	b.n	800ac6c <quorem+0xe2>
 800ac96:	2000      	movs	r0, #0
 800ac98:	e7ee      	b.n	800ac78 <quorem+0xee>
 800ac9a:	0000      	movs	r0, r0
 800ac9c:	0000      	movs	r0, r0
	...

0800aca0 <_dtoa_r>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	69c7      	ldr	r7, [r0, #28]
 800aca6:	b099      	sub	sp, #100	@ 0x64
 800aca8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acac:	ec55 4b10 	vmov	r4, r5, d0
 800acb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800acb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800acb4:	4683      	mov	fp, r0
 800acb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800acb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acba:	b97f      	cbnz	r7, 800acdc <_dtoa_r+0x3c>
 800acbc:	2010      	movs	r0, #16
 800acbe:	f000 fdfd 	bl	800b8bc <malloc>
 800acc2:	4602      	mov	r2, r0
 800acc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800acc8:	b920      	cbnz	r0, 800acd4 <_dtoa_r+0x34>
 800acca:	4ba7      	ldr	r3, [pc, #668]	@ (800af68 <_dtoa_r+0x2c8>)
 800accc:	21ef      	movs	r1, #239	@ 0xef
 800acce:	48a7      	ldr	r0, [pc, #668]	@ (800af6c <_dtoa_r+0x2cc>)
 800acd0:	f001 fc5a 	bl	800c588 <__assert_func>
 800acd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acd8:	6007      	str	r7, [r0, #0]
 800acda:	60c7      	str	r7, [r0, #12]
 800acdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ace0:	6819      	ldr	r1, [r3, #0]
 800ace2:	b159      	cbz	r1, 800acfc <_dtoa_r+0x5c>
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	604a      	str	r2, [r1, #4]
 800ace8:	2301      	movs	r3, #1
 800acea:	4093      	lsls	r3, r2
 800acec:	608b      	str	r3, [r1, #8]
 800acee:	4658      	mov	r0, fp
 800acf0:	f000 feda 	bl	800baa8 <_Bfree>
 800acf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	1e2b      	subs	r3, r5, #0
 800acfe:	bfb9      	ittee	lt
 800ad00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad04:	9303      	strlt	r3, [sp, #12]
 800ad06:	2300      	movge	r3, #0
 800ad08:	6033      	strge	r3, [r6, #0]
 800ad0a:	9f03      	ldr	r7, [sp, #12]
 800ad0c:	4b98      	ldr	r3, [pc, #608]	@ (800af70 <_dtoa_r+0x2d0>)
 800ad0e:	bfbc      	itt	lt
 800ad10:	2201      	movlt	r2, #1
 800ad12:	6032      	strlt	r2, [r6, #0]
 800ad14:	43bb      	bics	r3, r7
 800ad16:	d112      	bne.n	800ad3e <_dtoa_r+0x9e>
 800ad18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad24:	4323      	orrs	r3, r4
 800ad26:	f000 854d 	beq.w	800b7c4 <_dtoa_r+0xb24>
 800ad2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af84 <_dtoa_r+0x2e4>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 854f 	beq.w	800b7d4 <_dtoa_r+0xb34>
 800ad36:	f10a 0303 	add.w	r3, sl, #3
 800ad3a:	f000 bd49 	b.w	800b7d0 <_dtoa_r+0xb30>
 800ad3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	ec51 0b17 	vmov	r0, r1, d7
 800ad48:	2300      	movs	r3, #0
 800ad4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad4e:	f7f5 fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad52:	4680      	mov	r8, r0
 800ad54:	b158      	cbz	r0, 800ad6e <_dtoa_r+0xce>
 800ad56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad58:	2301      	movs	r3, #1
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad5e:	b113      	cbz	r3, 800ad66 <_dtoa_r+0xc6>
 800ad60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad62:	4b84      	ldr	r3, [pc, #528]	@ (800af74 <_dtoa_r+0x2d4>)
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af88 <_dtoa_r+0x2e8>
 800ad6a:	f000 bd33 	b.w	800b7d4 <_dtoa_r+0xb34>
 800ad6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad72:	aa16      	add	r2, sp, #88	@ 0x58
 800ad74:	a917      	add	r1, sp, #92	@ 0x5c
 800ad76:	4658      	mov	r0, fp
 800ad78:	f001 f980 	bl	800c07c <__d2b>
 800ad7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad80:	4681      	mov	r9, r0
 800ad82:	2e00      	cmp	r6, #0
 800ad84:	d077      	beq.n	800ae76 <_dtoa_r+0x1d6>
 800ad86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ada0:	4619      	mov	r1, r3
 800ada2:	2200      	movs	r2, #0
 800ada4:	4b74      	ldr	r3, [pc, #464]	@ (800af78 <_dtoa_r+0x2d8>)
 800ada6:	f7f5 fa77 	bl	8000298 <__aeabi_dsub>
 800adaa:	a369      	add	r3, pc, #420	@ (adr r3, 800af50 <_dtoa_r+0x2b0>)
 800adac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb0:	f7f5 fc2a 	bl	8000608 <__aeabi_dmul>
 800adb4:	a368      	add	r3, pc, #416	@ (adr r3, 800af58 <_dtoa_r+0x2b8>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	f7f5 fa6f 	bl	800029c <__adddf3>
 800adbe:	4604      	mov	r4, r0
 800adc0:	4630      	mov	r0, r6
 800adc2:	460d      	mov	r5, r1
 800adc4:	f7f5 fbb6 	bl	8000534 <__aeabi_i2d>
 800adc8:	a365      	add	r3, pc, #404	@ (adr r3, 800af60 <_dtoa_r+0x2c0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fc1b 	bl	8000608 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fa5f 	bl	800029c <__adddf3>
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	f7f5 fec1 	bl	8000b68 <__aeabi_d2iz>
 800ade6:	2200      	movs	r2, #0
 800ade8:	4607      	mov	r7, r0
 800adea:	2300      	movs	r3, #0
 800adec:	4620      	mov	r0, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	f7f5 fe7c 	bl	8000aec <__aeabi_dcmplt>
 800adf4:	b140      	cbz	r0, 800ae08 <_dtoa_r+0x168>
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7f5 fb9c 	bl	8000534 <__aeabi_i2d>
 800adfc:	4622      	mov	r2, r4
 800adfe:	462b      	mov	r3, r5
 800ae00:	f7f5 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae04:	b900      	cbnz	r0, 800ae08 <_dtoa_r+0x168>
 800ae06:	3f01      	subs	r7, #1
 800ae08:	2f16      	cmp	r7, #22
 800ae0a:	d851      	bhi.n	800aeb0 <_dtoa_r+0x210>
 800ae0c:	4b5b      	ldr	r3, [pc, #364]	@ (800af7c <_dtoa_r+0x2dc>)
 800ae0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae1a:	f7f5 fe67 	bl	8000aec <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d048      	beq.n	800aeb4 <_dtoa_r+0x214>
 800ae22:	3f01      	subs	r7, #1
 800ae24:	2300      	movs	r3, #0
 800ae26:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae2a:	1b9b      	subs	r3, r3, r6
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	bf44      	itt	mi
 800ae30:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae34:	2300      	movmi	r3, #0
 800ae36:	9208      	str	r2, [sp, #32]
 800ae38:	bf54      	ite	pl
 800ae3a:	f04f 0800 	movpl.w	r8, #0
 800ae3e:	9308      	strmi	r3, [sp, #32]
 800ae40:	2f00      	cmp	r7, #0
 800ae42:	db39      	blt.n	800aeb8 <_dtoa_r+0x218>
 800ae44:	9b08      	ldr	r3, [sp, #32]
 800ae46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae48:	443b      	add	r3, r7
 800ae4a:	9308      	str	r3, [sp, #32]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae52:	2b09      	cmp	r3, #9
 800ae54:	d864      	bhi.n	800af20 <_dtoa_r+0x280>
 800ae56:	2b05      	cmp	r3, #5
 800ae58:	bfc4      	itt	gt
 800ae5a:	3b04      	subgt	r3, #4
 800ae5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae60:	f1a3 0302 	sub.w	r3, r3, #2
 800ae64:	bfcc      	ite	gt
 800ae66:	2400      	movgt	r4, #0
 800ae68:	2401      	movle	r4, #1
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d863      	bhi.n	800af36 <_dtoa_r+0x296>
 800ae6e:	e8df f003 	tbb	[pc, r3]
 800ae72:	372a      	.short	0x372a
 800ae74:	5535      	.short	0x5535
 800ae76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae7a:	441e      	add	r6, r3
 800ae7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae80:	2b20      	cmp	r3, #32
 800ae82:	bfc1      	itttt	gt
 800ae84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae88:	409f      	lslgt	r7, r3
 800ae8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae92:	bfd6      	itet	le
 800ae94:	f1c3 0320 	rsble	r3, r3, #32
 800ae98:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae9c:	fa04 f003 	lslle.w	r0, r4, r3
 800aea0:	f7f5 fb38 	bl	8000514 <__aeabi_ui2d>
 800aea4:	2201      	movs	r2, #1
 800aea6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aeaa:	3e01      	subs	r6, #1
 800aeac:	9214      	str	r2, [sp, #80]	@ 0x50
 800aeae:	e777      	b.n	800ada0 <_dtoa_r+0x100>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e7b8      	b.n	800ae26 <_dtoa_r+0x186>
 800aeb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aeb6:	e7b7      	b.n	800ae28 <_dtoa_r+0x188>
 800aeb8:	427b      	negs	r3, r7
 800aeba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aebc:	2300      	movs	r3, #0
 800aebe:	eba8 0807 	sub.w	r8, r8, r7
 800aec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aec4:	e7c4      	b.n	800ae50 <_dtoa_r+0x1b0>
 800aec6:	2300      	movs	r3, #0
 800aec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc35      	bgt.n	800af3c <_dtoa_r+0x29c>
 800aed0:	2301      	movs	r3, #1
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	9307      	str	r3, [sp, #28]
 800aed6:	461a      	mov	r2, r3
 800aed8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeda:	e00b      	b.n	800aef4 <_dtoa_r+0x254>
 800aedc:	2301      	movs	r3, #1
 800aede:	e7f3      	b.n	800aec8 <_dtoa_r+0x228>
 800aee0:	2300      	movs	r3, #0
 800aee2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aee6:	18fb      	adds	r3, r7, r3
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	3301      	adds	r3, #1
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	9307      	str	r3, [sp, #28]
 800aef0:	bfb8      	it	lt
 800aef2:	2301      	movlt	r3, #1
 800aef4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aef8:	2100      	movs	r1, #0
 800aefa:	2204      	movs	r2, #4
 800aefc:	f102 0514 	add.w	r5, r2, #20
 800af00:	429d      	cmp	r5, r3
 800af02:	d91f      	bls.n	800af44 <_dtoa_r+0x2a4>
 800af04:	6041      	str	r1, [r0, #4]
 800af06:	4658      	mov	r0, fp
 800af08:	f000 fd8e 	bl	800ba28 <_Balloc>
 800af0c:	4682      	mov	sl, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d13c      	bne.n	800af8c <_dtoa_r+0x2ec>
 800af12:	4b1b      	ldr	r3, [pc, #108]	@ (800af80 <_dtoa_r+0x2e0>)
 800af14:	4602      	mov	r2, r0
 800af16:	f240 11af 	movw	r1, #431	@ 0x1af
 800af1a:	e6d8      	b.n	800acce <_dtoa_r+0x2e>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e7e0      	b.n	800aee2 <_dtoa_r+0x242>
 800af20:	2401      	movs	r4, #1
 800af22:	2300      	movs	r3, #0
 800af24:	9309      	str	r3, [sp, #36]	@ 0x24
 800af26:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af28:	f04f 33ff 	mov.w	r3, #4294967295
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	9307      	str	r3, [sp, #28]
 800af30:	2200      	movs	r2, #0
 800af32:	2312      	movs	r3, #18
 800af34:	e7d0      	b.n	800aed8 <_dtoa_r+0x238>
 800af36:	2301      	movs	r3, #1
 800af38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af3a:	e7f5      	b.n	800af28 <_dtoa_r+0x288>
 800af3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	9307      	str	r3, [sp, #28]
 800af42:	e7d7      	b.n	800aef4 <_dtoa_r+0x254>
 800af44:	3101      	adds	r1, #1
 800af46:	0052      	lsls	r2, r2, #1
 800af48:	e7d8      	b.n	800aefc <_dtoa_r+0x25c>
 800af4a:	bf00      	nop
 800af4c:	f3af 8000 	nop.w
 800af50:	636f4361 	.word	0x636f4361
 800af54:	3fd287a7 	.word	0x3fd287a7
 800af58:	8b60c8b3 	.word	0x8b60c8b3
 800af5c:	3fc68a28 	.word	0x3fc68a28
 800af60:	509f79fb 	.word	0x509f79fb
 800af64:	3fd34413 	.word	0x3fd34413
 800af68:	0800f259 	.word	0x0800f259
 800af6c:	0800f270 	.word	0x0800f270
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	0800f229 	.word	0x0800f229
 800af78:	3ff80000 	.word	0x3ff80000
 800af7c:	0800f368 	.word	0x0800f368
 800af80:	0800f2c8 	.word	0x0800f2c8
 800af84:	0800f255 	.word	0x0800f255
 800af88:	0800f228 	.word	0x0800f228
 800af8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af90:	6018      	str	r0, [r3, #0]
 800af92:	9b07      	ldr	r3, [sp, #28]
 800af94:	2b0e      	cmp	r3, #14
 800af96:	f200 80a4 	bhi.w	800b0e2 <_dtoa_r+0x442>
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	f000 80a1 	beq.w	800b0e2 <_dtoa_r+0x442>
 800afa0:	2f00      	cmp	r7, #0
 800afa2:	dd33      	ble.n	800b00c <_dtoa_r+0x36c>
 800afa4:	4bad      	ldr	r3, [pc, #692]	@ (800b25c <_dtoa_r+0x5bc>)
 800afa6:	f007 020f 	and.w	r2, r7, #15
 800afaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afae:	ed93 7b00 	vldr	d7, [r3]
 800afb2:	05f8      	lsls	r0, r7, #23
 800afb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800afb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800afbc:	d516      	bpl.n	800afec <_dtoa_r+0x34c>
 800afbe:	4ba8      	ldr	r3, [pc, #672]	@ (800b260 <_dtoa_r+0x5c0>)
 800afc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afc8:	f7f5 fc48 	bl	800085c <__aeabi_ddiv>
 800afcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd0:	f004 040f 	and.w	r4, r4, #15
 800afd4:	2603      	movs	r6, #3
 800afd6:	4da2      	ldr	r5, [pc, #648]	@ (800b260 <_dtoa_r+0x5c0>)
 800afd8:	b954      	cbnz	r4, 800aff0 <_dtoa_r+0x350>
 800afda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe2:	f7f5 fc3b 	bl	800085c <__aeabi_ddiv>
 800afe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afea:	e028      	b.n	800b03e <_dtoa_r+0x39e>
 800afec:	2602      	movs	r6, #2
 800afee:	e7f2      	b.n	800afd6 <_dtoa_r+0x336>
 800aff0:	07e1      	lsls	r1, r4, #31
 800aff2:	d508      	bpl.n	800b006 <_dtoa_r+0x366>
 800aff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800affc:	f7f5 fb04 	bl	8000608 <__aeabi_dmul>
 800b000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b004:	3601      	adds	r6, #1
 800b006:	1064      	asrs	r4, r4, #1
 800b008:	3508      	adds	r5, #8
 800b00a:	e7e5      	b.n	800afd8 <_dtoa_r+0x338>
 800b00c:	f000 80d2 	beq.w	800b1b4 <_dtoa_r+0x514>
 800b010:	427c      	negs	r4, r7
 800b012:	4b92      	ldr	r3, [pc, #584]	@ (800b25c <_dtoa_r+0x5bc>)
 800b014:	4d92      	ldr	r5, [pc, #584]	@ (800b260 <_dtoa_r+0x5c0>)
 800b016:	f004 020f 	and.w	r2, r4, #15
 800b01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b026:	f7f5 faef 	bl	8000608 <__aeabi_dmul>
 800b02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b02e:	1124      	asrs	r4, r4, #4
 800b030:	2300      	movs	r3, #0
 800b032:	2602      	movs	r6, #2
 800b034:	2c00      	cmp	r4, #0
 800b036:	f040 80b2 	bne.w	800b19e <_dtoa_r+0x4fe>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1d3      	bne.n	800afe6 <_dtoa_r+0x346>
 800b03e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b040:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 80b7 	beq.w	800b1b8 <_dtoa_r+0x518>
 800b04a:	4b86      	ldr	r3, [pc, #536]	@ (800b264 <_dtoa_r+0x5c4>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4620      	mov	r0, r4
 800b050:	4629      	mov	r1, r5
 800b052:	f7f5 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	f000 80ae 	beq.w	800b1b8 <_dtoa_r+0x518>
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 80aa 	beq.w	800b1b8 <_dtoa_r+0x518>
 800b064:	9b00      	ldr	r3, [sp, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd37      	ble.n	800b0da <_dtoa_r+0x43a>
 800b06a:	1e7b      	subs	r3, r7, #1
 800b06c:	9304      	str	r3, [sp, #16]
 800b06e:	4620      	mov	r0, r4
 800b070:	4b7d      	ldr	r3, [pc, #500]	@ (800b268 <_dtoa_r+0x5c8>)
 800b072:	2200      	movs	r2, #0
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 fac7 	bl	8000608 <__aeabi_dmul>
 800b07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b07e:	9c00      	ldr	r4, [sp, #0]
 800b080:	3601      	adds	r6, #1
 800b082:	4630      	mov	r0, r6
 800b084:	f7f5 fa56 	bl	8000534 <__aeabi_i2d>
 800b088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b08c:	f7f5 fabc 	bl	8000608 <__aeabi_dmul>
 800b090:	4b76      	ldr	r3, [pc, #472]	@ (800b26c <_dtoa_r+0x5cc>)
 800b092:	2200      	movs	r2, #0
 800b094:	f7f5 f902 	bl	800029c <__adddf3>
 800b098:	4605      	mov	r5, r0
 800b09a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b09e:	2c00      	cmp	r4, #0
 800b0a0:	f040 808d 	bne.w	800b1be <_dtoa_r+0x51e>
 800b0a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a8:	4b71      	ldr	r3, [pc, #452]	@ (800b270 <_dtoa_r+0x5d0>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f7f5 f8f4 	bl	8000298 <__aeabi_dsub>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4633      	mov	r3, r6
 800b0bc:	f7f5 fd34 	bl	8000b28 <__aeabi_dcmpgt>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f040 828b 	bne.w	800b5dc <_dtoa_r+0x93c>
 800b0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ca:	462a      	mov	r2, r5
 800b0cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0d0:	f7f5 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f040 8128 	bne.w	800b32a <_dtoa_r+0x68a>
 800b0da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f2c0 815a 	blt.w	800b39e <_dtoa_r+0x6fe>
 800b0ea:	2f0e      	cmp	r7, #14
 800b0ec:	f300 8157 	bgt.w	800b39e <_dtoa_r+0x6fe>
 800b0f0:	4b5a      	ldr	r3, [pc, #360]	@ (800b25c <_dtoa_r+0x5bc>)
 800b0f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0f6:	ed93 7b00 	vldr	d7, [r3]
 800b0fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	ed8d 7b00 	vstr	d7, [sp]
 800b102:	da03      	bge.n	800b10c <_dtoa_r+0x46c>
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f340 8101 	ble.w	800b30e <_dtoa_r+0x66e>
 800b10c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b110:	4656      	mov	r6, sl
 800b112:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b116:	4620      	mov	r0, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	f7f5 fb9f 	bl	800085c <__aeabi_ddiv>
 800b11e:	f7f5 fd23 	bl	8000b68 <__aeabi_d2iz>
 800b122:	4680      	mov	r8, r0
 800b124:	f7f5 fa06 	bl	8000534 <__aeabi_i2d>
 800b128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b12c:	f7f5 fa6c 	bl	8000608 <__aeabi_dmul>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4620      	mov	r0, r4
 800b136:	4629      	mov	r1, r5
 800b138:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b13c:	f7f5 f8ac 	bl	8000298 <__aeabi_dsub>
 800b140:	f806 4b01 	strb.w	r4, [r6], #1
 800b144:	9d07      	ldr	r5, [sp, #28]
 800b146:	eba6 040a 	sub.w	r4, r6, sl
 800b14a:	42a5      	cmp	r5, r4
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	f040 8117 	bne.w	800b382 <_dtoa_r+0x6e2>
 800b154:	f7f5 f8a2 	bl	800029c <__adddf3>
 800b158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b15c:	4604      	mov	r4, r0
 800b15e:	460d      	mov	r5, r1
 800b160:	f7f5 fce2 	bl	8000b28 <__aeabi_dcmpgt>
 800b164:	2800      	cmp	r0, #0
 800b166:	f040 80f9 	bne.w	800b35c <_dtoa_r+0x6bc>
 800b16a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b16e:	4620      	mov	r0, r4
 800b170:	4629      	mov	r1, r5
 800b172:	f7f5 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b176:	b118      	cbz	r0, 800b180 <_dtoa_r+0x4e0>
 800b178:	f018 0f01 	tst.w	r8, #1
 800b17c:	f040 80ee 	bne.w	800b35c <_dtoa_r+0x6bc>
 800b180:	4649      	mov	r1, r9
 800b182:	4658      	mov	r0, fp
 800b184:	f000 fc90 	bl	800baa8 <_Bfree>
 800b188:	2300      	movs	r3, #0
 800b18a:	7033      	strb	r3, [r6, #0]
 800b18c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b18e:	3701      	adds	r7, #1
 800b190:	601f      	str	r7, [r3, #0]
 800b192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 831d 	beq.w	800b7d4 <_dtoa_r+0xb34>
 800b19a:	601e      	str	r6, [r3, #0]
 800b19c:	e31a      	b.n	800b7d4 <_dtoa_r+0xb34>
 800b19e:	07e2      	lsls	r2, r4, #31
 800b1a0:	d505      	bpl.n	800b1ae <_dtoa_r+0x50e>
 800b1a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1a6:	f7f5 fa2f 	bl	8000608 <__aeabi_dmul>
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	1064      	asrs	r4, r4, #1
 800b1b0:	3508      	adds	r5, #8
 800b1b2:	e73f      	b.n	800b034 <_dtoa_r+0x394>
 800b1b4:	2602      	movs	r6, #2
 800b1b6:	e742      	b.n	800b03e <_dtoa_r+0x39e>
 800b1b8:	9c07      	ldr	r4, [sp, #28]
 800b1ba:	9704      	str	r7, [sp, #16]
 800b1bc:	e761      	b.n	800b082 <_dtoa_r+0x3e2>
 800b1be:	4b27      	ldr	r3, [pc, #156]	@ (800b25c <_dtoa_r+0x5bc>)
 800b1c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ca:	4454      	add	r4, sl
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d053      	beq.n	800b278 <_dtoa_r+0x5d8>
 800b1d0:	4928      	ldr	r1, [pc, #160]	@ (800b274 <_dtoa_r+0x5d4>)
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	f7f5 fb42 	bl	800085c <__aeabi_ddiv>
 800b1d8:	4633      	mov	r3, r6
 800b1da:	462a      	mov	r2, r5
 800b1dc:	f7f5 f85c 	bl	8000298 <__aeabi_dsub>
 800b1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1e4:	4656      	mov	r6, sl
 800b1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ea:	f7f5 fcbd 	bl	8000b68 <__aeabi_d2iz>
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	f7f5 f9a0 	bl	8000534 <__aeabi_i2d>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1fc:	f7f5 f84c 	bl	8000298 <__aeabi_dsub>
 800b200:	3530      	adds	r5, #48	@ 0x30
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b20a:	f806 5b01 	strb.w	r5, [r6], #1
 800b20e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b212:	f7f5 fc6b 	bl	8000aec <__aeabi_dcmplt>
 800b216:	2800      	cmp	r0, #0
 800b218:	d171      	bne.n	800b2fe <_dtoa_r+0x65e>
 800b21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b21e:	4911      	ldr	r1, [pc, #68]	@ (800b264 <_dtoa_r+0x5c4>)
 800b220:	2000      	movs	r0, #0
 800b222:	f7f5 f839 	bl	8000298 <__aeabi_dsub>
 800b226:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b22a:	f7f5 fc5f 	bl	8000aec <__aeabi_dcmplt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f040 8095 	bne.w	800b35e <_dtoa_r+0x6be>
 800b234:	42a6      	cmp	r6, r4
 800b236:	f43f af50 	beq.w	800b0da <_dtoa_r+0x43a>
 800b23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b23e:	4b0a      	ldr	r3, [pc, #40]	@ (800b268 <_dtoa_r+0x5c8>)
 800b240:	2200      	movs	r2, #0
 800b242:	f7f5 f9e1 	bl	8000608 <__aeabi_dmul>
 800b246:	4b08      	ldr	r3, [pc, #32]	@ (800b268 <_dtoa_r+0x5c8>)
 800b248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b24c:	2200      	movs	r2, #0
 800b24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b252:	f7f5 f9d9 	bl	8000608 <__aeabi_dmul>
 800b256:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b25a:	e7c4      	b.n	800b1e6 <_dtoa_r+0x546>
 800b25c:	0800f368 	.word	0x0800f368
 800b260:	0800f340 	.word	0x0800f340
 800b264:	3ff00000 	.word	0x3ff00000
 800b268:	40240000 	.word	0x40240000
 800b26c:	401c0000 	.word	0x401c0000
 800b270:	40140000 	.word	0x40140000
 800b274:	3fe00000 	.word	0x3fe00000
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	f7f5 f9c4 	bl	8000608 <__aeabi_dmul>
 800b280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b284:	9415      	str	r4, [sp, #84]	@ 0x54
 800b286:	4656      	mov	r6, sl
 800b288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b28c:	f7f5 fc6c 	bl	8000b68 <__aeabi_d2iz>
 800b290:	4605      	mov	r5, r0
 800b292:	f7f5 f94f 	bl	8000534 <__aeabi_i2d>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29e:	f7f4 fffb 	bl	8000298 <__aeabi_dsub>
 800b2a2:	3530      	adds	r5, #48	@ 0x30
 800b2a4:	f806 5b01 	strb.w	r5, [r6], #1
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	42a6      	cmp	r6, r4
 800b2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2b2:	f04f 0200 	mov.w	r2, #0
 800b2b6:	d124      	bne.n	800b302 <_dtoa_r+0x662>
 800b2b8:	4bac      	ldr	r3, [pc, #688]	@ (800b56c <_dtoa_r+0x8cc>)
 800b2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2be:	f7f4 ffed 	bl	800029c <__adddf3>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ca:	f7f5 fc2d 	bl	8000b28 <__aeabi_dcmpgt>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d145      	bne.n	800b35e <_dtoa_r+0x6be>
 800b2d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2d6:	49a5      	ldr	r1, [pc, #660]	@ (800b56c <_dtoa_r+0x8cc>)
 800b2d8:	2000      	movs	r0, #0
 800b2da:	f7f4 ffdd 	bl	8000298 <__aeabi_dsub>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2e6:	f7f5 fc01 	bl	8000aec <__aeabi_dcmplt>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f43f aef5 	beq.w	800b0da <_dtoa_r+0x43a>
 800b2f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2f2:	1e73      	subs	r3, r6, #1
 800b2f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2fa:	2b30      	cmp	r3, #48	@ 0x30
 800b2fc:	d0f8      	beq.n	800b2f0 <_dtoa_r+0x650>
 800b2fe:	9f04      	ldr	r7, [sp, #16]
 800b300:	e73e      	b.n	800b180 <_dtoa_r+0x4e0>
 800b302:	4b9b      	ldr	r3, [pc, #620]	@ (800b570 <_dtoa_r+0x8d0>)
 800b304:	f7f5 f980 	bl	8000608 <__aeabi_dmul>
 800b308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30c:	e7bc      	b.n	800b288 <_dtoa_r+0x5e8>
 800b30e:	d10c      	bne.n	800b32a <_dtoa_r+0x68a>
 800b310:	4b98      	ldr	r3, [pc, #608]	@ (800b574 <_dtoa_r+0x8d4>)
 800b312:	2200      	movs	r2, #0
 800b314:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b318:	f7f5 f976 	bl	8000608 <__aeabi_dmul>
 800b31c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b320:	f7f5 fbf8 	bl	8000b14 <__aeabi_dcmpge>
 800b324:	2800      	cmp	r0, #0
 800b326:	f000 8157 	beq.w	800b5d8 <_dtoa_r+0x938>
 800b32a:	2400      	movs	r4, #0
 800b32c:	4625      	mov	r5, r4
 800b32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b330:	43db      	mvns	r3, r3
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	4656      	mov	r6, sl
 800b336:	2700      	movs	r7, #0
 800b338:	4621      	mov	r1, r4
 800b33a:	4658      	mov	r0, fp
 800b33c:	f000 fbb4 	bl	800baa8 <_Bfree>
 800b340:	2d00      	cmp	r5, #0
 800b342:	d0dc      	beq.n	800b2fe <_dtoa_r+0x65e>
 800b344:	b12f      	cbz	r7, 800b352 <_dtoa_r+0x6b2>
 800b346:	42af      	cmp	r7, r5
 800b348:	d003      	beq.n	800b352 <_dtoa_r+0x6b2>
 800b34a:	4639      	mov	r1, r7
 800b34c:	4658      	mov	r0, fp
 800b34e:	f000 fbab 	bl	800baa8 <_Bfree>
 800b352:	4629      	mov	r1, r5
 800b354:	4658      	mov	r0, fp
 800b356:	f000 fba7 	bl	800baa8 <_Bfree>
 800b35a:	e7d0      	b.n	800b2fe <_dtoa_r+0x65e>
 800b35c:	9704      	str	r7, [sp, #16]
 800b35e:	4633      	mov	r3, r6
 800b360:	461e      	mov	r6, r3
 800b362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b366:	2a39      	cmp	r2, #57	@ 0x39
 800b368:	d107      	bne.n	800b37a <_dtoa_r+0x6da>
 800b36a:	459a      	cmp	sl, r3
 800b36c:	d1f8      	bne.n	800b360 <_dtoa_r+0x6c0>
 800b36e:	9a04      	ldr	r2, [sp, #16]
 800b370:	3201      	adds	r2, #1
 800b372:	9204      	str	r2, [sp, #16]
 800b374:	2230      	movs	r2, #48	@ 0x30
 800b376:	f88a 2000 	strb.w	r2, [sl]
 800b37a:	781a      	ldrb	r2, [r3, #0]
 800b37c:	3201      	adds	r2, #1
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	e7bd      	b.n	800b2fe <_dtoa_r+0x65e>
 800b382:	4b7b      	ldr	r3, [pc, #492]	@ (800b570 <_dtoa_r+0x8d0>)
 800b384:	2200      	movs	r2, #0
 800b386:	f7f5 f93f 	bl	8000608 <__aeabi_dmul>
 800b38a:	2200      	movs	r2, #0
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	460d      	mov	r5, r1
 800b392:	f7f5 fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b396:	2800      	cmp	r0, #0
 800b398:	f43f aebb 	beq.w	800b112 <_dtoa_r+0x472>
 800b39c:	e6f0      	b.n	800b180 <_dtoa_r+0x4e0>
 800b39e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	f000 80db 	beq.w	800b55c <_dtoa_r+0x8bc>
 800b3a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a8:	2a01      	cmp	r2, #1
 800b3aa:	f300 80bf 	bgt.w	800b52c <_dtoa_r+0x88c>
 800b3ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	f000 80b7 	beq.w	800b524 <_dtoa_r+0x884>
 800b3b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3bc:	4646      	mov	r6, r8
 800b3be:	9a08      	ldr	r2, [sp, #32]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	441a      	add	r2, r3
 800b3c4:	4658      	mov	r0, fp
 800b3c6:	4498      	add	r8, r3
 800b3c8:	9208      	str	r2, [sp, #32]
 800b3ca:	f000 fc21 	bl	800bc10 <__i2b>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b15e      	cbz	r6, 800b3ea <_dtoa_r+0x74a>
 800b3d2:	9b08      	ldr	r3, [sp, #32]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd08      	ble.n	800b3ea <_dtoa_r+0x74a>
 800b3d8:	42b3      	cmp	r3, r6
 800b3da:	9a08      	ldr	r2, [sp, #32]
 800b3dc:	bfa8      	it	ge
 800b3de:	4633      	movge	r3, r6
 800b3e0:	eba8 0803 	sub.w	r8, r8, r3
 800b3e4:	1af6      	subs	r6, r6, r3
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	9308      	str	r3, [sp, #32]
 800b3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ec:	b1f3      	cbz	r3, 800b42c <_dtoa_r+0x78c>
 800b3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 80b7 	beq.w	800b564 <_dtoa_r+0x8c4>
 800b3f6:	b18c      	cbz	r4, 800b41c <_dtoa_r+0x77c>
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	4658      	mov	r0, fp
 800b3fe:	f000 fcc7 	bl	800bd90 <__pow5mult>
 800b402:	464a      	mov	r2, r9
 800b404:	4601      	mov	r1, r0
 800b406:	4605      	mov	r5, r0
 800b408:	4658      	mov	r0, fp
 800b40a:	f000 fc17 	bl	800bc3c <__multiply>
 800b40e:	4649      	mov	r1, r9
 800b410:	9004      	str	r0, [sp, #16]
 800b412:	4658      	mov	r0, fp
 800b414:	f000 fb48 	bl	800baa8 <_Bfree>
 800b418:	9b04      	ldr	r3, [sp, #16]
 800b41a:	4699      	mov	r9, r3
 800b41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b41e:	1b1a      	subs	r2, r3, r4
 800b420:	d004      	beq.n	800b42c <_dtoa_r+0x78c>
 800b422:	4649      	mov	r1, r9
 800b424:	4658      	mov	r0, fp
 800b426:	f000 fcb3 	bl	800bd90 <__pow5mult>
 800b42a:	4681      	mov	r9, r0
 800b42c:	2101      	movs	r1, #1
 800b42e:	4658      	mov	r0, fp
 800b430:	f000 fbee 	bl	800bc10 <__i2b>
 800b434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b436:	4604      	mov	r4, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 81cf 	beq.w	800b7dc <_dtoa_r+0xb3c>
 800b43e:	461a      	mov	r2, r3
 800b440:	4601      	mov	r1, r0
 800b442:	4658      	mov	r0, fp
 800b444:	f000 fca4 	bl	800bd90 <__pow5mult>
 800b448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	4604      	mov	r4, r0
 800b44e:	f300 8095 	bgt.w	800b57c <_dtoa_r+0x8dc>
 800b452:	9b02      	ldr	r3, [sp, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f040 8087 	bne.w	800b568 <_dtoa_r+0x8c8>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b460:	2b00      	cmp	r3, #0
 800b462:	f040 8089 	bne.w	800b578 <_dtoa_r+0x8d8>
 800b466:	9b03      	ldr	r3, [sp, #12]
 800b468:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b46c:	0d1b      	lsrs	r3, r3, #20
 800b46e:	051b      	lsls	r3, r3, #20
 800b470:	b12b      	cbz	r3, 800b47e <_dtoa_r+0x7de>
 800b472:	9b08      	ldr	r3, [sp, #32]
 800b474:	3301      	adds	r3, #1
 800b476:	9308      	str	r3, [sp, #32]
 800b478:	f108 0801 	add.w	r8, r8, #1
 800b47c:	2301      	movs	r3, #1
 800b47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 81b0 	beq.w	800b7e8 <_dtoa_r+0xb48>
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b48e:	6918      	ldr	r0, [r3, #16]
 800b490:	f000 fb72 	bl	800bb78 <__hi0bits>
 800b494:	f1c0 0020 	rsb	r0, r0, #32
 800b498:	9b08      	ldr	r3, [sp, #32]
 800b49a:	4418      	add	r0, r3
 800b49c:	f010 001f 	ands.w	r0, r0, #31
 800b4a0:	d077      	beq.n	800b592 <_dtoa_r+0x8f2>
 800b4a2:	f1c0 0320 	rsb	r3, r0, #32
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	dd6b      	ble.n	800b582 <_dtoa_r+0x8e2>
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	f1c0 001c 	rsb	r0, r0, #28
 800b4b0:	4403      	add	r3, r0
 800b4b2:	4480      	add	r8, r0
 800b4b4:	4406      	add	r6, r0
 800b4b6:	9308      	str	r3, [sp, #32]
 800b4b8:	f1b8 0f00 	cmp.w	r8, #0
 800b4bc:	dd05      	ble.n	800b4ca <_dtoa_r+0x82a>
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4642      	mov	r2, r8
 800b4c2:	4658      	mov	r0, fp
 800b4c4:	f000 fcbe 	bl	800be44 <__lshift>
 800b4c8:	4681      	mov	r9, r0
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dd05      	ble.n	800b4dc <_dtoa_r+0x83c>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	4658      	mov	r0, fp
 800b4d6:	f000 fcb5 	bl	800be44 <__lshift>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d059      	beq.n	800b596 <_dtoa_r+0x8f6>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	f000 fd19 	bl	800bf1c <__mcmp>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	da53      	bge.n	800b596 <_dtoa_r+0x8f6>
 800b4ee:	1e7b      	subs	r3, r7, #1
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	220a      	movs	r2, #10
 800b4f8:	4658      	mov	r0, fp
 800b4fa:	f000 faf7 	bl	800baec <__multadd>
 800b4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b500:	4681      	mov	r9, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 8172 	beq.w	800b7ec <_dtoa_r+0xb4c>
 800b508:	2300      	movs	r3, #0
 800b50a:	4629      	mov	r1, r5
 800b50c:	220a      	movs	r2, #10
 800b50e:	4658      	mov	r0, fp
 800b510:	f000 faec 	bl	800baec <__multadd>
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	4605      	mov	r5, r0
 800b51a:	dc67      	bgt.n	800b5ec <_dtoa_r+0x94c>
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	2b02      	cmp	r3, #2
 800b520:	dc41      	bgt.n	800b5a6 <_dtoa_r+0x906>
 800b522:	e063      	b.n	800b5ec <_dtoa_r+0x94c>
 800b524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b52a:	e746      	b.n	800b3ba <_dtoa_r+0x71a>
 800b52c:	9b07      	ldr	r3, [sp, #28]
 800b52e:	1e5c      	subs	r4, r3, #1
 800b530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b532:	42a3      	cmp	r3, r4
 800b534:	bfbf      	itttt	lt
 800b536:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b538:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b53a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b53c:	1ae3      	sublt	r3, r4, r3
 800b53e:	bfb4      	ite	lt
 800b540:	18d2      	addlt	r2, r2, r3
 800b542:	1b1c      	subge	r4, r3, r4
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	bfbc      	itt	lt
 800b548:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b54a:	2400      	movlt	r4, #0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfb5      	itete	lt
 800b550:	eba8 0603 	sublt.w	r6, r8, r3
 800b554:	9b07      	ldrge	r3, [sp, #28]
 800b556:	2300      	movlt	r3, #0
 800b558:	4646      	movge	r6, r8
 800b55a:	e730      	b.n	800b3be <_dtoa_r+0x71e>
 800b55c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b55e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b560:	4646      	mov	r6, r8
 800b562:	e735      	b.n	800b3d0 <_dtoa_r+0x730>
 800b564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b566:	e75c      	b.n	800b422 <_dtoa_r+0x782>
 800b568:	2300      	movs	r3, #0
 800b56a:	e788      	b.n	800b47e <_dtoa_r+0x7de>
 800b56c:	3fe00000 	.word	0x3fe00000
 800b570:	40240000 	.word	0x40240000
 800b574:	40140000 	.word	0x40140000
 800b578:	9b02      	ldr	r3, [sp, #8]
 800b57a:	e780      	b.n	800b47e <_dtoa_r+0x7de>
 800b57c:	2300      	movs	r3, #0
 800b57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b580:	e782      	b.n	800b488 <_dtoa_r+0x7e8>
 800b582:	d099      	beq.n	800b4b8 <_dtoa_r+0x818>
 800b584:	9a08      	ldr	r2, [sp, #32]
 800b586:	331c      	adds	r3, #28
 800b588:	441a      	add	r2, r3
 800b58a:	4498      	add	r8, r3
 800b58c:	441e      	add	r6, r3
 800b58e:	9208      	str	r2, [sp, #32]
 800b590:	e792      	b.n	800b4b8 <_dtoa_r+0x818>
 800b592:	4603      	mov	r3, r0
 800b594:	e7f6      	b.n	800b584 <_dtoa_r+0x8e4>
 800b596:	9b07      	ldr	r3, [sp, #28]
 800b598:	9704      	str	r7, [sp, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dc20      	bgt.n	800b5e0 <_dtoa_r+0x940>
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	dd1e      	ble.n	800b5e4 <_dtoa_r+0x944>
 800b5a6:	9b00      	ldr	r3, [sp, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f47f aec0 	bne.w	800b32e <_dtoa_r+0x68e>
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	4658      	mov	r0, fp
 800b5b4:	f000 fa9a 	bl	800baec <__multadd>
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	4648      	mov	r0, r9
 800b5be:	f000 fcad 	bl	800bf1c <__mcmp>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	f77f aeb3 	ble.w	800b32e <_dtoa_r+0x68e>
 800b5c8:	4656      	mov	r6, sl
 800b5ca:	2331      	movs	r3, #49	@ 0x31
 800b5cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	e6ae      	b.n	800b336 <_dtoa_r+0x696>
 800b5d8:	9c07      	ldr	r4, [sp, #28]
 800b5da:	9704      	str	r7, [sp, #16]
 800b5dc:	4625      	mov	r5, r4
 800b5de:	e7f3      	b.n	800b5c8 <_dtoa_r+0x928>
 800b5e0:	9b07      	ldr	r3, [sp, #28]
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 8104 	beq.w	800b7f4 <_dtoa_r+0xb54>
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	dd05      	ble.n	800b5fc <_dtoa_r+0x95c>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4632      	mov	r2, r6
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	f000 fc25 	bl	800be44 <__lshift>
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d05a      	beq.n	800b6b8 <_dtoa_r+0xa18>
 800b602:	6869      	ldr	r1, [r5, #4]
 800b604:	4658      	mov	r0, fp
 800b606:	f000 fa0f 	bl	800ba28 <_Balloc>
 800b60a:	4606      	mov	r6, r0
 800b60c:	b928      	cbnz	r0, 800b61a <_dtoa_r+0x97a>
 800b60e:	4b84      	ldr	r3, [pc, #528]	@ (800b820 <_dtoa_r+0xb80>)
 800b610:	4602      	mov	r2, r0
 800b612:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b616:	f7ff bb5a 	b.w	800acce <_dtoa_r+0x2e>
 800b61a:	692a      	ldr	r2, [r5, #16]
 800b61c:	3202      	adds	r2, #2
 800b61e:	0092      	lsls	r2, r2, #2
 800b620:	f105 010c 	add.w	r1, r5, #12
 800b624:	300c      	adds	r0, #12
 800b626:	f7ff faa2 	bl	800ab6e <memcpy>
 800b62a:	2201      	movs	r2, #1
 800b62c:	4631      	mov	r1, r6
 800b62e:	4658      	mov	r0, fp
 800b630:	f000 fc08 	bl	800be44 <__lshift>
 800b634:	f10a 0301 	add.w	r3, sl, #1
 800b638:	9307      	str	r3, [sp, #28]
 800b63a:	9b00      	ldr	r3, [sp, #0]
 800b63c:	4453      	add	r3, sl
 800b63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	462f      	mov	r7, r5
 800b648:	930a      	str	r3, [sp, #40]	@ 0x28
 800b64a:	4605      	mov	r5, r0
 800b64c:	9b07      	ldr	r3, [sp, #28]
 800b64e:	4621      	mov	r1, r4
 800b650:	3b01      	subs	r3, #1
 800b652:	4648      	mov	r0, r9
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	f7ff fa98 	bl	800ab8a <quorem>
 800b65a:	4639      	mov	r1, r7
 800b65c:	9002      	str	r0, [sp, #8]
 800b65e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b662:	4648      	mov	r0, r9
 800b664:	f000 fc5a 	bl	800bf1c <__mcmp>
 800b668:	462a      	mov	r2, r5
 800b66a:	9008      	str	r0, [sp, #32]
 800b66c:	4621      	mov	r1, r4
 800b66e:	4658      	mov	r0, fp
 800b670:	f000 fc70 	bl	800bf54 <__mdiff>
 800b674:	68c2      	ldr	r2, [r0, #12]
 800b676:	4606      	mov	r6, r0
 800b678:	bb02      	cbnz	r2, 800b6bc <_dtoa_r+0xa1c>
 800b67a:	4601      	mov	r1, r0
 800b67c:	4648      	mov	r0, r9
 800b67e:	f000 fc4d 	bl	800bf1c <__mcmp>
 800b682:	4602      	mov	r2, r0
 800b684:	4631      	mov	r1, r6
 800b686:	4658      	mov	r0, fp
 800b688:	920e      	str	r2, [sp, #56]	@ 0x38
 800b68a:	f000 fa0d 	bl	800baa8 <_Bfree>
 800b68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b690:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b692:	9e07      	ldr	r6, [sp, #28]
 800b694:	ea43 0102 	orr.w	r1, r3, r2
 800b698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b69a:	4319      	orrs	r1, r3
 800b69c:	d110      	bne.n	800b6c0 <_dtoa_r+0xa20>
 800b69e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6a2:	d029      	beq.n	800b6f8 <_dtoa_r+0xa58>
 800b6a4:	9b08      	ldr	r3, [sp, #32]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	dd02      	ble.n	800b6b0 <_dtoa_r+0xa10>
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	f883 8000 	strb.w	r8, [r3]
 800b6b6:	e63f      	b.n	800b338 <_dtoa_r+0x698>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	e7bb      	b.n	800b634 <_dtoa_r+0x994>
 800b6bc:	2201      	movs	r2, #1
 800b6be:	e7e1      	b.n	800b684 <_dtoa_r+0x9e4>
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	db04      	blt.n	800b6d0 <_dtoa_r+0xa30>
 800b6c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	d120      	bne.n	800b712 <_dtoa_r+0xa72>
 800b6d0:	2a00      	cmp	r2, #0
 800b6d2:	dded      	ble.n	800b6b0 <_dtoa_r+0xa10>
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4658      	mov	r0, fp
 800b6da:	f000 fbb3 	bl	800be44 <__lshift>
 800b6de:	4621      	mov	r1, r4
 800b6e0:	4681      	mov	r9, r0
 800b6e2:	f000 fc1b 	bl	800bf1c <__mcmp>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	dc03      	bgt.n	800b6f2 <_dtoa_r+0xa52>
 800b6ea:	d1e1      	bne.n	800b6b0 <_dtoa_r+0xa10>
 800b6ec:	f018 0f01 	tst.w	r8, #1
 800b6f0:	d0de      	beq.n	800b6b0 <_dtoa_r+0xa10>
 800b6f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6f6:	d1d8      	bne.n	800b6aa <_dtoa_r+0xa0a>
 800b6f8:	9a00      	ldr	r2, [sp, #0]
 800b6fa:	2339      	movs	r3, #57	@ 0x39
 800b6fc:	7013      	strb	r3, [r2, #0]
 800b6fe:	4633      	mov	r3, r6
 800b700:	461e      	mov	r6, r3
 800b702:	3b01      	subs	r3, #1
 800b704:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b708:	2a39      	cmp	r2, #57	@ 0x39
 800b70a:	d052      	beq.n	800b7b2 <_dtoa_r+0xb12>
 800b70c:	3201      	adds	r2, #1
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	e612      	b.n	800b338 <_dtoa_r+0x698>
 800b712:	2a00      	cmp	r2, #0
 800b714:	dd07      	ble.n	800b726 <_dtoa_r+0xa86>
 800b716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b71a:	d0ed      	beq.n	800b6f8 <_dtoa_r+0xa58>
 800b71c:	9a00      	ldr	r2, [sp, #0]
 800b71e:	f108 0301 	add.w	r3, r8, #1
 800b722:	7013      	strb	r3, [r2, #0]
 800b724:	e608      	b.n	800b338 <_dtoa_r+0x698>
 800b726:	9b07      	ldr	r3, [sp, #28]
 800b728:	9a07      	ldr	r2, [sp, #28]
 800b72a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b72e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b730:	4293      	cmp	r3, r2
 800b732:	d028      	beq.n	800b786 <_dtoa_r+0xae6>
 800b734:	4649      	mov	r1, r9
 800b736:	2300      	movs	r3, #0
 800b738:	220a      	movs	r2, #10
 800b73a:	4658      	mov	r0, fp
 800b73c:	f000 f9d6 	bl	800baec <__multadd>
 800b740:	42af      	cmp	r7, r5
 800b742:	4681      	mov	r9, r0
 800b744:	f04f 0300 	mov.w	r3, #0
 800b748:	f04f 020a 	mov.w	r2, #10
 800b74c:	4639      	mov	r1, r7
 800b74e:	4658      	mov	r0, fp
 800b750:	d107      	bne.n	800b762 <_dtoa_r+0xac2>
 800b752:	f000 f9cb 	bl	800baec <__multadd>
 800b756:	4607      	mov	r7, r0
 800b758:	4605      	mov	r5, r0
 800b75a:	9b07      	ldr	r3, [sp, #28]
 800b75c:	3301      	adds	r3, #1
 800b75e:	9307      	str	r3, [sp, #28]
 800b760:	e774      	b.n	800b64c <_dtoa_r+0x9ac>
 800b762:	f000 f9c3 	bl	800baec <__multadd>
 800b766:	4629      	mov	r1, r5
 800b768:	4607      	mov	r7, r0
 800b76a:	2300      	movs	r3, #0
 800b76c:	220a      	movs	r2, #10
 800b76e:	4658      	mov	r0, fp
 800b770:	f000 f9bc 	bl	800baec <__multadd>
 800b774:	4605      	mov	r5, r0
 800b776:	e7f0      	b.n	800b75a <_dtoa_r+0xaba>
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	bfcc      	ite	gt
 800b77e:	461e      	movgt	r6, r3
 800b780:	2601      	movle	r6, #1
 800b782:	4456      	add	r6, sl
 800b784:	2700      	movs	r7, #0
 800b786:	4649      	mov	r1, r9
 800b788:	2201      	movs	r2, #1
 800b78a:	4658      	mov	r0, fp
 800b78c:	f000 fb5a 	bl	800be44 <__lshift>
 800b790:	4621      	mov	r1, r4
 800b792:	4681      	mov	r9, r0
 800b794:	f000 fbc2 	bl	800bf1c <__mcmp>
 800b798:	2800      	cmp	r0, #0
 800b79a:	dcb0      	bgt.n	800b6fe <_dtoa_r+0xa5e>
 800b79c:	d102      	bne.n	800b7a4 <_dtoa_r+0xb04>
 800b79e:	f018 0f01 	tst.w	r8, #1
 800b7a2:	d1ac      	bne.n	800b6fe <_dtoa_r+0xa5e>
 800b7a4:	4633      	mov	r3, r6
 800b7a6:	461e      	mov	r6, r3
 800b7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7ac:	2a30      	cmp	r2, #48	@ 0x30
 800b7ae:	d0fa      	beq.n	800b7a6 <_dtoa_r+0xb06>
 800b7b0:	e5c2      	b.n	800b338 <_dtoa_r+0x698>
 800b7b2:	459a      	cmp	sl, r3
 800b7b4:	d1a4      	bne.n	800b700 <_dtoa_r+0xa60>
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	2331      	movs	r3, #49	@ 0x31
 800b7be:	f88a 3000 	strb.w	r3, [sl]
 800b7c2:	e5b9      	b.n	800b338 <_dtoa_r+0x698>
 800b7c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b824 <_dtoa_r+0xb84>
 800b7ca:	b11b      	cbz	r3, 800b7d4 <_dtoa_r+0xb34>
 800b7cc:	f10a 0308 	add.w	r3, sl, #8
 800b7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	b019      	add	sp, #100	@ 0x64
 800b7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	f77f ae37 	ble.w	800b452 <_dtoa_r+0x7b2>
 800b7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	e655      	b.n	800b498 <_dtoa_r+0x7f8>
 800b7ec:	9b00      	ldr	r3, [sp, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f77f aed6 	ble.w	800b5a0 <_dtoa_r+0x900>
 800b7f4:	4656      	mov	r6, sl
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4648      	mov	r0, r9
 800b7fa:	f7ff f9c6 	bl	800ab8a <quorem>
 800b7fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b802:	f806 8b01 	strb.w	r8, [r6], #1
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	eba6 020a 	sub.w	r2, r6, sl
 800b80c:	4293      	cmp	r3, r2
 800b80e:	ddb3      	ble.n	800b778 <_dtoa_r+0xad8>
 800b810:	4649      	mov	r1, r9
 800b812:	2300      	movs	r3, #0
 800b814:	220a      	movs	r2, #10
 800b816:	4658      	mov	r0, fp
 800b818:	f000 f968 	bl	800baec <__multadd>
 800b81c:	4681      	mov	r9, r0
 800b81e:	e7ea      	b.n	800b7f6 <_dtoa_r+0xb56>
 800b820:	0800f2c8 	.word	0x0800f2c8
 800b824:	0800f24c 	.word	0x0800f24c

0800b828 <_free_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4605      	mov	r5, r0
 800b82c:	2900      	cmp	r1, #0
 800b82e:	d041      	beq.n	800b8b4 <_free_r+0x8c>
 800b830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b834:	1f0c      	subs	r4, r1, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfb8      	it	lt
 800b83a:	18e4      	addlt	r4, r4, r3
 800b83c:	f000 f8e8 	bl	800ba10 <__malloc_lock>
 800b840:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b8 <_free_r+0x90>)
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	b933      	cbnz	r3, 800b854 <_free_r+0x2c>
 800b846:	6063      	str	r3, [r4, #4]
 800b848:	6014      	str	r4, [r2, #0]
 800b84a:	4628      	mov	r0, r5
 800b84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b850:	f000 b8e4 	b.w	800ba1c <__malloc_unlock>
 800b854:	42a3      	cmp	r3, r4
 800b856:	d908      	bls.n	800b86a <_free_r+0x42>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	1821      	adds	r1, r4, r0
 800b85c:	428b      	cmp	r3, r1
 800b85e:	bf01      	itttt	eq
 800b860:	6819      	ldreq	r1, [r3, #0]
 800b862:	685b      	ldreq	r3, [r3, #4]
 800b864:	1809      	addeq	r1, r1, r0
 800b866:	6021      	streq	r1, [r4, #0]
 800b868:	e7ed      	b.n	800b846 <_free_r+0x1e>
 800b86a:	461a      	mov	r2, r3
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b10b      	cbz	r3, 800b874 <_free_r+0x4c>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d9fa      	bls.n	800b86a <_free_r+0x42>
 800b874:	6811      	ldr	r1, [r2, #0]
 800b876:	1850      	adds	r0, r2, r1
 800b878:	42a0      	cmp	r0, r4
 800b87a:	d10b      	bne.n	800b894 <_free_r+0x6c>
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	4401      	add	r1, r0
 800b880:	1850      	adds	r0, r2, r1
 800b882:	4283      	cmp	r3, r0
 800b884:	6011      	str	r1, [r2, #0]
 800b886:	d1e0      	bne.n	800b84a <_free_r+0x22>
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	6053      	str	r3, [r2, #4]
 800b88e:	4408      	add	r0, r1
 800b890:	6010      	str	r0, [r2, #0]
 800b892:	e7da      	b.n	800b84a <_free_r+0x22>
 800b894:	d902      	bls.n	800b89c <_free_r+0x74>
 800b896:	230c      	movs	r3, #12
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	e7d6      	b.n	800b84a <_free_r+0x22>
 800b89c:	6820      	ldr	r0, [r4, #0]
 800b89e:	1821      	adds	r1, r4, r0
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	bf04      	itt	eq
 800b8a4:	6819      	ldreq	r1, [r3, #0]
 800b8a6:	685b      	ldreq	r3, [r3, #4]
 800b8a8:	6063      	str	r3, [r4, #4]
 800b8aa:	bf04      	itt	eq
 800b8ac:	1809      	addeq	r1, r1, r0
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	6054      	str	r4, [r2, #4]
 800b8b2:	e7ca      	b.n	800b84a <_free_r+0x22>
 800b8b4:	bd38      	pop	{r3, r4, r5, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2000077c 	.word	0x2000077c

0800b8bc <malloc>:
 800b8bc:	4b02      	ldr	r3, [pc, #8]	@ (800b8c8 <malloc+0xc>)
 800b8be:	4601      	mov	r1, r0
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	f000 b825 	b.w	800b910 <_malloc_r>
 800b8c6:	bf00      	nop
 800b8c8:	20000034 	.word	0x20000034

0800b8cc <sbrk_aligned>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4e0f      	ldr	r6, [pc, #60]	@ (800b90c <sbrk_aligned+0x40>)
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	6831      	ldr	r1, [r6, #0]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	b911      	cbnz	r1, 800b8de <sbrk_aligned+0x12>
 800b8d8:	f000 fe46 	bl	800c568 <_sbrk_r>
 800b8dc:	6030      	str	r0, [r6, #0]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f000 fe41 	bl	800c568 <_sbrk_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d103      	bne.n	800b8f2 <sbrk_aligned+0x26>
 800b8ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	1cc4      	adds	r4, r0, #3
 800b8f4:	f024 0403 	bic.w	r4, r4, #3
 800b8f8:	42a0      	cmp	r0, r4
 800b8fa:	d0f8      	beq.n	800b8ee <sbrk_aligned+0x22>
 800b8fc:	1a21      	subs	r1, r4, r0
 800b8fe:	4628      	mov	r0, r5
 800b900:	f000 fe32 	bl	800c568 <_sbrk_r>
 800b904:	3001      	adds	r0, #1
 800b906:	d1f2      	bne.n	800b8ee <sbrk_aligned+0x22>
 800b908:	e7ef      	b.n	800b8ea <sbrk_aligned+0x1e>
 800b90a:	bf00      	nop
 800b90c:	20000778 	.word	0x20000778

0800b910 <_malloc_r>:
 800b910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b914:	1ccd      	adds	r5, r1, #3
 800b916:	f025 0503 	bic.w	r5, r5, #3
 800b91a:	3508      	adds	r5, #8
 800b91c:	2d0c      	cmp	r5, #12
 800b91e:	bf38      	it	cc
 800b920:	250c      	movcc	r5, #12
 800b922:	2d00      	cmp	r5, #0
 800b924:	4606      	mov	r6, r0
 800b926:	db01      	blt.n	800b92c <_malloc_r+0x1c>
 800b928:	42a9      	cmp	r1, r5
 800b92a:	d904      	bls.n	800b936 <_malloc_r+0x26>
 800b92c:	230c      	movs	r3, #12
 800b92e:	6033      	str	r3, [r6, #0]
 800b930:	2000      	movs	r0, #0
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba0c <_malloc_r+0xfc>
 800b93a:	f000 f869 	bl	800ba10 <__malloc_lock>
 800b93e:	f8d8 3000 	ldr.w	r3, [r8]
 800b942:	461c      	mov	r4, r3
 800b944:	bb44      	cbnz	r4, 800b998 <_malloc_r+0x88>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff ffbf 	bl	800b8cc <sbrk_aligned>
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	4604      	mov	r4, r0
 800b952:	d158      	bne.n	800ba06 <_malloc_r+0xf6>
 800b954:	f8d8 4000 	ldr.w	r4, [r8]
 800b958:	4627      	mov	r7, r4
 800b95a:	2f00      	cmp	r7, #0
 800b95c:	d143      	bne.n	800b9e6 <_malloc_r+0xd6>
 800b95e:	2c00      	cmp	r4, #0
 800b960:	d04b      	beq.n	800b9fa <_malloc_r+0xea>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	4639      	mov	r1, r7
 800b966:	4630      	mov	r0, r6
 800b968:	eb04 0903 	add.w	r9, r4, r3
 800b96c:	f000 fdfc 	bl	800c568 <_sbrk_r>
 800b970:	4581      	cmp	r9, r0
 800b972:	d142      	bne.n	800b9fa <_malloc_r+0xea>
 800b974:	6821      	ldr	r1, [r4, #0]
 800b976:	1a6d      	subs	r5, r5, r1
 800b978:	4629      	mov	r1, r5
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7ff ffa6 	bl	800b8cc <sbrk_aligned>
 800b980:	3001      	adds	r0, #1
 800b982:	d03a      	beq.n	800b9fa <_malloc_r+0xea>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	442b      	add	r3, r5
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	f8d8 3000 	ldr.w	r3, [r8]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	bb62      	cbnz	r2, 800b9ec <_malloc_r+0xdc>
 800b992:	f8c8 7000 	str.w	r7, [r8]
 800b996:	e00f      	b.n	800b9b8 <_malloc_r+0xa8>
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	1b52      	subs	r2, r2, r5
 800b99c:	d420      	bmi.n	800b9e0 <_malloc_r+0xd0>
 800b99e:	2a0b      	cmp	r2, #11
 800b9a0:	d917      	bls.n	800b9d2 <_malloc_r+0xc2>
 800b9a2:	1961      	adds	r1, r4, r5
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	6025      	str	r5, [r4, #0]
 800b9a8:	bf18      	it	ne
 800b9aa:	6059      	strne	r1, [r3, #4]
 800b9ac:	6863      	ldr	r3, [r4, #4]
 800b9ae:	bf08      	it	eq
 800b9b0:	f8c8 1000 	streq.w	r1, [r8]
 800b9b4:	5162      	str	r2, [r4, r5]
 800b9b6:	604b      	str	r3, [r1, #4]
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f82f 	bl	800ba1c <__malloc_unlock>
 800b9be:	f104 000b 	add.w	r0, r4, #11
 800b9c2:	1d23      	adds	r3, r4, #4
 800b9c4:	f020 0007 	bic.w	r0, r0, #7
 800b9c8:	1ac2      	subs	r2, r0, r3
 800b9ca:	bf1c      	itt	ne
 800b9cc:	1a1b      	subne	r3, r3, r0
 800b9ce:	50a3      	strne	r3, [r4, r2]
 800b9d0:	e7af      	b.n	800b932 <_malloc_r+0x22>
 800b9d2:	6862      	ldr	r2, [r4, #4]
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	bf0c      	ite	eq
 800b9d8:	f8c8 2000 	streq.w	r2, [r8]
 800b9dc:	605a      	strne	r2, [r3, #4]
 800b9de:	e7eb      	b.n	800b9b8 <_malloc_r+0xa8>
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	6864      	ldr	r4, [r4, #4]
 800b9e4:	e7ae      	b.n	800b944 <_malloc_r+0x34>
 800b9e6:	463c      	mov	r4, r7
 800b9e8:	687f      	ldr	r7, [r7, #4]
 800b9ea:	e7b6      	b.n	800b95a <_malloc_r+0x4a>
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	d1fb      	bne.n	800b9ec <_malloc_r+0xdc>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	6053      	str	r3, [r2, #4]
 800b9f8:	e7de      	b.n	800b9b8 <_malloc_r+0xa8>
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f000 f80c 	bl	800ba1c <__malloc_unlock>
 800ba04:	e794      	b.n	800b930 <_malloc_r+0x20>
 800ba06:	6005      	str	r5, [r0, #0]
 800ba08:	e7d6      	b.n	800b9b8 <_malloc_r+0xa8>
 800ba0a:	bf00      	nop
 800ba0c:	2000077c 	.word	0x2000077c

0800ba10 <__malloc_lock>:
 800ba10:	4801      	ldr	r0, [pc, #4]	@ (800ba18 <__malloc_lock+0x8>)
 800ba12:	f7ff b8aa 	b.w	800ab6a <__retarget_lock_acquire_recursive>
 800ba16:	bf00      	nop
 800ba18:	20000774 	.word	0x20000774

0800ba1c <__malloc_unlock>:
 800ba1c:	4801      	ldr	r0, [pc, #4]	@ (800ba24 <__malloc_unlock+0x8>)
 800ba1e:	f7ff b8a5 	b.w	800ab6c <__retarget_lock_release_recursive>
 800ba22:	bf00      	nop
 800ba24:	20000774 	.word	0x20000774

0800ba28 <_Balloc>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	69c6      	ldr	r6, [r0, #28]
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	b976      	cbnz	r6, 800ba50 <_Balloc+0x28>
 800ba32:	2010      	movs	r0, #16
 800ba34:	f7ff ff42 	bl	800b8bc <malloc>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	61e0      	str	r0, [r4, #28]
 800ba3c:	b920      	cbnz	r0, 800ba48 <_Balloc+0x20>
 800ba3e:	4b18      	ldr	r3, [pc, #96]	@ (800baa0 <_Balloc+0x78>)
 800ba40:	4818      	ldr	r0, [pc, #96]	@ (800baa4 <_Balloc+0x7c>)
 800ba42:	216b      	movs	r1, #107	@ 0x6b
 800ba44:	f000 fda0 	bl	800c588 <__assert_func>
 800ba48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba4c:	6006      	str	r6, [r0, #0]
 800ba4e:	60c6      	str	r6, [r0, #12]
 800ba50:	69e6      	ldr	r6, [r4, #28]
 800ba52:	68f3      	ldr	r3, [r6, #12]
 800ba54:	b183      	cbz	r3, 800ba78 <_Balloc+0x50>
 800ba56:	69e3      	ldr	r3, [r4, #28]
 800ba58:	68db      	ldr	r3, [r3, #12]
 800ba5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba5e:	b9b8      	cbnz	r0, 800ba90 <_Balloc+0x68>
 800ba60:	2101      	movs	r1, #1
 800ba62:	fa01 f605 	lsl.w	r6, r1, r5
 800ba66:	1d72      	adds	r2, r6, #5
 800ba68:	0092      	lsls	r2, r2, #2
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 fdaa 	bl	800c5c4 <_calloc_r>
 800ba70:	b160      	cbz	r0, 800ba8c <_Balloc+0x64>
 800ba72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba76:	e00e      	b.n	800ba96 <_Balloc+0x6e>
 800ba78:	2221      	movs	r2, #33	@ 0x21
 800ba7a:	2104      	movs	r1, #4
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fda1 	bl	800c5c4 <_calloc_r>
 800ba82:	69e3      	ldr	r3, [r4, #28]
 800ba84:	60f0      	str	r0, [r6, #12]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1e4      	bne.n	800ba56 <_Balloc+0x2e>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	bd70      	pop	{r4, r5, r6, pc}
 800ba90:	6802      	ldr	r2, [r0, #0]
 800ba92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba96:	2300      	movs	r3, #0
 800ba98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba9c:	e7f7      	b.n	800ba8e <_Balloc+0x66>
 800ba9e:	bf00      	nop
 800baa0:	0800f259 	.word	0x0800f259
 800baa4:	0800f2d9 	.word	0x0800f2d9

0800baa8 <_Bfree>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	69c6      	ldr	r6, [r0, #28]
 800baac:	4605      	mov	r5, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	b976      	cbnz	r6, 800bad0 <_Bfree+0x28>
 800bab2:	2010      	movs	r0, #16
 800bab4:	f7ff ff02 	bl	800b8bc <malloc>
 800bab8:	4602      	mov	r2, r0
 800baba:	61e8      	str	r0, [r5, #28]
 800babc:	b920      	cbnz	r0, 800bac8 <_Bfree+0x20>
 800babe:	4b09      	ldr	r3, [pc, #36]	@ (800bae4 <_Bfree+0x3c>)
 800bac0:	4809      	ldr	r0, [pc, #36]	@ (800bae8 <_Bfree+0x40>)
 800bac2:	218f      	movs	r1, #143	@ 0x8f
 800bac4:	f000 fd60 	bl	800c588 <__assert_func>
 800bac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bacc:	6006      	str	r6, [r0, #0]
 800bace:	60c6      	str	r6, [r0, #12]
 800bad0:	b13c      	cbz	r4, 800bae2 <_Bfree+0x3a>
 800bad2:	69eb      	ldr	r3, [r5, #28]
 800bad4:	6862      	ldr	r2, [r4, #4]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800badc:	6021      	str	r1, [r4, #0]
 800bade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	0800f259 	.word	0x0800f259
 800bae8:	0800f2d9 	.word	0x0800f2d9

0800baec <__multadd>:
 800baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf0:	690d      	ldr	r5, [r1, #16]
 800baf2:	4607      	mov	r7, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	461e      	mov	r6, r3
 800baf8:	f101 0c14 	add.w	ip, r1, #20
 800bafc:	2000      	movs	r0, #0
 800bafe:	f8dc 3000 	ldr.w	r3, [ip]
 800bb02:	b299      	uxth	r1, r3
 800bb04:	fb02 6101 	mla	r1, r2, r1, r6
 800bb08:	0c1e      	lsrs	r6, r3, #16
 800bb0a:	0c0b      	lsrs	r3, r1, #16
 800bb0c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb10:	b289      	uxth	r1, r1
 800bb12:	3001      	adds	r0, #1
 800bb14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb18:	4285      	cmp	r5, r0
 800bb1a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb22:	dcec      	bgt.n	800bafe <__multadd+0x12>
 800bb24:	b30e      	cbz	r6, 800bb6a <__multadd+0x7e>
 800bb26:	68a3      	ldr	r3, [r4, #8]
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	dc19      	bgt.n	800bb60 <__multadd+0x74>
 800bb2c:	6861      	ldr	r1, [r4, #4]
 800bb2e:	4638      	mov	r0, r7
 800bb30:	3101      	adds	r1, #1
 800bb32:	f7ff ff79 	bl	800ba28 <_Balloc>
 800bb36:	4680      	mov	r8, r0
 800bb38:	b928      	cbnz	r0, 800bb46 <__multadd+0x5a>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb70 <__multadd+0x84>)
 800bb3e:	480d      	ldr	r0, [pc, #52]	@ (800bb74 <__multadd+0x88>)
 800bb40:	21ba      	movs	r1, #186	@ 0xba
 800bb42:	f000 fd21 	bl	800c588 <__assert_func>
 800bb46:	6922      	ldr	r2, [r4, #16]
 800bb48:	3202      	adds	r2, #2
 800bb4a:	f104 010c 	add.w	r1, r4, #12
 800bb4e:	0092      	lsls	r2, r2, #2
 800bb50:	300c      	adds	r0, #12
 800bb52:	f7ff f80c 	bl	800ab6e <memcpy>
 800bb56:	4621      	mov	r1, r4
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7ff ffa5 	bl	800baa8 <_Bfree>
 800bb5e:	4644      	mov	r4, r8
 800bb60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb64:	3501      	adds	r5, #1
 800bb66:	615e      	str	r6, [r3, #20]
 800bb68:	6125      	str	r5, [r4, #16]
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	0800f2c8 	.word	0x0800f2c8
 800bb74:	0800f2d9 	.word	0x0800f2d9

0800bb78 <__hi0bits>:
 800bb78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	bf36      	itet	cc
 800bb80:	0403      	lslcc	r3, r0, #16
 800bb82:	2000      	movcs	r0, #0
 800bb84:	2010      	movcc	r0, #16
 800bb86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb8a:	bf3c      	itt	cc
 800bb8c:	021b      	lslcc	r3, r3, #8
 800bb8e:	3008      	addcc	r0, #8
 800bb90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb94:	bf3c      	itt	cc
 800bb96:	011b      	lslcc	r3, r3, #4
 800bb98:	3004      	addcc	r0, #4
 800bb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb9e:	bf3c      	itt	cc
 800bba0:	009b      	lslcc	r3, r3, #2
 800bba2:	3002      	addcc	r0, #2
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	db05      	blt.n	800bbb4 <__hi0bits+0x3c>
 800bba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bbac:	f100 0001 	add.w	r0, r0, #1
 800bbb0:	bf08      	it	eq
 800bbb2:	2020      	moveq	r0, #32
 800bbb4:	4770      	bx	lr

0800bbb6 <__lo0bits>:
 800bbb6:	6803      	ldr	r3, [r0, #0]
 800bbb8:	4602      	mov	r2, r0
 800bbba:	f013 0007 	ands.w	r0, r3, #7
 800bbbe:	d00b      	beq.n	800bbd8 <__lo0bits+0x22>
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	d421      	bmi.n	800bc08 <__lo0bits+0x52>
 800bbc4:	0798      	lsls	r0, r3, #30
 800bbc6:	bf49      	itett	mi
 800bbc8:	085b      	lsrmi	r3, r3, #1
 800bbca:	089b      	lsrpl	r3, r3, #2
 800bbcc:	2001      	movmi	r0, #1
 800bbce:	6013      	strmi	r3, [r2, #0]
 800bbd0:	bf5c      	itt	pl
 800bbd2:	6013      	strpl	r3, [r2, #0]
 800bbd4:	2002      	movpl	r0, #2
 800bbd6:	4770      	bx	lr
 800bbd8:	b299      	uxth	r1, r3
 800bbda:	b909      	cbnz	r1, 800bbe0 <__lo0bits+0x2a>
 800bbdc:	0c1b      	lsrs	r3, r3, #16
 800bbde:	2010      	movs	r0, #16
 800bbe0:	b2d9      	uxtb	r1, r3
 800bbe2:	b909      	cbnz	r1, 800bbe8 <__lo0bits+0x32>
 800bbe4:	3008      	adds	r0, #8
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	0719      	lsls	r1, r3, #28
 800bbea:	bf04      	itt	eq
 800bbec:	091b      	lsreq	r3, r3, #4
 800bbee:	3004      	addeq	r0, #4
 800bbf0:	0799      	lsls	r1, r3, #30
 800bbf2:	bf04      	itt	eq
 800bbf4:	089b      	lsreq	r3, r3, #2
 800bbf6:	3002      	addeq	r0, #2
 800bbf8:	07d9      	lsls	r1, r3, #31
 800bbfa:	d403      	bmi.n	800bc04 <__lo0bits+0x4e>
 800bbfc:	085b      	lsrs	r3, r3, #1
 800bbfe:	f100 0001 	add.w	r0, r0, #1
 800bc02:	d003      	beq.n	800bc0c <__lo0bits+0x56>
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	4770      	bx	lr
 800bc08:	2000      	movs	r0, #0
 800bc0a:	4770      	bx	lr
 800bc0c:	2020      	movs	r0, #32
 800bc0e:	4770      	bx	lr

0800bc10 <__i2b>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	460c      	mov	r4, r1
 800bc14:	2101      	movs	r1, #1
 800bc16:	f7ff ff07 	bl	800ba28 <_Balloc>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	b928      	cbnz	r0, 800bc2a <__i2b+0x1a>
 800bc1e:	4b05      	ldr	r3, [pc, #20]	@ (800bc34 <__i2b+0x24>)
 800bc20:	4805      	ldr	r0, [pc, #20]	@ (800bc38 <__i2b+0x28>)
 800bc22:	f240 1145 	movw	r1, #325	@ 0x145
 800bc26:	f000 fcaf 	bl	800c588 <__assert_func>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	6144      	str	r4, [r0, #20]
 800bc2e:	6103      	str	r3, [r0, #16]
 800bc30:	bd10      	pop	{r4, pc}
 800bc32:	bf00      	nop
 800bc34:	0800f2c8 	.word	0x0800f2c8
 800bc38:	0800f2d9 	.word	0x0800f2d9

0800bc3c <__multiply>:
 800bc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc40:	4614      	mov	r4, r2
 800bc42:	690a      	ldr	r2, [r1, #16]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	bfa8      	it	ge
 800bc4a:	4623      	movge	r3, r4
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	bfa4      	itt	ge
 800bc50:	460c      	movge	r4, r1
 800bc52:	461f      	movge	r7, r3
 800bc54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc5c:	68a3      	ldr	r3, [r4, #8]
 800bc5e:	6861      	ldr	r1, [r4, #4]
 800bc60:	eb0a 0609 	add.w	r6, sl, r9
 800bc64:	42b3      	cmp	r3, r6
 800bc66:	b085      	sub	sp, #20
 800bc68:	bfb8      	it	lt
 800bc6a:	3101      	addlt	r1, #1
 800bc6c:	f7ff fedc 	bl	800ba28 <_Balloc>
 800bc70:	b930      	cbnz	r0, 800bc80 <__multiply+0x44>
 800bc72:	4602      	mov	r2, r0
 800bc74:	4b44      	ldr	r3, [pc, #272]	@ (800bd88 <__multiply+0x14c>)
 800bc76:	4845      	ldr	r0, [pc, #276]	@ (800bd8c <__multiply+0x150>)
 800bc78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc7c:	f000 fc84 	bl	800c588 <__assert_func>
 800bc80:	f100 0514 	add.w	r5, r0, #20
 800bc84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc88:	462b      	mov	r3, r5
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4543      	cmp	r3, r8
 800bc8e:	d321      	bcc.n	800bcd4 <__multiply+0x98>
 800bc90:	f107 0114 	add.w	r1, r7, #20
 800bc94:	f104 0214 	add.w	r2, r4, #20
 800bc98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bca0:	9302      	str	r3, [sp, #8]
 800bca2:	1b13      	subs	r3, r2, r4
 800bca4:	3b15      	subs	r3, #21
 800bca6:	f023 0303 	bic.w	r3, r3, #3
 800bcaa:	3304      	adds	r3, #4
 800bcac:	f104 0715 	add.w	r7, r4, #21
 800bcb0:	42ba      	cmp	r2, r7
 800bcb2:	bf38      	it	cc
 800bcb4:	2304      	movcc	r3, #4
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	9b02      	ldr	r3, [sp, #8]
 800bcba:	9103      	str	r1, [sp, #12]
 800bcbc:	428b      	cmp	r3, r1
 800bcbe:	d80c      	bhi.n	800bcda <__multiply+0x9e>
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	dd03      	ble.n	800bccc <__multiply+0x90>
 800bcc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d05b      	beq.n	800bd84 <__multiply+0x148>
 800bccc:	6106      	str	r6, [r0, #16]
 800bcce:	b005      	add	sp, #20
 800bcd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd4:	f843 2b04 	str.w	r2, [r3], #4
 800bcd8:	e7d8      	b.n	800bc8c <__multiply+0x50>
 800bcda:	f8b1 a000 	ldrh.w	sl, [r1]
 800bcde:	f1ba 0f00 	cmp.w	sl, #0
 800bce2:	d024      	beq.n	800bd2e <__multiply+0xf2>
 800bce4:	f104 0e14 	add.w	lr, r4, #20
 800bce8:	46a9      	mov	r9, r5
 800bcea:	f04f 0c00 	mov.w	ip, #0
 800bcee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcf2:	f8d9 3000 	ldr.w	r3, [r9]
 800bcf6:	fa1f fb87 	uxth.w	fp, r7
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bd04:	f8d9 7000 	ldr.w	r7, [r9]
 800bd08:	4463      	add	r3, ip
 800bd0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd0e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bd12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd1c:	4572      	cmp	r2, lr
 800bd1e:	f849 3b04 	str.w	r3, [r9], #4
 800bd22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd26:	d8e2      	bhi.n	800bcee <__multiply+0xb2>
 800bd28:	9b01      	ldr	r3, [sp, #4]
 800bd2a:	f845 c003 	str.w	ip, [r5, r3]
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd34:	3104      	adds	r1, #4
 800bd36:	f1b9 0f00 	cmp.w	r9, #0
 800bd3a:	d021      	beq.n	800bd80 <__multiply+0x144>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	f104 0c14 	add.w	ip, r4, #20
 800bd42:	46ae      	mov	lr, r5
 800bd44:	f04f 0a00 	mov.w	sl, #0
 800bd48:	f8bc b000 	ldrh.w	fp, [ip]
 800bd4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd50:	fb09 770b 	mla	r7, r9, fp, r7
 800bd54:	4457      	add	r7, sl
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd5c:	f84e 3b04 	str.w	r3, [lr], #4
 800bd60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd68:	f8be 3000 	ldrh.w	r3, [lr]
 800bd6c:	fb09 330a 	mla	r3, r9, sl, r3
 800bd70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd74:	4562      	cmp	r2, ip
 800bd76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd7a:	d8e5      	bhi.n	800bd48 <__multiply+0x10c>
 800bd7c:	9f01      	ldr	r7, [sp, #4]
 800bd7e:	51eb      	str	r3, [r5, r7]
 800bd80:	3504      	adds	r5, #4
 800bd82:	e799      	b.n	800bcb8 <__multiply+0x7c>
 800bd84:	3e01      	subs	r6, #1
 800bd86:	e79b      	b.n	800bcc0 <__multiply+0x84>
 800bd88:	0800f2c8 	.word	0x0800f2c8
 800bd8c:	0800f2d9 	.word	0x0800f2d9

0800bd90 <__pow5mult>:
 800bd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	4615      	mov	r5, r2
 800bd96:	f012 0203 	ands.w	r2, r2, #3
 800bd9a:	4607      	mov	r7, r0
 800bd9c:	460e      	mov	r6, r1
 800bd9e:	d007      	beq.n	800bdb0 <__pow5mult+0x20>
 800bda0:	4c25      	ldr	r4, [pc, #148]	@ (800be38 <__pow5mult+0xa8>)
 800bda2:	3a01      	subs	r2, #1
 800bda4:	2300      	movs	r3, #0
 800bda6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdaa:	f7ff fe9f 	bl	800baec <__multadd>
 800bdae:	4606      	mov	r6, r0
 800bdb0:	10ad      	asrs	r5, r5, #2
 800bdb2:	d03d      	beq.n	800be30 <__pow5mult+0xa0>
 800bdb4:	69fc      	ldr	r4, [r7, #28]
 800bdb6:	b97c      	cbnz	r4, 800bdd8 <__pow5mult+0x48>
 800bdb8:	2010      	movs	r0, #16
 800bdba:	f7ff fd7f 	bl	800b8bc <malloc>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	61f8      	str	r0, [r7, #28]
 800bdc2:	b928      	cbnz	r0, 800bdd0 <__pow5mult+0x40>
 800bdc4:	4b1d      	ldr	r3, [pc, #116]	@ (800be3c <__pow5mult+0xac>)
 800bdc6:	481e      	ldr	r0, [pc, #120]	@ (800be40 <__pow5mult+0xb0>)
 800bdc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bdcc:	f000 fbdc 	bl	800c588 <__assert_func>
 800bdd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdd4:	6004      	str	r4, [r0, #0]
 800bdd6:	60c4      	str	r4, [r0, #12]
 800bdd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bde0:	b94c      	cbnz	r4, 800bdf6 <__pow5mult+0x66>
 800bde2:	f240 2171 	movw	r1, #625	@ 0x271
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ff12 	bl	800bc10 <__i2b>
 800bdec:	2300      	movs	r3, #0
 800bdee:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	6003      	str	r3, [r0, #0]
 800bdf6:	f04f 0900 	mov.w	r9, #0
 800bdfa:	07eb      	lsls	r3, r5, #31
 800bdfc:	d50a      	bpl.n	800be14 <__pow5mult+0x84>
 800bdfe:	4631      	mov	r1, r6
 800be00:	4622      	mov	r2, r4
 800be02:	4638      	mov	r0, r7
 800be04:	f7ff ff1a 	bl	800bc3c <__multiply>
 800be08:	4631      	mov	r1, r6
 800be0a:	4680      	mov	r8, r0
 800be0c:	4638      	mov	r0, r7
 800be0e:	f7ff fe4b 	bl	800baa8 <_Bfree>
 800be12:	4646      	mov	r6, r8
 800be14:	106d      	asrs	r5, r5, #1
 800be16:	d00b      	beq.n	800be30 <__pow5mult+0xa0>
 800be18:	6820      	ldr	r0, [r4, #0]
 800be1a:	b938      	cbnz	r0, 800be2c <__pow5mult+0x9c>
 800be1c:	4622      	mov	r2, r4
 800be1e:	4621      	mov	r1, r4
 800be20:	4638      	mov	r0, r7
 800be22:	f7ff ff0b 	bl	800bc3c <__multiply>
 800be26:	6020      	str	r0, [r4, #0]
 800be28:	f8c0 9000 	str.w	r9, [r0]
 800be2c:	4604      	mov	r4, r0
 800be2e:	e7e4      	b.n	800bdfa <__pow5mult+0x6a>
 800be30:	4630      	mov	r0, r6
 800be32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be36:	bf00      	nop
 800be38:	0800f334 	.word	0x0800f334
 800be3c:	0800f259 	.word	0x0800f259
 800be40:	0800f2d9 	.word	0x0800f2d9

0800be44 <__lshift>:
 800be44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be48:	460c      	mov	r4, r1
 800be4a:	6849      	ldr	r1, [r1, #4]
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	4607      	mov	r7, r0
 800be56:	4691      	mov	r9, r2
 800be58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be5c:	f108 0601 	add.w	r6, r8, #1
 800be60:	42b3      	cmp	r3, r6
 800be62:	db0b      	blt.n	800be7c <__lshift+0x38>
 800be64:	4638      	mov	r0, r7
 800be66:	f7ff fddf 	bl	800ba28 <_Balloc>
 800be6a:	4605      	mov	r5, r0
 800be6c:	b948      	cbnz	r0, 800be82 <__lshift+0x3e>
 800be6e:	4602      	mov	r2, r0
 800be70:	4b28      	ldr	r3, [pc, #160]	@ (800bf14 <__lshift+0xd0>)
 800be72:	4829      	ldr	r0, [pc, #164]	@ (800bf18 <__lshift+0xd4>)
 800be74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be78:	f000 fb86 	bl	800c588 <__assert_func>
 800be7c:	3101      	adds	r1, #1
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	e7ee      	b.n	800be60 <__lshift+0x1c>
 800be82:	2300      	movs	r3, #0
 800be84:	f100 0114 	add.w	r1, r0, #20
 800be88:	f100 0210 	add.w	r2, r0, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	4553      	cmp	r3, sl
 800be90:	db33      	blt.n	800befa <__lshift+0xb6>
 800be92:	6920      	ldr	r0, [r4, #16]
 800be94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be98:	f104 0314 	add.w	r3, r4, #20
 800be9c:	f019 091f 	ands.w	r9, r9, #31
 800bea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bea4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bea8:	d02b      	beq.n	800bf02 <__lshift+0xbe>
 800beaa:	f1c9 0e20 	rsb	lr, r9, #32
 800beae:	468a      	mov	sl, r1
 800beb0:	2200      	movs	r2, #0
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	fa00 f009 	lsl.w	r0, r0, r9
 800beb8:	4310      	orrs	r0, r2
 800beba:	f84a 0b04 	str.w	r0, [sl], #4
 800bebe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec2:	459c      	cmp	ip, r3
 800bec4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bec8:	d8f3      	bhi.n	800beb2 <__lshift+0x6e>
 800beca:	ebac 0304 	sub.w	r3, ip, r4
 800bece:	3b15      	subs	r3, #21
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	3304      	adds	r3, #4
 800bed6:	f104 0015 	add.w	r0, r4, #21
 800beda:	4584      	cmp	ip, r0
 800bedc:	bf38      	it	cc
 800bede:	2304      	movcc	r3, #4
 800bee0:	50ca      	str	r2, [r1, r3]
 800bee2:	b10a      	cbz	r2, 800bee8 <__lshift+0xa4>
 800bee4:	f108 0602 	add.w	r6, r8, #2
 800bee8:	3e01      	subs	r6, #1
 800beea:	4638      	mov	r0, r7
 800beec:	612e      	str	r6, [r5, #16]
 800beee:	4621      	mov	r1, r4
 800bef0:	f7ff fdda 	bl	800baa8 <_Bfree>
 800bef4:	4628      	mov	r0, r5
 800bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befa:	f842 0f04 	str.w	r0, [r2, #4]!
 800befe:	3301      	adds	r3, #1
 800bf00:	e7c5      	b.n	800be8e <__lshift+0x4a>
 800bf02:	3904      	subs	r1, #4
 800bf04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf08:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf0c:	459c      	cmp	ip, r3
 800bf0e:	d8f9      	bhi.n	800bf04 <__lshift+0xc0>
 800bf10:	e7ea      	b.n	800bee8 <__lshift+0xa4>
 800bf12:	bf00      	nop
 800bf14:	0800f2c8 	.word	0x0800f2c8
 800bf18:	0800f2d9 	.word	0x0800f2d9

0800bf1c <__mcmp>:
 800bf1c:	690a      	ldr	r2, [r1, #16]
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6900      	ldr	r0, [r0, #16]
 800bf22:	1a80      	subs	r0, r0, r2
 800bf24:	b530      	push	{r4, r5, lr}
 800bf26:	d10e      	bne.n	800bf46 <__mcmp+0x2a>
 800bf28:	3314      	adds	r3, #20
 800bf2a:	3114      	adds	r1, #20
 800bf2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf3c:	4295      	cmp	r5, r2
 800bf3e:	d003      	beq.n	800bf48 <__mcmp+0x2c>
 800bf40:	d205      	bcs.n	800bf4e <__mcmp+0x32>
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295
 800bf46:	bd30      	pop	{r4, r5, pc}
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	d3f3      	bcc.n	800bf34 <__mcmp+0x18>
 800bf4c:	e7fb      	b.n	800bf46 <__mcmp+0x2a>
 800bf4e:	2001      	movs	r0, #1
 800bf50:	e7f9      	b.n	800bf46 <__mcmp+0x2a>
	...

0800bf54 <__mdiff>:
 800bf54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	4689      	mov	r9, r1
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	4648      	mov	r0, r9
 800bf60:	4614      	mov	r4, r2
 800bf62:	f7ff ffdb 	bl	800bf1c <__mcmp>
 800bf66:	1e05      	subs	r5, r0, #0
 800bf68:	d112      	bne.n	800bf90 <__mdiff+0x3c>
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7ff fd5b 	bl	800ba28 <_Balloc>
 800bf72:	4602      	mov	r2, r0
 800bf74:	b928      	cbnz	r0, 800bf82 <__mdiff+0x2e>
 800bf76:	4b3f      	ldr	r3, [pc, #252]	@ (800c074 <__mdiff+0x120>)
 800bf78:	f240 2137 	movw	r1, #567	@ 0x237
 800bf7c:	483e      	ldr	r0, [pc, #248]	@ (800c078 <__mdiff+0x124>)
 800bf7e:	f000 fb03 	bl	800c588 <__assert_func>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf88:	4610      	mov	r0, r2
 800bf8a:	b003      	add	sp, #12
 800bf8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf90:	bfbc      	itt	lt
 800bf92:	464b      	movlt	r3, r9
 800bf94:	46a1      	movlt	r9, r4
 800bf96:	4630      	mov	r0, r6
 800bf98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf9c:	bfba      	itte	lt
 800bf9e:	461c      	movlt	r4, r3
 800bfa0:	2501      	movlt	r5, #1
 800bfa2:	2500      	movge	r5, #0
 800bfa4:	f7ff fd40 	bl	800ba28 <_Balloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	b918      	cbnz	r0, 800bfb4 <__mdiff+0x60>
 800bfac:	4b31      	ldr	r3, [pc, #196]	@ (800c074 <__mdiff+0x120>)
 800bfae:	f240 2145 	movw	r1, #581	@ 0x245
 800bfb2:	e7e3      	b.n	800bf7c <__mdiff+0x28>
 800bfb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bfb8:	6926      	ldr	r6, [r4, #16]
 800bfba:	60c5      	str	r5, [r0, #12]
 800bfbc:	f109 0310 	add.w	r3, r9, #16
 800bfc0:	f109 0514 	add.w	r5, r9, #20
 800bfc4:	f104 0e14 	add.w	lr, r4, #20
 800bfc8:	f100 0b14 	add.w	fp, r0, #20
 800bfcc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bfd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	46d9      	mov	r9, fp
 800bfd8:	f04f 0c00 	mov.w	ip, #0
 800bfdc:	9b01      	ldr	r3, [sp, #4]
 800bfde:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfe2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	fa1f f38a 	uxth.w	r3, sl
 800bfec:	4619      	mov	r1, r3
 800bfee:	b283      	uxth	r3, r0
 800bff0:	1acb      	subs	r3, r1, r3
 800bff2:	0c00      	lsrs	r0, r0, #16
 800bff4:	4463      	add	r3, ip
 800bff6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bffa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bffe:	b29b      	uxth	r3, r3
 800c000:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c004:	4576      	cmp	r6, lr
 800c006:	f849 3b04 	str.w	r3, [r9], #4
 800c00a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c00e:	d8e5      	bhi.n	800bfdc <__mdiff+0x88>
 800c010:	1b33      	subs	r3, r6, r4
 800c012:	3b15      	subs	r3, #21
 800c014:	f023 0303 	bic.w	r3, r3, #3
 800c018:	3415      	adds	r4, #21
 800c01a:	3304      	adds	r3, #4
 800c01c:	42a6      	cmp	r6, r4
 800c01e:	bf38      	it	cc
 800c020:	2304      	movcc	r3, #4
 800c022:	441d      	add	r5, r3
 800c024:	445b      	add	r3, fp
 800c026:	461e      	mov	r6, r3
 800c028:	462c      	mov	r4, r5
 800c02a:	4544      	cmp	r4, r8
 800c02c:	d30e      	bcc.n	800c04c <__mdiff+0xf8>
 800c02e:	f108 0103 	add.w	r1, r8, #3
 800c032:	1b49      	subs	r1, r1, r5
 800c034:	f021 0103 	bic.w	r1, r1, #3
 800c038:	3d03      	subs	r5, #3
 800c03a:	45a8      	cmp	r8, r5
 800c03c:	bf38      	it	cc
 800c03e:	2100      	movcc	r1, #0
 800c040:	440b      	add	r3, r1
 800c042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c046:	b191      	cbz	r1, 800c06e <__mdiff+0x11a>
 800c048:	6117      	str	r7, [r2, #16]
 800c04a:	e79d      	b.n	800bf88 <__mdiff+0x34>
 800c04c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c050:	46e6      	mov	lr, ip
 800c052:	0c08      	lsrs	r0, r1, #16
 800c054:	fa1c fc81 	uxtah	ip, ip, r1
 800c058:	4471      	add	r1, lr
 800c05a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c05e:	b289      	uxth	r1, r1
 800c060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c064:	f846 1b04 	str.w	r1, [r6], #4
 800c068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c06c:	e7dd      	b.n	800c02a <__mdiff+0xd6>
 800c06e:	3f01      	subs	r7, #1
 800c070:	e7e7      	b.n	800c042 <__mdiff+0xee>
 800c072:	bf00      	nop
 800c074:	0800f2c8 	.word	0x0800f2c8
 800c078:	0800f2d9 	.word	0x0800f2d9

0800c07c <__d2b>:
 800c07c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c080:	460f      	mov	r7, r1
 800c082:	2101      	movs	r1, #1
 800c084:	ec59 8b10 	vmov	r8, r9, d0
 800c088:	4616      	mov	r6, r2
 800c08a:	f7ff fccd 	bl	800ba28 <_Balloc>
 800c08e:	4604      	mov	r4, r0
 800c090:	b930      	cbnz	r0, 800c0a0 <__d2b+0x24>
 800c092:	4602      	mov	r2, r0
 800c094:	4b23      	ldr	r3, [pc, #140]	@ (800c124 <__d2b+0xa8>)
 800c096:	4824      	ldr	r0, [pc, #144]	@ (800c128 <__d2b+0xac>)
 800c098:	f240 310f 	movw	r1, #783	@ 0x30f
 800c09c:	f000 fa74 	bl	800c588 <__assert_func>
 800c0a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0a8:	b10d      	cbz	r5, 800c0ae <__d2b+0x32>
 800c0aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0b4:	d023      	beq.n	800c0fe <__d2b+0x82>
 800c0b6:	4668      	mov	r0, sp
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	f7ff fd7c 	bl	800bbb6 <__lo0bits>
 800c0be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0c2:	b1d0      	cbz	r0, 800c0fa <__d2b+0x7e>
 800c0c4:	f1c0 0320 	rsb	r3, r0, #32
 800c0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	40c2      	lsrs	r2, r0
 800c0d0:	6163      	str	r3, [r4, #20]
 800c0d2:	9201      	str	r2, [sp, #4]
 800c0d4:	9b01      	ldr	r3, [sp, #4]
 800c0d6:	61a3      	str	r3, [r4, #24]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bf0c      	ite	eq
 800c0dc:	2201      	moveq	r2, #1
 800c0de:	2202      	movne	r2, #2
 800c0e0:	6122      	str	r2, [r4, #16]
 800c0e2:	b1a5      	cbz	r5, 800c10e <__d2b+0x92>
 800c0e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0e8:	4405      	add	r5, r0
 800c0ea:	603d      	str	r5, [r7, #0]
 800c0ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0f0:	6030      	str	r0, [r6, #0]
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	b003      	add	sp, #12
 800c0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0fa:	6161      	str	r1, [r4, #20]
 800c0fc:	e7ea      	b.n	800c0d4 <__d2b+0x58>
 800c0fe:	a801      	add	r0, sp, #4
 800c100:	f7ff fd59 	bl	800bbb6 <__lo0bits>
 800c104:	9b01      	ldr	r3, [sp, #4]
 800c106:	6163      	str	r3, [r4, #20]
 800c108:	3020      	adds	r0, #32
 800c10a:	2201      	movs	r2, #1
 800c10c:	e7e8      	b.n	800c0e0 <__d2b+0x64>
 800c10e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c112:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c116:	6038      	str	r0, [r7, #0]
 800c118:	6918      	ldr	r0, [r3, #16]
 800c11a:	f7ff fd2d 	bl	800bb78 <__hi0bits>
 800c11e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c122:	e7e5      	b.n	800c0f0 <__d2b+0x74>
 800c124:	0800f2c8 	.word	0x0800f2c8
 800c128:	0800f2d9 	.word	0x0800f2d9

0800c12c <__ssputs_r>:
 800c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	688e      	ldr	r6, [r1, #8]
 800c132:	461f      	mov	r7, r3
 800c134:	42be      	cmp	r6, r7
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	4682      	mov	sl, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	4690      	mov	r8, r2
 800c13e:	d82d      	bhi.n	800c19c <__ssputs_r+0x70>
 800c140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c144:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c148:	d026      	beq.n	800c198 <__ssputs_r+0x6c>
 800c14a:	6965      	ldr	r5, [r4, #20]
 800c14c:	6909      	ldr	r1, [r1, #16]
 800c14e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c152:	eba3 0901 	sub.w	r9, r3, r1
 800c156:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c15a:	1c7b      	adds	r3, r7, #1
 800c15c:	444b      	add	r3, r9
 800c15e:	106d      	asrs	r5, r5, #1
 800c160:	429d      	cmp	r5, r3
 800c162:	bf38      	it	cc
 800c164:	461d      	movcc	r5, r3
 800c166:	0553      	lsls	r3, r2, #21
 800c168:	d527      	bpl.n	800c1ba <__ssputs_r+0x8e>
 800c16a:	4629      	mov	r1, r5
 800c16c:	f7ff fbd0 	bl	800b910 <_malloc_r>
 800c170:	4606      	mov	r6, r0
 800c172:	b360      	cbz	r0, 800c1ce <__ssputs_r+0xa2>
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	464a      	mov	r2, r9
 800c178:	f7fe fcf9 	bl	800ab6e <memcpy>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	6126      	str	r6, [r4, #16]
 800c18a:	6165      	str	r5, [r4, #20]
 800c18c:	444e      	add	r6, r9
 800c18e:	eba5 0509 	sub.w	r5, r5, r9
 800c192:	6026      	str	r6, [r4, #0]
 800c194:	60a5      	str	r5, [r4, #8]
 800c196:	463e      	mov	r6, r7
 800c198:	42be      	cmp	r6, r7
 800c19a:	d900      	bls.n	800c19e <__ssputs_r+0x72>
 800c19c:	463e      	mov	r6, r7
 800c19e:	6820      	ldr	r0, [r4, #0]
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	f000 f9c6 	bl	800c534 <memmove>
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	1b9b      	subs	r3, r3, r6
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	4433      	add	r3, r6
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ba:	462a      	mov	r2, r5
 800c1bc:	f000 fa28 	bl	800c610 <_realloc_r>
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d1e0      	bne.n	800c188 <__ssputs_r+0x5c>
 800c1c6:	6921      	ldr	r1, [r4, #16]
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	f7ff fb2d 	bl	800b828 <_free_r>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	f8ca 3000 	str.w	r3, [sl]
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e0:	e7e9      	b.n	800c1b6 <__ssputs_r+0x8a>
	...

0800c1e4 <_svfiprintf_r>:
 800c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	4698      	mov	r8, r3
 800c1ea:	898b      	ldrh	r3, [r1, #12]
 800c1ec:	061b      	lsls	r3, r3, #24
 800c1ee:	b09d      	sub	sp, #116	@ 0x74
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	460d      	mov	r5, r1
 800c1f4:	4614      	mov	r4, r2
 800c1f6:	d510      	bpl.n	800c21a <_svfiprintf_r+0x36>
 800c1f8:	690b      	ldr	r3, [r1, #16]
 800c1fa:	b973      	cbnz	r3, 800c21a <_svfiprintf_r+0x36>
 800c1fc:	2140      	movs	r1, #64	@ 0x40
 800c1fe:	f7ff fb87 	bl	800b910 <_malloc_r>
 800c202:	6028      	str	r0, [r5, #0]
 800c204:	6128      	str	r0, [r5, #16]
 800c206:	b930      	cbnz	r0, 800c216 <_svfiprintf_r+0x32>
 800c208:	230c      	movs	r3, #12
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	b01d      	add	sp, #116	@ 0x74
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	2340      	movs	r3, #64	@ 0x40
 800c218:	616b      	str	r3, [r5, #20]
 800c21a:	2300      	movs	r3, #0
 800c21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21e:	2320      	movs	r3, #32
 800c220:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c224:	f8cd 800c 	str.w	r8, [sp, #12]
 800c228:	2330      	movs	r3, #48	@ 0x30
 800c22a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3c8 <_svfiprintf_r+0x1e4>
 800c22e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c232:	f04f 0901 	mov.w	r9, #1
 800c236:	4623      	mov	r3, r4
 800c238:	469a      	mov	sl, r3
 800c23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23e:	b10a      	cbz	r2, 800c244 <_svfiprintf_r+0x60>
 800c240:	2a25      	cmp	r2, #37	@ 0x25
 800c242:	d1f9      	bne.n	800c238 <_svfiprintf_r+0x54>
 800c244:	ebba 0b04 	subs.w	fp, sl, r4
 800c248:	d00b      	beq.n	800c262 <_svfiprintf_r+0x7e>
 800c24a:	465b      	mov	r3, fp
 800c24c:	4622      	mov	r2, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	4638      	mov	r0, r7
 800c252:	f7ff ff6b 	bl	800c12c <__ssputs_r>
 800c256:	3001      	adds	r0, #1
 800c258:	f000 80a7 	beq.w	800c3aa <_svfiprintf_r+0x1c6>
 800c25c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c25e:	445a      	add	r2, fp
 800c260:	9209      	str	r2, [sp, #36]	@ 0x24
 800c262:	f89a 3000 	ldrb.w	r3, [sl]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 809f 	beq.w	800c3aa <_svfiprintf_r+0x1c6>
 800c26c:	2300      	movs	r3, #0
 800c26e:	f04f 32ff 	mov.w	r2, #4294967295
 800c272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c276:	f10a 0a01 	add.w	sl, sl, #1
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	9307      	str	r3, [sp, #28]
 800c27e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c282:	931a      	str	r3, [sp, #104]	@ 0x68
 800c284:	4654      	mov	r4, sl
 800c286:	2205      	movs	r2, #5
 800c288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28c:	484e      	ldr	r0, [pc, #312]	@ (800c3c8 <_svfiprintf_r+0x1e4>)
 800c28e:	f7f3 ffa7 	bl	80001e0 <memchr>
 800c292:	9a04      	ldr	r2, [sp, #16]
 800c294:	b9d8      	cbnz	r0, 800c2ce <_svfiprintf_r+0xea>
 800c296:	06d0      	lsls	r0, r2, #27
 800c298:	bf44      	itt	mi
 800c29a:	2320      	movmi	r3, #32
 800c29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2a0:	0711      	lsls	r1, r2, #28
 800c2a2:	bf44      	itt	mi
 800c2a4:	232b      	movmi	r3, #43	@ 0x2b
 800c2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2b0:	d015      	beq.n	800c2de <_svfiprintf_r+0xfa>
 800c2b2:	9a07      	ldr	r2, [sp, #28]
 800c2b4:	4654      	mov	r4, sl
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f04f 0c0a 	mov.w	ip, #10
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2c2:	3b30      	subs	r3, #48	@ 0x30
 800c2c4:	2b09      	cmp	r3, #9
 800c2c6:	d94b      	bls.n	800c360 <_svfiprintf_r+0x17c>
 800c2c8:	b1b0      	cbz	r0, 800c2f8 <_svfiprintf_r+0x114>
 800c2ca:	9207      	str	r2, [sp, #28]
 800c2cc:	e014      	b.n	800c2f8 <_svfiprintf_r+0x114>
 800c2ce:	eba0 0308 	sub.w	r3, r0, r8
 800c2d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	9304      	str	r3, [sp, #16]
 800c2da:	46a2      	mov	sl, r4
 800c2dc:	e7d2      	b.n	800c284 <_svfiprintf_r+0xa0>
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	1d19      	adds	r1, r3, #4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	9103      	str	r1, [sp, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bfbb      	ittet	lt
 800c2ea:	425b      	neglt	r3, r3
 800c2ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f0:	9307      	strge	r3, [sp, #28]
 800c2f2:	9307      	strlt	r3, [sp, #28]
 800c2f4:	bfb8      	it	lt
 800c2f6:	9204      	strlt	r2, [sp, #16]
 800c2f8:	7823      	ldrb	r3, [r4, #0]
 800c2fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2fc:	d10a      	bne.n	800c314 <_svfiprintf_r+0x130>
 800c2fe:	7863      	ldrb	r3, [r4, #1]
 800c300:	2b2a      	cmp	r3, #42	@ 0x2a
 800c302:	d132      	bne.n	800c36a <_svfiprintf_r+0x186>
 800c304:	9b03      	ldr	r3, [sp, #12]
 800c306:	1d1a      	adds	r2, r3, #4
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	9203      	str	r2, [sp, #12]
 800c30c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c310:	3402      	adds	r4, #2
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3d8 <_svfiprintf_r+0x1f4>
 800c318:	7821      	ldrb	r1, [r4, #0]
 800c31a:	2203      	movs	r2, #3
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7f3 ff5f 	bl	80001e0 <memchr>
 800c322:	b138      	cbz	r0, 800c334 <_svfiprintf_r+0x150>
 800c324:	9b04      	ldr	r3, [sp, #16]
 800c326:	eba0 000a 	sub.w	r0, r0, sl
 800c32a:	2240      	movs	r2, #64	@ 0x40
 800c32c:	4082      	lsls	r2, r0
 800c32e:	4313      	orrs	r3, r2
 800c330:	3401      	adds	r4, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c338:	4824      	ldr	r0, [pc, #144]	@ (800c3cc <_svfiprintf_r+0x1e8>)
 800c33a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c33e:	2206      	movs	r2, #6
 800c340:	f7f3 ff4e 	bl	80001e0 <memchr>
 800c344:	2800      	cmp	r0, #0
 800c346:	d036      	beq.n	800c3b6 <_svfiprintf_r+0x1d2>
 800c348:	4b21      	ldr	r3, [pc, #132]	@ (800c3d0 <_svfiprintf_r+0x1ec>)
 800c34a:	bb1b      	cbnz	r3, 800c394 <_svfiprintf_r+0x1b0>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	3307      	adds	r3, #7
 800c350:	f023 0307 	bic.w	r3, r3, #7
 800c354:	3308      	adds	r3, #8
 800c356:	9303      	str	r3, [sp, #12]
 800c358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35a:	4433      	add	r3, r6
 800c35c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c35e:	e76a      	b.n	800c236 <_svfiprintf_r+0x52>
 800c360:	fb0c 3202 	mla	r2, ip, r2, r3
 800c364:	460c      	mov	r4, r1
 800c366:	2001      	movs	r0, #1
 800c368:	e7a8      	b.n	800c2bc <_svfiprintf_r+0xd8>
 800c36a:	2300      	movs	r3, #0
 800c36c:	3401      	adds	r4, #1
 800c36e:	9305      	str	r3, [sp, #20]
 800c370:	4619      	mov	r1, r3
 800c372:	f04f 0c0a 	mov.w	ip, #10
 800c376:	4620      	mov	r0, r4
 800c378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c37c:	3a30      	subs	r2, #48	@ 0x30
 800c37e:	2a09      	cmp	r2, #9
 800c380:	d903      	bls.n	800c38a <_svfiprintf_r+0x1a6>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d0c6      	beq.n	800c314 <_svfiprintf_r+0x130>
 800c386:	9105      	str	r1, [sp, #20]
 800c388:	e7c4      	b.n	800c314 <_svfiprintf_r+0x130>
 800c38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38e:	4604      	mov	r4, r0
 800c390:	2301      	movs	r3, #1
 800c392:	e7f0      	b.n	800c376 <_svfiprintf_r+0x192>
 800c394:	ab03      	add	r3, sp, #12
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	462a      	mov	r2, r5
 800c39a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d4 <_svfiprintf_r+0x1f0>)
 800c39c:	a904      	add	r1, sp, #16
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7fd fe88 	bl	800a0b4 <_printf_float>
 800c3a4:	1c42      	adds	r2, r0, #1
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	d1d6      	bne.n	800c358 <_svfiprintf_r+0x174>
 800c3aa:	89ab      	ldrh	r3, [r5, #12]
 800c3ac:	065b      	lsls	r3, r3, #25
 800c3ae:	f53f af2d 	bmi.w	800c20c <_svfiprintf_r+0x28>
 800c3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b4:	e72c      	b.n	800c210 <_svfiprintf_r+0x2c>
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b05      	ldr	r3, [pc, #20]	@ (800c3d4 <_svfiprintf_r+0x1f0>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7fe f90f 	bl	800a5e4 <_printf_i>
 800c3c6:	e7ed      	b.n	800c3a4 <_svfiprintf_r+0x1c0>
 800c3c8:	0800f430 	.word	0x0800f430
 800c3cc:	0800f43a 	.word	0x0800f43a
 800c3d0:	0800a0b5 	.word	0x0800a0b5
 800c3d4:	0800c12d 	.word	0x0800c12d
 800c3d8:	0800f436 	.word	0x0800f436

0800c3dc <__sflush_r>:
 800c3dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e4:	0716      	lsls	r6, r2, #28
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	d454      	bmi.n	800c496 <__sflush_r+0xba>
 800c3ec:	684b      	ldr	r3, [r1, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dc02      	bgt.n	800c3f8 <__sflush_r+0x1c>
 800c3f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dd48      	ble.n	800c48a <__sflush_r+0xae>
 800c3f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3fa:	2e00      	cmp	r6, #0
 800c3fc:	d045      	beq.n	800c48a <__sflush_r+0xae>
 800c3fe:	2300      	movs	r3, #0
 800c400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c404:	682f      	ldr	r7, [r5, #0]
 800c406:	6a21      	ldr	r1, [r4, #32]
 800c408:	602b      	str	r3, [r5, #0]
 800c40a:	d030      	beq.n	800c46e <__sflush_r+0x92>
 800c40c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	0759      	lsls	r1, r3, #29
 800c412:	d505      	bpl.n	800c420 <__sflush_r+0x44>
 800c414:	6863      	ldr	r3, [r4, #4]
 800c416:	1ad2      	subs	r2, r2, r3
 800c418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c41a:	b10b      	cbz	r3, 800c420 <__sflush_r+0x44>
 800c41c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	2300      	movs	r3, #0
 800c422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c424:	6a21      	ldr	r1, [r4, #32]
 800c426:	4628      	mov	r0, r5
 800c428:	47b0      	blx	r6
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	d106      	bne.n	800c43e <__sflush_r+0x62>
 800c430:	6829      	ldr	r1, [r5, #0]
 800c432:	291d      	cmp	r1, #29
 800c434:	d82b      	bhi.n	800c48e <__sflush_r+0xb2>
 800c436:	4a2a      	ldr	r2, [pc, #168]	@ (800c4e0 <__sflush_r+0x104>)
 800c438:	410a      	asrs	r2, r1
 800c43a:	07d6      	lsls	r6, r2, #31
 800c43c:	d427      	bmi.n	800c48e <__sflush_r+0xb2>
 800c43e:	2200      	movs	r2, #0
 800c440:	6062      	str	r2, [r4, #4]
 800c442:	04d9      	lsls	r1, r3, #19
 800c444:	6922      	ldr	r2, [r4, #16]
 800c446:	6022      	str	r2, [r4, #0]
 800c448:	d504      	bpl.n	800c454 <__sflush_r+0x78>
 800c44a:	1c42      	adds	r2, r0, #1
 800c44c:	d101      	bne.n	800c452 <__sflush_r+0x76>
 800c44e:	682b      	ldr	r3, [r5, #0]
 800c450:	b903      	cbnz	r3, 800c454 <__sflush_r+0x78>
 800c452:	6560      	str	r0, [r4, #84]	@ 0x54
 800c454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c456:	602f      	str	r7, [r5, #0]
 800c458:	b1b9      	cbz	r1, 800c48a <__sflush_r+0xae>
 800c45a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c45e:	4299      	cmp	r1, r3
 800c460:	d002      	beq.n	800c468 <__sflush_r+0x8c>
 800c462:	4628      	mov	r0, r5
 800c464:	f7ff f9e0 	bl	800b828 <_free_r>
 800c468:	2300      	movs	r3, #0
 800c46a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c46c:	e00d      	b.n	800c48a <__sflush_r+0xae>
 800c46e:	2301      	movs	r3, #1
 800c470:	4628      	mov	r0, r5
 800c472:	47b0      	blx	r6
 800c474:	4602      	mov	r2, r0
 800c476:	1c50      	adds	r0, r2, #1
 800c478:	d1c9      	bne.n	800c40e <__sflush_r+0x32>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0c6      	beq.n	800c40e <__sflush_r+0x32>
 800c480:	2b1d      	cmp	r3, #29
 800c482:	d001      	beq.n	800c488 <__sflush_r+0xac>
 800c484:	2b16      	cmp	r3, #22
 800c486:	d11e      	bne.n	800c4c6 <__sflush_r+0xea>
 800c488:	602f      	str	r7, [r5, #0]
 800c48a:	2000      	movs	r0, #0
 800c48c:	e022      	b.n	800c4d4 <__sflush_r+0xf8>
 800c48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c492:	b21b      	sxth	r3, r3
 800c494:	e01b      	b.n	800c4ce <__sflush_r+0xf2>
 800c496:	690f      	ldr	r7, [r1, #16]
 800c498:	2f00      	cmp	r7, #0
 800c49a:	d0f6      	beq.n	800c48a <__sflush_r+0xae>
 800c49c:	0793      	lsls	r3, r2, #30
 800c49e:	680e      	ldr	r6, [r1, #0]
 800c4a0:	bf08      	it	eq
 800c4a2:	694b      	ldreq	r3, [r1, #20]
 800c4a4:	600f      	str	r7, [r1, #0]
 800c4a6:	bf18      	it	ne
 800c4a8:	2300      	movne	r3, #0
 800c4aa:	eba6 0807 	sub.w	r8, r6, r7
 800c4ae:	608b      	str	r3, [r1, #8]
 800c4b0:	f1b8 0f00 	cmp.w	r8, #0
 800c4b4:	dde9      	ble.n	800c48a <__sflush_r+0xae>
 800c4b6:	6a21      	ldr	r1, [r4, #32]
 800c4b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4ba:	4643      	mov	r3, r8
 800c4bc:	463a      	mov	r2, r7
 800c4be:	4628      	mov	r0, r5
 800c4c0:	47b0      	blx	r6
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	dc08      	bgt.n	800c4d8 <__sflush_r+0xfc>
 800c4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ce:	81a3      	strh	r3, [r4, #12]
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d8:	4407      	add	r7, r0
 800c4da:	eba8 0800 	sub.w	r8, r8, r0
 800c4de:	e7e7      	b.n	800c4b0 <__sflush_r+0xd4>
 800c4e0:	dfbffffe 	.word	0xdfbffffe

0800c4e4 <_fflush_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	690b      	ldr	r3, [r1, #16]
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	b913      	cbnz	r3, 800c4f4 <_fflush_r+0x10>
 800c4ee:	2500      	movs	r5, #0
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	b118      	cbz	r0, 800c4fe <_fflush_r+0x1a>
 800c4f6:	6a03      	ldr	r3, [r0, #32]
 800c4f8:	b90b      	cbnz	r3, 800c4fe <_fflush_r+0x1a>
 800c4fa:	f7fe fa1f 	bl	800a93c <__sinit>
 800c4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0f3      	beq.n	800c4ee <_fflush_r+0xa>
 800c506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c508:	07d0      	lsls	r0, r2, #31
 800c50a:	d404      	bmi.n	800c516 <_fflush_r+0x32>
 800c50c:	0599      	lsls	r1, r3, #22
 800c50e:	d402      	bmi.n	800c516 <_fflush_r+0x32>
 800c510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c512:	f7fe fb2a 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800c516:	4628      	mov	r0, r5
 800c518:	4621      	mov	r1, r4
 800c51a:	f7ff ff5f 	bl	800c3dc <__sflush_r>
 800c51e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c520:	07da      	lsls	r2, r3, #31
 800c522:	4605      	mov	r5, r0
 800c524:	d4e4      	bmi.n	800c4f0 <_fflush_r+0xc>
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	059b      	lsls	r3, r3, #22
 800c52a:	d4e1      	bmi.n	800c4f0 <_fflush_r+0xc>
 800c52c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c52e:	f7fe fb1d 	bl	800ab6c <__retarget_lock_release_recursive>
 800c532:	e7dd      	b.n	800c4f0 <_fflush_r+0xc>

0800c534 <memmove>:
 800c534:	4288      	cmp	r0, r1
 800c536:	b510      	push	{r4, lr}
 800c538:	eb01 0402 	add.w	r4, r1, r2
 800c53c:	d902      	bls.n	800c544 <memmove+0x10>
 800c53e:	4284      	cmp	r4, r0
 800c540:	4623      	mov	r3, r4
 800c542:	d807      	bhi.n	800c554 <memmove+0x20>
 800c544:	1e43      	subs	r3, r0, #1
 800c546:	42a1      	cmp	r1, r4
 800c548:	d008      	beq.n	800c55c <memmove+0x28>
 800c54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c552:	e7f8      	b.n	800c546 <memmove+0x12>
 800c554:	4402      	add	r2, r0
 800c556:	4601      	mov	r1, r0
 800c558:	428a      	cmp	r2, r1
 800c55a:	d100      	bne.n	800c55e <memmove+0x2a>
 800c55c:	bd10      	pop	{r4, pc}
 800c55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c566:	e7f7      	b.n	800c558 <memmove+0x24>

0800c568 <_sbrk_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	@ (800c584 <_sbrk_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f9 faec 	bl	8005b50 <_sbrk>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_sbrk_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_sbrk_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20000770 	.word	0x20000770

0800c588 <__assert_func>:
 800c588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c58a:	4614      	mov	r4, r2
 800c58c:	461a      	mov	r2, r3
 800c58e:	4b09      	ldr	r3, [pc, #36]	@ (800c5b4 <__assert_func+0x2c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4605      	mov	r5, r0
 800c594:	68d8      	ldr	r0, [r3, #12]
 800c596:	b954      	cbnz	r4, 800c5ae <__assert_func+0x26>
 800c598:	4b07      	ldr	r3, [pc, #28]	@ (800c5b8 <__assert_func+0x30>)
 800c59a:	461c      	mov	r4, r3
 800c59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a0:	9100      	str	r1, [sp, #0]
 800c5a2:	462b      	mov	r3, r5
 800c5a4:	4905      	ldr	r1, [pc, #20]	@ (800c5bc <__assert_func+0x34>)
 800c5a6:	f000 f86f 	bl	800c688 <fiprintf>
 800c5aa:	f000 f87f 	bl	800c6ac <abort>
 800c5ae:	4b04      	ldr	r3, [pc, #16]	@ (800c5c0 <__assert_func+0x38>)
 800c5b0:	e7f4      	b.n	800c59c <__assert_func+0x14>
 800c5b2:	bf00      	nop
 800c5b4:	20000034 	.word	0x20000034
 800c5b8:	0800f486 	.word	0x0800f486
 800c5bc:	0800f458 	.word	0x0800f458
 800c5c0:	0800f44b 	.word	0x0800f44b

0800c5c4 <_calloc_r>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800c5ca:	b93c      	cbnz	r4, 800c5dc <_calloc_r+0x18>
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7ff f99f 	bl	800b910 <_malloc_r>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	b928      	cbnz	r0, 800c5e2 <_calloc_r+0x1e>
 800c5d6:	2600      	movs	r6, #0
 800c5d8:	4630      	mov	r0, r6
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	220c      	movs	r2, #12
 800c5de:	6002      	str	r2, [r0, #0]
 800c5e0:	e7f9      	b.n	800c5d6 <_calloc_r+0x12>
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	f7fe fa42 	bl	800aa6e <memset>
 800c5ea:	e7f5      	b.n	800c5d8 <_calloc_r+0x14>

0800c5ec <__ascii_mbtowc>:
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	b901      	cbnz	r1, 800c5f2 <__ascii_mbtowc+0x6>
 800c5f0:	a901      	add	r1, sp, #4
 800c5f2:	b142      	cbz	r2, 800c606 <__ascii_mbtowc+0x1a>
 800c5f4:	b14b      	cbz	r3, 800c60a <__ascii_mbtowc+0x1e>
 800c5f6:	7813      	ldrb	r3, [r2, #0]
 800c5f8:	600b      	str	r3, [r1, #0]
 800c5fa:	7812      	ldrb	r2, [r2, #0]
 800c5fc:	1e10      	subs	r0, r2, #0
 800c5fe:	bf18      	it	ne
 800c600:	2001      	movne	r0, #1
 800c602:	b002      	add	sp, #8
 800c604:	4770      	bx	lr
 800c606:	4610      	mov	r0, r2
 800c608:	e7fb      	b.n	800c602 <__ascii_mbtowc+0x16>
 800c60a:	f06f 0001 	mvn.w	r0, #1
 800c60e:	e7f8      	b.n	800c602 <__ascii_mbtowc+0x16>

0800c610 <_realloc_r>:
 800c610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c614:	4680      	mov	r8, r0
 800c616:	4615      	mov	r5, r2
 800c618:	460c      	mov	r4, r1
 800c61a:	b921      	cbnz	r1, 800c626 <_realloc_r+0x16>
 800c61c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	4611      	mov	r1, r2
 800c622:	f7ff b975 	b.w	800b910 <_malloc_r>
 800c626:	b92a      	cbnz	r2, 800c634 <_realloc_r+0x24>
 800c628:	f7ff f8fe 	bl	800b828 <_free_r>
 800c62c:	2400      	movs	r4, #0
 800c62e:	4620      	mov	r0, r4
 800c630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c634:	f000 f841 	bl	800c6ba <_malloc_usable_size_r>
 800c638:	4285      	cmp	r5, r0
 800c63a:	4606      	mov	r6, r0
 800c63c:	d802      	bhi.n	800c644 <_realloc_r+0x34>
 800c63e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c642:	d8f4      	bhi.n	800c62e <_realloc_r+0x1e>
 800c644:	4629      	mov	r1, r5
 800c646:	4640      	mov	r0, r8
 800c648:	f7ff f962 	bl	800b910 <_malloc_r>
 800c64c:	4607      	mov	r7, r0
 800c64e:	2800      	cmp	r0, #0
 800c650:	d0ec      	beq.n	800c62c <_realloc_r+0x1c>
 800c652:	42b5      	cmp	r5, r6
 800c654:	462a      	mov	r2, r5
 800c656:	4621      	mov	r1, r4
 800c658:	bf28      	it	cs
 800c65a:	4632      	movcs	r2, r6
 800c65c:	f7fe fa87 	bl	800ab6e <memcpy>
 800c660:	4621      	mov	r1, r4
 800c662:	4640      	mov	r0, r8
 800c664:	f7ff f8e0 	bl	800b828 <_free_r>
 800c668:	463c      	mov	r4, r7
 800c66a:	e7e0      	b.n	800c62e <_realloc_r+0x1e>

0800c66c <__ascii_wctomb>:
 800c66c:	4603      	mov	r3, r0
 800c66e:	4608      	mov	r0, r1
 800c670:	b141      	cbz	r1, 800c684 <__ascii_wctomb+0x18>
 800c672:	2aff      	cmp	r2, #255	@ 0xff
 800c674:	d904      	bls.n	800c680 <__ascii_wctomb+0x14>
 800c676:	228a      	movs	r2, #138	@ 0x8a
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	4770      	bx	lr
 800c680:	700a      	strb	r2, [r1, #0]
 800c682:	2001      	movs	r0, #1
 800c684:	4770      	bx	lr
	...

0800c688 <fiprintf>:
 800c688:	b40e      	push	{r1, r2, r3}
 800c68a:	b503      	push	{r0, r1, lr}
 800c68c:	4601      	mov	r1, r0
 800c68e:	ab03      	add	r3, sp, #12
 800c690:	4805      	ldr	r0, [pc, #20]	@ (800c6a8 <fiprintf+0x20>)
 800c692:	f853 2b04 	ldr.w	r2, [r3], #4
 800c696:	6800      	ldr	r0, [r0, #0]
 800c698:	9301      	str	r3, [sp, #4]
 800c69a:	f000 f83f 	bl	800c71c <_vfiprintf_r>
 800c69e:	b002      	add	sp, #8
 800c6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a4:	b003      	add	sp, #12
 800c6a6:	4770      	bx	lr
 800c6a8:	20000034 	.word	0x20000034

0800c6ac <abort>:
 800c6ac:	b508      	push	{r3, lr}
 800c6ae:	2006      	movs	r0, #6
 800c6b0:	f000 fa08 	bl	800cac4 <raise>
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	f7f9 f9d3 	bl	8005a60 <_exit>

0800c6ba <_malloc_usable_size_r>:
 800c6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6be:	1f18      	subs	r0, r3, #4
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfbc      	itt	lt
 800c6c4:	580b      	ldrlt	r3, [r1, r0]
 800c6c6:	18c0      	addlt	r0, r0, r3
 800c6c8:	4770      	bx	lr

0800c6ca <__sfputc_r>:
 800c6ca:	6893      	ldr	r3, [r2, #8]
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	b410      	push	{r4}
 800c6d2:	6093      	str	r3, [r2, #8]
 800c6d4:	da08      	bge.n	800c6e8 <__sfputc_r+0x1e>
 800c6d6:	6994      	ldr	r4, [r2, #24]
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	db01      	blt.n	800c6e0 <__sfputc_r+0x16>
 800c6dc:	290a      	cmp	r1, #10
 800c6de:	d103      	bne.n	800c6e8 <__sfputc_r+0x1e>
 800c6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6e4:	f000 b932 	b.w	800c94c <__swbuf_r>
 800c6e8:	6813      	ldr	r3, [r2, #0]
 800c6ea:	1c58      	adds	r0, r3, #1
 800c6ec:	6010      	str	r0, [r2, #0]
 800c6ee:	7019      	strb	r1, [r3, #0]
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <__sfputs_r>:
 800c6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460f      	mov	r7, r1
 800c6fe:	4614      	mov	r4, r2
 800c700:	18d5      	adds	r5, r2, r3
 800c702:	42ac      	cmp	r4, r5
 800c704:	d101      	bne.n	800c70a <__sfputs_r+0x12>
 800c706:	2000      	movs	r0, #0
 800c708:	e007      	b.n	800c71a <__sfputs_r+0x22>
 800c70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70e:	463a      	mov	r2, r7
 800c710:	4630      	mov	r0, r6
 800c712:	f7ff ffda 	bl	800c6ca <__sfputc_r>
 800c716:	1c43      	adds	r3, r0, #1
 800c718:	d1f3      	bne.n	800c702 <__sfputs_r+0xa>
 800c71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c71c <_vfiprintf_r>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	460d      	mov	r5, r1
 800c722:	b09d      	sub	sp, #116	@ 0x74
 800c724:	4614      	mov	r4, r2
 800c726:	4698      	mov	r8, r3
 800c728:	4606      	mov	r6, r0
 800c72a:	b118      	cbz	r0, 800c734 <_vfiprintf_r+0x18>
 800c72c:	6a03      	ldr	r3, [r0, #32]
 800c72e:	b90b      	cbnz	r3, 800c734 <_vfiprintf_r+0x18>
 800c730:	f7fe f904 	bl	800a93c <__sinit>
 800c734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c736:	07d9      	lsls	r1, r3, #31
 800c738:	d405      	bmi.n	800c746 <_vfiprintf_r+0x2a>
 800c73a:	89ab      	ldrh	r3, [r5, #12]
 800c73c:	059a      	lsls	r2, r3, #22
 800c73e:	d402      	bmi.n	800c746 <_vfiprintf_r+0x2a>
 800c740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c742:	f7fe fa12 	bl	800ab6a <__retarget_lock_acquire_recursive>
 800c746:	89ab      	ldrh	r3, [r5, #12]
 800c748:	071b      	lsls	r3, r3, #28
 800c74a:	d501      	bpl.n	800c750 <_vfiprintf_r+0x34>
 800c74c:	692b      	ldr	r3, [r5, #16]
 800c74e:	b99b      	cbnz	r3, 800c778 <_vfiprintf_r+0x5c>
 800c750:	4629      	mov	r1, r5
 800c752:	4630      	mov	r0, r6
 800c754:	f000 f938 	bl	800c9c8 <__swsetup_r>
 800c758:	b170      	cbz	r0, 800c778 <_vfiprintf_r+0x5c>
 800c75a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c75c:	07dc      	lsls	r4, r3, #31
 800c75e:	d504      	bpl.n	800c76a <_vfiprintf_r+0x4e>
 800c760:	f04f 30ff 	mov.w	r0, #4294967295
 800c764:	b01d      	add	sp, #116	@ 0x74
 800c766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76a:	89ab      	ldrh	r3, [r5, #12]
 800c76c:	0598      	lsls	r0, r3, #22
 800c76e:	d4f7      	bmi.n	800c760 <_vfiprintf_r+0x44>
 800c770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c772:	f7fe f9fb 	bl	800ab6c <__retarget_lock_release_recursive>
 800c776:	e7f3      	b.n	800c760 <_vfiprintf_r+0x44>
 800c778:	2300      	movs	r3, #0
 800c77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c77c:	2320      	movs	r3, #32
 800c77e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c782:	f8cd 800c 	str.w	r8, [sp, #12]
 800c786:	2330      	movs	r3, #48	@ 0x30
 800c788:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c938 <_vfiprintf_r+0x21c>
 800c78c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c790:	f04f 0901 	mov.w	r9, #1
 800c794:	4623      	mov	r3, r4
 800c796:	469a      	mov	sl, r3
 800c798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c79c:	b10a      	cbz	r2, 800c7a2 <_vfiprintf_r+0x86>
 800c79e:	2a25      	cmp	r2, #37	@ 0x25
 800c7a0:	d1f9      	bne.n	800c796 <_vfiprintf_r+0x7a>
 800c7a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a6:	d00b      	beq.n	800c7c0 <_vfiprintf_r+0xa4>
 800c7a8:	465b      	mov	r3, fp
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f7ff ffa2 	bl	800c6f8 <__sfputs_r>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	f000 80a7 	beq.w	800c908 <_vfiprintf_r+0x1ec>
 800c7ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7bc:	445a      	add	r2, fp
 800c7be:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 809f 	beq.w	800c908 <_vfiprintf_r+0x1ec>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d4:	f10a 0a01 	add.w	sl, sl, #1
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	9307      	str	r3, [sp, #28]
 800c7dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7e2:	4654      	mov	r4, sl
 800c7e4:	2205      	movs	r2, #5
 800c7e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ea:	4853      	ldr	r0, [pc, #332]	@ (800c938 <_vfiprintf_r+0x21c>)
 800c7ec:	f7f3 fcf8 	bl	80001e0 <memchr>
 800c7f0:	9a04      	ldr	r2, [sp, #16]
 800c7f2:	b9d8      	cbnz	r0, 800c82c <_vfiprintf_r+0x110>
 800c7f4:	06d1      	lsls	r1, r2, #27
 800c7f6:	bf44      	itt	mi
 800c7f8:	2320      	movmi	r3, #32
 800c7fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7fe:	0713      	lsls	r3, r2, #28
 800c800:	bf44      	itt	mi
 800c802:	232b      	movmi	r3, #43	@ 0x2b
 800c804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c808:	f89a 3000 	ldrb.w	r3, [sl]
 800c80c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c80e:	d015      	beq.n	800c83c <_vfiprintf_r+0x120>
 800c810:	9a07      	ldr	r2, [sp, #28]
 800c812:	4654      	mov	r4, sl
 800c814:	2000      	movs	r0, #0
 800c816:	f04f 0c0a 	mov.w	ip, #10
 800c81a:	4621      	mov	r1, r4
 800c81c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c820:	3b30      	subs	r3, #48	@ 0x30
 800c822:	2b09      	cmp	r3, #9
 800c824:	d94b      	bls.n	800c8be <_vfiprintf_r+0x1a2>
 800c826:	b1b0      	cbz	r0, 800c856 <_vfiprintf_r+0x13a>
 800c828:	9207      	str	r2, [sp, #28]
 800c82a:	e014      	b.n	800c856 <_vfiprintf_r+0x13a>
 800c82c:	eba0 0308 	sub.w	r3, r0, r8
 800c830:	fa09 f303 	lsl.w	r3, r9, r3
 800c834:	4313      	orrs	r3, r2
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	46a2      	mov	sl, r4
 800c83a:	e7d2      	b.n	800c7e2 <_vfiprintf_r+0xc6>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	1d19      	adds	r1, r3, #4
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	9103      	str	r1, [sp, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	bfbb      	ittet	lt
 800c848:	425b      	neglt	r3, r3
 800c84a:	f042 0202 	orrlt.w	r2, r2, #2
 800c84e:	9307      	strge	r3, [sp, #28]
 800c850:	9307      	strlt	r3, [sp, #28]
 800c852:	bfb8      	it	lt
 800c854:	9204      	strlt	r2, [sp, #16]
 800c856:	7823      	ldrb	r3, [r4, #0]
 800c858:	2b2e      	cmp	r3, #46	@ 0x2e
 800c85a:	d10a      	bne.n	800c872 <_vfiprintf_r+0x156>
 800c85c:	7863      	ldrb	r3, [r4, #1]
 800c85e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c860:	d132      	bne.n	800c8c8 <_vfiprintf_r+0x1ac>
 800c862:	9b03      	ldr	r3, [sp, #12]
 800c864:	1d1a      	adds	r2, r3, #4
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	9203      	str	r2, [sp, #12]
 800c86a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c86e:	3402      	adds	r4, #2
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c948 <_vfiprintf_r+0x22c>
 800c876:	7821      	ldrb	r1, [r4, #0]
 800c878:	2203      	movs	r2, #3
 800c87a:	4650      	mov	r0, sl
 800c87c:	f7f3 fcb0 	bl	80001e0 <memchr>
 800c880:	b138      	cbz	r0, 800c892 <_vfiprintf_r+0x176>
 800c882:	9b04      	ldr	r3, [sp, #16]
 800c884:	eba0 000a 	sub.w	r0, r0, sl
 800c888:	2240      	movs	r2, #64	@ 0x40
 800c88a:	4082      	lsls	r2, r0
 800c88c:	4313      	orrs	r3, r2
 800c88e:	3401      	adds	r4, #1
 800c890:	9304      	str	r3, [sp, #16]
 800c892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c896:	4829      	ldr	r0, [pc, #164]	@ (800c93c <_vfiprintf_r+0x220>)
 800c898:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c89c:	2206      	movs	r2, #6
 800c89e:	f7f3 fc9f 	bl	80001e0 <memchr>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d03f      	beq.n	800c926 <_vfiprintf_r+0x20a>
 800c8a6:	4b26      	ldr	r3, [pc, #152]	@ (800c940 <_vfiprintf_r+0x224>)
 800c8a8:	bb1b      	cbnz	r3, 800c8f2 <_vfiprintf_r+0x1d6>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	3307      	adds	r3, #7
 800c8ae:	f023 0307 	bic.w	r3, r3, #7
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	9303      	str	r3, [sp, #12]
 800c8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8b8:	443b      	add	r3, r7
 800c8ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8bc:	e76a      	b.n	800c794 <_vfiprintf_r+0x78>
 800c8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c2:	460c      	mov	r4, r1
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	e7a8      	b.n	800c81a <_vfiprintf_r+0xfe>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	3401      	adds	r4, #1
 800c8cc:	9305      	str	r3, [sp, #20]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	f04f 0c0a 	mov.w	ip, #10
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8da:	3a30      	subs	r2, #48	@ 0x30
 800c8dc:	2a09      	cmp	r2, #9
 800c8de:	d903      	bls.n	800c8e8 <_vfiprintf_r+0x1cc>
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0c6      	beq.n	800c872 <_vfiprintf_r+0x156>
 800c8e4:	9105      	str	r1, [sp, #20]
 800c8e6:	e7c4      	b.n	800c872 <_vfiprintf_r+0x156>
 800c8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ec:	4604      	mov	r4, r0
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e7f0      	b.n	800c8d4 <_vfiprintf_r+0x1b8>
 800c8f2:	ab03      	add	r3, sp, #12
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	462a      	mov	r2, r5
 800c8f8:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <_vfiprintf_r+0x228>)
 800c8fa:	a904      	add	r1, sp, #16
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7fd fbd9 	bl	800a0b4 <_printf_float>
 800c902:	4607      	mov	r7, r0
 800c904:	1c78      	adds	r0, r7, #1
 800c906:	d1d6      	bne.n	800c8b6 <_vfiprintf_r+0x19a>
 800c908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c90a:	07d9      	lsls	r1, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_vfiprintf_r+0x1fe>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d402      	bmi.n	800c91a <_vfiprintf_r+0x1fe>
 800c914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c916:	f7fe f929 	bl	800ab6c <__retarget_lock_release_recursive>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	065b      	lsls	r3, r3, #25
 800c91e:	f53f af1f 	bmi.w	800c760 <_vfiprintf_r+0x44>
 800c922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c924:	e71e      	b.n	800c764 <_vfiprintf_r+0x48>
 800c926:	ab03      	add	r3, sp, #12
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	462a      	mov	r2, r5
 800c92c:	4b05      	ldr	r3, [pc, #20]	@ (800c944 <_vfiprintf_r+0x228>)
 800c92e:	a904      	add	r1, sp, #16
 800c930:	4630      	mov	r0, r6
 800c932:	f7fd fe57 	bl	800a5e4 <_printf_i>
 800c936:	e7e4      	b.n	800c902 <_vfiprintf_r+0x1e6>
 800c938:	0800f430 	.word	0x0800f430
 800c93c:	0800f43a 	.word	0x0800f43a
 800c940:	0800a0b5 	.word	0x0800a0b5
 800c944:	0800c6f9 	.word	0x0800c6f9
 800c948:	0800f436 	.word	0x0800f436

0800c94c <__swbuf_r>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	460e      	mov	r6, r1
 800c950:	4614      	mov	r4, r2
 800c952:	4605      	mov	r5, r0
 800c954:	b118      	cbz	r0, 800c95e <__swbuf_r+0x12>
 800c956:	6a03      	ldr	r3, [r0, #32]
 800c958:	b90b      	cbnz	r3, 800c95e <__swbuf_r+0x12>
 800c95a:	f7fd ffef 	bl	800a93c <__sinit>
 800c95e:	69a3      	ldr	r3, [r4, #24]
 800c960:	60a3      	str	r3, [r4, #8]
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	071a      	lsls	r2, r3, #28
 800c966:	d501      	bpl.n	800c96c <__swbuf_r+0x20>
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	b943      	cbnz	r3, 800c97e <__swbuf_r+0x32>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 f82a 	bl	800c9c8 <__swsetup_r>
 800c974:	b118      	cbz	r0, 800c97e <__swbuf_r+0x32>
 800c976:	f04f 37ff 	mov.w	r7, #4294967295
 800c97a:	4638      	mov	r0, r7
 800c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97e:	6823      	ldr	r3, [r4, #0]
 800c980:	6922      	ldr	r2, [r4, #16]
 800c982:	1a98      	subs	r0, r3, r2
 800c984:	6963      	ldr	r3, [r4, #20]
 800c986:	b2f6      	uxtb	r6, r6
 800c988:	4283      	cmp	r3, r0
 800c98a:	4637      	mov	r7, r6
 800c98c:	dc05      	bgt.n	800c99a <__swbuf_r+0x4e>
 800c98e:	4621      	mov	r1, r4
 800c990:	4628      	mov	r0, r5
 800c992:	f7ff fda7 	bl	800c4e4 <_fflush_r>
 800c996:	2800      	cmp	r0, #0
 800c998:	d1ed      	bne.n	800c976 <__swbuf_r+0x2a>
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	3b01      	subs	r3, #1
 800c99e:	60a3      	str	r3, [r4, #8]
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	6022      	str	r2, [r4, #0]
 800c9a6:	701e      	strb	r6, [r3, #0]
 800c9a8:	6962      	ldr	r2, [r4, #20]
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d004      	beq.n	800c9ba <__swbuf_r+0x6e>
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	07db      	lsls	r3, r3, #31
 800c9b4:	d5e1      	bpl.n	800c97a <__swbuf_r+0x2e>
 800c9b6:	2e0a      	cmp	r6, #10
 800c9b8:	d1df      	bne.n	800c97a <__swbuf_r+0x2e>
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f7ff fd91 	bl	800c4e4 <_fflush_r>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d0d9      	beq.n	800c97a <__swbuf_r+0x2e>
 800c9c6:	e7d6      	b.n	800c976 <__swbuf_r+0x2a>

0800c9c8 <__swsetup_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ca70 <__swsetup_r+0xa8>)
 800c9cc:	4605      	mov	r5, r0
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	460c      	mov	r4, r1
 800c9d2:	b118      	cbz	r0, 800c9dc <__swsetup_r+0x14>
 800c9d4:	6a03      	ldr	r3, [r0, #32]
 800c9d6:	b90b      	cbnz	r3, 800c9dc <__swsetup_r+0x14>
 800c9d8:	f7fd ffb0 	bl	800a93c <__sinit>
 800c9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9e0:	0719      	lsls	r1, r3, #28
 800c9e2:	d422      	bmi.n	800ca2a <__swsetup_r+0x62>
 800c9e4:	06da      	lsls	r2, r3, #27
 800c9e6:	d407      	bmi.n	800c9f8 <__swsetup_r+0x30>
 800c9e8:	2209      	movs	r2, #9
 800c9ea:	602a      	str	r2, [r5, #0]
 800c9ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f6:	e033      	b.n	800ca60 <__swsetup_r+0x98>
 800c9f8:	0758      	lsls	r0, r3, #29
 800c9fa:	d512      	bpl.n	800ca22 <__swsetup_r+0x5a>
 800c9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9fe:	b141      	cbz	r1, 800ca12 <__swsetup_r+0x4a>
 800ca00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca04:	4299      	cmp	r1, r3
 800ca06:	d002      	beq.n	800ca0e <__swsetup_r+0x46>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f7fe ff0d 	bl	800b828 <_free_r>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca18:	81a3      	strh	r3, [r4, #12]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	f043 0308 	orr.w	r3, r3, #8
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	6923      	ldr	r3, [r4, #16]
 800ca2c:	b94b      	cbnz	r3, 800ca42 <__swsetup_r+0x7a>
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca38:	d003      	beq.n	800ca42 <__swsetup_r+0x7a>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f000 f883 	bl	800cb48 <__smakebuf_r>
 800ca42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca46:	f013 0201 	ands.w	r2, r3, #1
 800ca4a:	d00a      	beq.n	800ca62 <__swsetup_r+0x9a>
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	60a2      	str	r2, [r4, #8]
 800ca50:	6962      	ldr	r2, [r4, #20]
 800ca52:	4252      	negs	r2, r2
 800ca54:	61a2      	str	r2, [r4, #24]
 800ca56:	6922      	ldr	r2, [r4, #16]
 800ca58:	b942      	cbnz	r2, 800ca6c <__swsetup_r+0xa4>
 800ca5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca5e:	d1c5      	bne.n	800c9ec <__swsetup_r+0x24>
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	0799      	lsls	r1, r3, #30
 800ca64:	bf58      	it	pl
 800ca66:	6962      	ldrpl	r2, [r4, #20]
 800ca68:	60a2      	str	r2, [r4, #8]
 800ca6a:	e7f4      	b.n	800ca56 <__swsetup_r+0x8e>
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7f7      	b.n	800ca60 <__swsetup_r+0x98>
 800ca70:	20000034 	.word	0x20000034

0800ca74 <_raise_r>:
 800ca74:	291f      	cmp	r1, #31
 800ca76:	b538      	push	{r3, r4, r5, lr}
 800ca78:	4605      	mov	r5, r0
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	d904      	bls.n	800ca88 <_raise_r+0x14>
 800ca7e:	2316      	movs	r3, #22
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	f04f 30ff 	mov.w	r0, #4294967295
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
 800ca88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ca8a:	b112      	cbz	r2, 800ca92 <_raise_r+0x1e>
 800ca8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca90:	b94b      	cbnz	r3, 800caa6 <_raise_r+0x32>
 800ca92:	4628      	mov	r0, r5
 800ca94:	f000 f830 	bl	800caf8 <_getpid_r>
 800ca98:	4622      	mov	r2, r4
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caa2:	f000 b817 	b.w	800cad4 <_kill_r>
 800caa6:	2b01      	cmp	r3, #1
 800caa8:	d00a      	beq.n	800cac0 <_raise_r+0x4c>
 800caaa:	1c59      	adds	r1, r3, #1
 800caac:	d103      	bne.n	800cab6 <_raise_r+0x42>
 800caae:	2316      	movs	r3, #22
 800cab0:	6003      	str	r3, [r0, #0]
 800cab2:	2001      	movs	r0, #1
 800cab4:	e7e7      	b.n	800ca86 <_raise_r+0x12>
 800cab6:	2100      	movs	r1, #0
 800cab8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cabc:	4620      	mov	r0, r4
 800cabe:	4798      	blx	r3
 800cac0:	2000      	movs	r0, #0
 800cac2:	e7e0      	b.n	800ca86 <_raise_r+0x12>

0800cac4 <raise>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <raise+0xc>)
 800cac6:	4601      	mov	r1, r0
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f7ff bfd3 	b.w	800ca74 <_raise_r>
 800cace:	bf00      	nop
 800cad0:	20000034 	.word	0x20000034

0800cad4 <_kill_r>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d07      	ldr	r5, [pc, #28]	@ (800caf4 <_kill_r+0x20>)
 800cad8:	2300      	movs	r3, #0
 800cada:	4604      	mov	r4, r0
 800cadc:	4608      	mov	r0, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	f7f8 ffad 	bl	8005a40 <_kill>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	d102      	bne.n	800caf0 <_kill_r+0x1c>
 800caea:	682b      	ldr	r3, [r5, #0]
 800caec:	b103      	cbz	r3, 800caf0 <_kill_r+0x1c>
 800caee:	6023      	str	r3, [r4, #0]
 800caf0:	bd38      	pop	{r3, r4, r5, pc}
 800caf2:	bf00      	nop
 800caf4:	20000770 	.word	0x20000770

0800caf8 <_getpid_r>:
 800caf8:	f7f8 bf9a 	b.w	8005a30 <_getpid>

0800cafc <__swhatbuf_r>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	460c      	mov	r4, r1
 800cb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb04:	2900      	cmp	r1, #0
 800cb06:	b096      	sub	sp, #88	@ 0x58
 800cb08:	4615      	mov	r5, r2
 800cb0a:	461e      	mov	r6, r3
 800cb0c:	da0d      	bge.n	800cb2a <__swhatbuf_r+0x2e>
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb14:	f04f 0100 	mov.w	r1, #0
 800cb18:	bf14      	ite	ne
 800cb1a:	2340      	movne	r3, #64	@ 0x40
 800cb1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb20:	2000      	movs	r0, #0
 800cb22:	6031      	str	r1, [r6, #0]
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	b016      	add	sp, #88	@ 0x58
 800cb28:	bd70      	pop	{r4, r5, r6, pc}
 800cb2a:	466a      	mov	r2, sp
 800cb2c:	f000 f848 	bl	800cbc0 <_fstat_r>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	dbec      	blt.n	800cb0e <__swhatbuf_r+0x12>
 800cb34:	9901      	ldr	r1, [sp, #4]
 800cb36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb3e:	4259      	negs	r1, r3
 800cb40:	4159      	adcs	r1, r3
 800cb42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb46:	e7eb      	b.n	800cb20 <__swhatbuf_r+0x24>

0800cb48 <__smakebuf_r>:
 800cb48:	898b      	ldrh	r3, [r1, #12]
 800cb4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb4c:	079d      	lsls	r5, r3, #30
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460c      	mov	r4, r1
 800cb52:	d507      	bpl.n	800cb64 <__smakebuf_r+0x1c>
 800cb54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	6123      	str	r3, [r4, #16]
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	6163      	str	r3, [r4, #20]
 800cb60:	b003      	add	sp, #12
 800cb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb64:	ab01      	add	r3, sp, #4
 800cb66:	466a      	mov	r2, sp
 800cb68:	f7ff ffc8 	bl	800cafc <__swhatbuf_r>
 800cb6c:	9f00      	ldr	r7, [sp, #0]
 800cb6e:	4605      	mov	r5, r0
 800cb70:	4639      	mov	r1, r7
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7fe fecc 	bl	800b910 <_malloc_r>
 800cb78:	b948      	cbnz	r0, 800cb8e <__smakebuf_r+0x46>
 800cb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb7e:	059a      	lsls	r2, r3, #22
 800cb80:	d4ee      	bmi.n	800cb60 <__smakebuf_r+0x18>
 800cb82:	f023 0303 	bic.w	r3, r3, #3
 800cb86:	f043 0302 	orr.w	r3, r3, #2
 800cb8a:	81a3      	strh	r3, [r4, #12]
 800cb8c:	e7e2      	b.n	800cb54 <__smakebuf_r+0xc>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	6020      	str	r0, [r4, #0]
 800cb92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb96:	81a3      	strh	r3, [r4, #12]
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb9e:	b15b      	cbz	r3, 800cbb8 <__smakebuf_r+0x70>
 800cba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cba4:	4630      	mov	r0, r6
 800cba6:	f000 f81d 	bl	800cbe4 <_isatty_r>
 800cbaa:	b128      	cbz	r0, 800cbb8 <__smakebuf_r+0x70>
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	f023 0303 	bic.w	r3, r3, #3
 800cbb2:	f043 0301 	orr.w	r3, r3, #1
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	431d      	orrs	r5, r3
 800cbbc:	81a5      	strh	r5, [r4, #12]
 800cbbe:	e7cf      	b.n	800cb60 <__smakebuf_r+0x18>

0800cbc0 <_fstat_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d07      	ldr	r5, [pc, #28]	@ (800cbe0 <_fstat_r+0x20>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	4611      	mov	r1, r2
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	f7f8 ff97 	bl	8005b00 <_fstat>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d102      	bne.n	800cbdc <_fstat_r+0x1c>
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	b103      	cbz	r3, 800cbdc <_fstat_r+0x1c>
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000770 	.word	0x20000770

0800cbe4 <_isatty_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d06      	ldr	r5, [pc, #24]	@ (800cc00 <_isatty_r+0x1c>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f8 ff96 	bl	8005b20 <_isatty>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_isatty_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_isatty_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20000770 	.word	0x20000770

0800cc04 <_init>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	bf00      	nop
 800cc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc0a:	bc08      	pop	{r3}
 800cc0c:	469e      	mov	lr, r3
 800cc0e:	4770      	bx	lr

0800cc10 <_fini>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	bf00      	nop
 800cc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc16:	bc08      	pop	{r3}
 800cc18:	469e      	mov	lr, r3
 800cc1a:	4770      	bx	lr
